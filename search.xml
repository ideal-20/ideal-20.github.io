<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>005-如何用C++实现栈</title>
      <link href="/2019/10/22/9.2-shu-ju-jie-gou/005-zhan/"/>
      <url>/2019/10/22/9.2-shu-ju-jie-gou/005-zhan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-01-000.png" alt></p><h2 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h2><blockquote><p>栈（stack）又名堆栈，它是一种<strong>运算受限的线性表</strong>。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈<strong>插入新元素</strong>又称作<strong>进栈、入栈或压栈</strong>，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈<strong>删除元素</strong>又称作<strong>出栈或退栈</strong>，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。 ——百度百科</p></blockquote><p><strong>简单定义</strong>：栈就是一种只允许在表尾进行插入和删除操作的线性表</p><h2 id="如何理解栈的概念"><a href="#如何理解栈的概念" class="headerlink" title="如何理解栈的概念"></a>如何理解栈的概念</h2><p><strong>①</strong> 举一个生活中的例子：我在一个储物箱中，堆了一堆衣服，我的一件球衣在最下面，而我要拿这件衣服，就意味着我必须将上面的衣服全部拿出来才可以，但是由于箱子只有一个口，我也只能从上面拿东西，心里还默默想着，当初就不该将球衣早早的放进去，导致结果就是先进后出！</p><p>你就不能举个计算机中的例子？这就安排！</p><p><strong>②</strong> 计算机中很多操作都是使用栈的原理来实现的，我们就比如常见的浏览器中的 “前进键” “后退键” 就可以利用栈的原理来实现，我们来用图说明一下</p><p>我们想要实现前进后退，可以使用两个栈（暂时称作 M、N）来实现</p><ul><li><p>我们分别浏览了页面A、页面B、页面C，所以我们将这些页面依次压入栈，即图中打开页面部分</p></li><li><p>当用户点击后退时，我们需要退回到页面B中去，但是由于页面C在B上方，我们就必须将页面C从栈M中先弹出，放到栈N中，即图中后退部分</p></li><li><p>但是如果用户突然又想回到页面C去，原理相似的，只需要把栈N中的页面C弹出，重新压入栈M即可</p></li><li><p>而如果用户在浏览B界面的时候，打开了新的界面D，那么C就无法通过前进后退访问了，所以栈M中压入页面D的同时还需要清空栈N</p></li></ul><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-01-001.png" alt></p><h2 id="栈的术语说明"><a href="#栈的术语说明" class="headerlink" title="栈的术语说明"></a>栈的术语说明</h2><p>栈顶：允许进行插入和进行删除操作的一段成为栈顶</p><p>栈底：表的另一端称为栈底 （第一个元素进入的位置）</p><p>压栈：在栈顶位置插入元素的操作叫做压栈，或入栈、进栈</p><p>出栈：删除栈顶元素的操作叫做出栈，也叫作弹栈，或者退栈</p><p>空栈：不含元素的空表</p><p>栈溢出：当栈满的时候，如果再有元素压栈，则发生上溢，当栈空的时候，再出栈则发生下溢</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-01-002.png" alt></p><h2 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h2><pre class=" language-c++"><code class="language-c++">#ifndef _STACK_H_#define _STACK_H_#include <exception>using namespace std;template <class T>class Stack { public:     virtual bool empty() const = 0;     virtual int size() const = 0;     virtual void push(const T &x) = 0;     virtual T  pop() = 0;                  virtual T getTop() const = 0;      virtual void clear() =0;    virtual ~Stack() {}};/*    自定义异常类*/// 用于检查范围的有效性class outOfRange:public exception {public:       const char* what()const throw()       {    return "ERROR! OUT OF RANGE.\n";    } };  // 用于检查长度的有效性class badSize:public exception {public:       const char* what()const throw()       {    return "ERROR! BAD SIZE.\n";    }  };#endif</code></pre><h2 id="顺序栈——栈的顺序存储结构"><a href="#顺序栈——栈的顺序存储结构" class="headerlink" title="顺序栈——栈的顺序存储结构"></a>顺序栈——栈的顺序存储结构</h2><p>开头我们就已经提过了，栈实际上就是一种线性表的特例，所以栈的实现和线性表一样，均使用数组实现，我们使用一个一维数组来存储元素，那么总得有个头阿，我们就需要确定栈底的位置，通常我们选择 0 的一端作为栈底，这样更加方便理解与操作，特别的是，我们设置了一个整型变量top 用来存放栈顶元素的位置（下标），也称作栈顶指针</p><h3 id="一-顺序栈的类型描述"><a href="#一-顺序栈的类型描述" class="headerlink" title="(一) 顺序栈的类型描述"></a>(一) 顺序栈的类型描述</h3><p>初始的时候，给top赋值-1，表示栈为空，元素进栈以后，top + 1，元素出栈后，top - 1</p><pre class=" language-c++"><code class="language-c++">//  array-based stack: definition and implementation for some methods #ifndef _SEQSTACK_H_#define _SEQSTACK_H_#include "Stack.h" template <class T>      class seqStack : public Stack<T> {       private:    T * data;    int top;    int maxSize;    void resize();public:    seqStack(int initSize = 100) {        if(initSize<=0) throw badSize();        data = new T[initSize];        maxSize = initSize ;            top = -1;      }           ~seqStack(){ delete [] data;}    bool empty() const{ return top == -1;}          int size() const{ return top + 1; }     void clear() { top = -1; }                 // 清空栈内容     void push(const T &value);       T  pop();       T  getTop() const;            }; #endif</code></pre><h3 id="二-进栈"><a href="#二-进栈" class="headerlink" title="(二) 进栈"></a>(二) 进栈</h3><pre class=" language-c++"><code class="language-c++">template <class T>void seqStack<T>::push(const T &value) {        if (top == maxSize - 1) resize();    data[++top] = value;}   </code></pre><h3 id="三-出栈"><a href="#三-出栈" class="headerlink" title="(三) 出栈"></a>(三) 出栈</h3><pre class=" language-c++"><code class="language-c++">template <class T>T seqStack<T>::pop() {         if(empty())throw outOfRange();    return data[top--];    }   </code></pre><h3 id="四-取栈顶元素"><a href="#四-取栈顶元素" class="headerlink" title="(四) 取栈顶元素"></a>(四) 取栈顶元素</h3><pre class=" language-c++"><code class="language-c++">template <class T>T seqStack<T>::getTop() const{    if(empty())throw outOfRange();    return data[top];}</code></pre><h3 id="五-扩容"><a href="#五-扩容" class="headerlink" title="(五) 扩容"></a>(五) 扩容</h3><pre class=" language-c++"><code class="language-c++">template <class T>void seqStack<T>::resize(){    T * tmp = data;    data = new T[2 * maxSize];    for (int i = 0; i < maxSize; ++i)        data[i] = tmp[i];    maxSize *= 2;    delete[] tmp;} </code></pre><h3 id="六-两栈共享空间"><a href="#六-两栈共享空间" class="headerlink" title="(六) 两栈共享空间"></a>(六) 两栈共享空间</h3><p>栈这种数据结构相比较于线性表，没了有插入和删除的时候需要移动元素的情况，但是仍然有一个比较大的不足，那就是我们必须事先分配空间大小，如果一旦空间满了，再有元素近栈就必须使用编程手段对数组进行扩容，还是比较麻烦的</p><p>而有时候我们往往需要多个栈，我们之前的处理手段就是尽量的根据实际问题设计大小合适的数组，但是这显然是有一定难度的，而且常常是这样的，一个栈已经满了，而另一个栈可能还空着很多空间，如果能将那些空闲的位置利用起来就好了，而我们下面就要来提到一个这样的技巧的思路</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-01-003.png" alt></p><p>我们其实就是将两个栈的栈底全部放到了，数组的两端，然后两个栈处于相向位置，逐渐向中间靠拢，只要两个top指针不相遇，两个栈就可以一直用</p><h2 id="链栈——栈的链式存储结构"><a href="#链栈——栈的链式存储结构" class="headerlink" title="链栈——栈的链式存储结构"></a>链栈——栈的链式存储结构</h2><p>链栈就是使用链式存储结构的栈，和我们在单链表中的链式存储的感觉相似，我们会设置一个指向栈顶的指针top，同时当top == NULL时为空栈</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-01-004.png" alt></p><h3 id="一-链栈的类型定义"><a href="#一-链栈的类型定义" class="headerlink" title="(一) 链栈的类型定义"></a>(一) 链栈的类型定义</h3><pre class=" language-c++"><code class="language-c++">#ifndef _LINKSTACK_H_#define _LINKSTACK_H_#include <iostream> #include "Stack.h" template <class T>class linkStack : public Stack<T> {private:    struct Node {        T data;        Node* next;        Node(){ next = NULL; }        Node(const T &value, Node *p = NULL){ data = value; next = p;}    };    Node* top;public:    linkStack(){ top = NULL; }    ~linkStack(){ clear(); }    void clear();    bool empty()const{ return top == NULL; }    int size()const;    void push(const T &value);    T  pop();    T getTop()const;};#endif</code></pre><h3 id="二-清空栈"><a href="#二-清空栈" class="headerlink" title="(二) 清空栈"></a>(二) 清空栈</h3><pre class=" language-c++"><code class="language-c++">template <class T>void linkStack<T>::clear() {    Node *p;    while (top != NULL) {        p = top;        top = top->next;        delete p;    }}</code></pre><h3 id="（三-求栈中元素个数"><a href="#（三-求栈中元素个数" class="headerlink" title="（三) 求栈中元素个数"></a>（三) 求栈中元素个数</h3><pre class=" language-c++"><code class="language-c++">template <class T>int linkStack<T>::size()const {    Node *p = top;    int count = 0;    while (p){        count++;        p = p->next;    }    return count;}</code></pre><h3 id="四-进栈"><a href="#四-进栈" class="headerlink" title="(四) 进栈"></a>(四) 进栈</h3><pre class=" language-c++"><code class="language-c++">template <class T>void linkStack<T>::push(const T &value) {    Node *p = new Node(value, top);    top = p; }</code></pre><h3 id="五-出栈"><a href="#五-出栈" class="headerlink" title="(五) 出栈"></a>(五) 出栈</h3><pre class=" language-c++"><code class="language-c++">template <class T>T linkStack<T>::pop() {    if (empty())throw outOfRange();    Node *p = top;    T value = p->data;    top = top->next;    delete p;    return value;}</code></pre><h3 id="六-获取栈顶元素"><a href="#六-获取栈顶元素" class="headerlink" title="(六) 获取栈顶元素"></a>(六) 获取栈顶元素</h3><pre class=" language-c++"><code class="language-c++">template <class T>    T linkStack<T>::getTop() const {     if(empty())throw outOfRange();    return top->data;}</code></pre><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创开发技术文章的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode-rectangle.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 9.2-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004-链表补充之循环链表</title>
      <link href="/2019/10/22/9.2-shu-ju-jie-gou/004-lian-biao-bu-chong-zhi-xun-huan-lian-biao/"/>
      <url>/2019/10/22/9.2-shu-ju-jie-gou/004-lian-biao-bu-chong-zhi-xun-huan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-04-000.png" alt></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>学校展开了一场夺宝活动，谁获得胜利，就可以得到麦当劳早餐券3个月，大家纷纷参与了进来，一些卡片从校门分别依次放置在下面的建筑中，最快找到的人就赢了，我现在我的宿舍楼下，但是总有想坑你的哥们，他非和你强调卡片是从校门开始放置的，所以我们应该从起点出发，然后逐个找下去，但是我一想，学校是一个环形的，先找哪个不是找，于是我先从宿舍楼开始，接着从食堂开始顺着环形路找下去，很快我就找全了需要的卡片</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt></p><p>看似一个很普通的环，却解决了一个大问题，那就是从任意一个节点出发，如何访问到链表的全部节点，这也就是我们今天想要讲的循环链表问题</p><h2 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h2><p>单循环链表就是在链表的基础上，通过修改指针域，使得链表的首尾相连，也就是尾节点的指针域指向头结点，形成一个环形的结构</p><p>在之前的单链表中，我们所拥有的是头指针，所以我们分别访问头结点和尾节点的时间复杂度为 O(1) 和 O(n) ，那么能不能将访问尾节点的时间复杂度也变为O(1)呢，那么我们就可以这样做：不设置头指针，设置一个指向为节点的尾指针，这样我们对于头尾节点的查找就很方便了，</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A82.png" alt></p><h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><p>同样的，双向循环链表是在双链表的基础上进行改造的，我们将尾节点的后继next指向头结点，而头结点的前驱指向到尾节点，这样一个双联报表的循环状表示就出来了</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A83.png" alt></p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创开发技术文章的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode-rectangle.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 9.2-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> 循环链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-链表进阶之双链表</title>
      <link href="/2019/10/13/9.2-shu-ju-jie-gou/003-lian-biao-jin-jie-zhi-shuang-lian-biao/"/>
      <url>/2019/10/13/9.2-shu-ju-jie-gou/003-lian-biao-jin-jie-zhi-shuang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-03-001.png" alt></p><h2 id="双链表的意义"><a href="#双链表的意义" class="headerlink" title="双链表的意义"></a>双链表的意义</h2><p>单链表相对于顺序表，确实在某些场景下解决了一些重要的问题，例如在需要插入或者删除大量元素的时候，它并不需要像顺序表一样移动很多元素，只需要修改指针的指向就可以了，<strong>其时间复杂度为 O(1) 但是这可是有前提的，那就是这一切都基于确定节点后</strong>，纯粹考虑删除和插入的情况下，但是如果我们仍未确定节点的位置，那么单链表就会出现一些问题了，例如我们来看一下<strong>删除</strong>这个操作</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表:"></a>单链表:</h4><p>对应图中的节点，想要删除第2个节点 a1 只需要 将首元结点的指针指向到第三个节点的地址去</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-03-002.png" alt></p><p>但是问题就在于我们如何得到待删除节点的前驱，也就是我们图中的首元结点，我们给出两种方法</p><ul><li>A：定位待删除节点的同时，一直顺便保存当前节点的前驱</li><li>B：删除节点后，重新回到单链表表头，定位到其指定前驱</li></ul><p>但是无论我们选择哪一种方法，指针的总移动数都会是 2n 次，而双链表却在这一类型问题上做出了很好的处理</p><h4 id="双链表-1"><a href="#双链表-1" class="headerlink" title="双链表:"></a>双链表:</h4><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-03-003.png" alt></p><p>单链表中之所以出现问题，就是因为各个节点只有一个指向后继的指针域 next，只能向后移动查找，一旦我们想要查询前一节点，就变得很麻烦，所以双链表就在每个节点前面增加一个指向前驱的指针域 prior，这样我们就可以直接定位到我们的前一个节点了，这也就是双链表</p><p>注意：为了统一运算，避免特殊情况的出现，我们也常常在尾部设置一个 “尾部头结点” 其 next 指针域为空</p><h2 id="线性表的抽象数据类型定义"><a href="#线性表的抽象数据类型定义" class="headerlink" title="线性表的抽象数据类型定义"></a>线性表的抽象数据类型定义</h2><p>我们在给出双链表的定义之前我们还是需要先引入我们线性表的抽象数据类型定义</p><pre class=" language-c++"><code class="language-c++">#ifndef _LIST_H_#define _LIST_H_#include<iostream>using namespace std;class outOfRange{};class badSize{};template<class T>class List {public:    // 清空线性表    virtual void clear()=0;    // 判空，表空返回true，非空返回false    virtual bool empty()const=0;    // 求线性表的长度    virtual int size()const=0;    // 在线性表中，位序为i[0..n]的位置插入元素value    virtual void insert(int i,const T &value)=0;    // 在线性表中，位序为i[0..n-1]的位置删除元素    virtual void remove(int i)=0;    // 在线性表中，查找值为value的元素第一次出现的位序    virtual int search(const T&value)const=0;    // 在线性表中，查找位序为i的元素并返回其值    virtual T visit(int i)const=0;    // 遍历线性表    virtual void traverse()const=0;    // 逆置线性表    virtual void inverse()=0;                        virtual ~List(){};};/*自定义异常处理类*/ class outOfRange :public exception {  //用于检查范围的有效性public:    const char* what() const throw() {        return "ERROR! OUT OF RANGE.\n";    }};class badSize :public exception {   //用于检查长度的有效性public:    const char* what() const throw() {        return "ERROR! BAD SIZE.\n";    }};#endif</code></pre><h2 id="双链表类型的定义"><a href="#双链表类型的定义" class="headerlink" title="双链表类型的定义"></a>双链表类型的定义</h2><pre class=" language-c++"><code class="language-c++">#ifndef _SEQLIST_H_#define _SEQLIST_H_#include "List.h"#include<iostream>using namespace std;template<class elemType>//elemType为双链表存储元素类型 class doubleLinkList:public List<elemType> {private:    //节点类型定义     struct Node {        //节点的数据域         elemType data;        //节点的两个指针域         Node *prior, *next;        //两个构造函数         Node(const elemType &value, Node *p = NULL, Node *n = NULL) {            data = value;            prior = p;            next = n;        }        Node():next(NULL), prior(NULL) {}        ~Node(){}     };    //单链表的头指针     Node *head;    //单链表的尾指针     Node *tail;    //单链表的当前长度     int curLength;    //返回指向位序为i的节点的指针     Node *getPosition(int i)const; public:    doubleLinkList();    ~doubleLinkList();    //清空单链表，使其成为空表     void clear();    //带头结点的单链表，判空     bool empty()const {return head -> next == NULL;}     //返回单链表的当前实际长度    int size()const {return curLength;}    //在位序i处插入值为value的节点表长增1     void insert(int i, const elemType &value);     //删除位序为i的节点的值，表长减1     void remove(int i);    //查找值为value的节点的第一次出现的位置     int search(const elemType &value)const;    //查找值为value的节点的前驱的位序    int prior(const elemType&value)const;    //访问位序为i的节点的值，0定位到首元结点    elemType visit(int i)const;    //遍历单链表    void traverse()const;    //逆置单链表     void inverse();    //合并单链表 };</code></pre><h2 id="双链表基本运算的实现"><a href="#双链表基本运算的实现" class="headerlink" title="双链表基本运算的实现"></a>双链表基本运算的实现</h2><h3 id="一-构造与析构函数"><a href="#一-构造与析构函数" class="headerlink" title="(一) 构造与析构函数"></a>(一) 构造与析构函数</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>doubleLinkList<elemType>::doubleLinkList() {    //头尾节点分别指向 头结点和尾部头结点     head = new Node;    tail = new Node;    head -> next = tail;    tail -> prior = head;} template <class elemType>doubleLinkList<elemType>::~doubleLinkList() {    Node *p = head -> next, *tmp;    //头结点的后继是尾部头结点     head -> next = tail;    //尾部头结点的前驱是头结点     tail -> prior = tail;    while(p != tail) {        tmp = p -> next;        delete p;        p = tmp;    }     curLength = 0;    }</code></pre><h3 id="二-查找位序为i的节点的地址"><a href="#二-查找位序为i的节点的地址" class="headerlink" title="(二) 查找位序为i的节点的地址"></a>(二) 查找位序为i的节点的地址</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>typename doubleLinkList<elemType>::Node *doubleLinkList<elemType>::getPosition(int i) const {    Node *p = head;    int count = 0;    if(i < -1 || i > curLength)         return NULL;    while(count <= -1) {        p = p -> next;        count++;    }    return p;}</code></pre><h3 id="三-查找值为value的节点的位序"><a href="#三-查找值为value的节点的位序" class="headerlink" title="(三) 查找值为value的节点的位序"></a>(三) 查找值为value的节点的位序</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>int doubleLinkList<elemType>::search(const elemType &value) const {    Node *p = head -> next;    int i = 0;    while(p != tail && p -> data != value) {        p = p -> next;        i++;    }    if(p == tail)        return -1;    else         return i;} </code></pre><h3 id="四-插入元素"><a href="#四-插入元素" class="headerlink" title="(四) 插入元素"></a>(四) 插入元素</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>void doubleLinkList<elemType>::insert(int i, const elemType &value) {    Node *p, * tmp;    if(i < 0 || i > curLength)        throw outOfRange();    p = getPosition(i);    tmp = new Node(value, p -> prior, p);    //p原先的前驱的后继指向tmp     p -> prior -> next = tmp;    //修改p的前驱为tmp    p -> prior = tmp;    ++curLength;} </code></pre><h3 id="五-删除位序为i的节点"><a href="#五-删除位序为i的节点" class="headerlink" title="(五) 删除位序为i的节点"></a>(五) 删除位序为i的节点</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>void doubleLinkList<elemType>::remove(int i) {    Node *p;    if(i < 0 || i > curLength)        throw outOfRange();    p = getPosition(i);    p -> prior -> next = p -> next;    p -> next -> prior = p -> prior;    delete p;    --curLength;} </code></pre><h3 id="六-访问位序为-i的节点的值"><a href="#六-访问位序为-i的节点的值" class="headerlink" title="(六) 访问位序为 i的节点的值"></a>(六) 访问位序为 i的节点的值</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>elemType doubleLinkList<elemType>::visit(int i) const {    //visit 不嫩直接用getPosition判断范围是否合法，因为其范围为[-1,curLength]    if(i < 0 || i > curLength -1)        throw outOfRange();    //合法以后     Node *p = getPosition(i);    return p -> data; }</code></pre><h3 id="七-遍历双链表"><a href="#七-遍历双链表" class="headerlink" title="(七) 遍历双链表"></a>(七) 遍历双链表</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>void doubleLinkList<elemType>::traverse() const {    Node *p = head -> next;    cout << "traverse: ";    while(p != tail) {        cout << p -> data << " ";        p = p -> next;    }    cout << endl;}   </code></pre><h3 id="八-遍历双链表"><a href="#八-遍历双链表" class="headerlink" title="(八) 遍历双链表"></a>(八) 遍历双链表</h3><pre class=" language-c++"><code class="language-c++">template <class elemType>void doubleLinkList<elemType>::inverse() {    Node *tmp, *p = head -> next;    //构成双空链表     head -> next = tail;    tail -> prior = head;    while(p != tail) {        tmp = p -> next;        p -> next = head -> next;        p -> prior = head;        head -> next -> prior = p;        head -> next = p;        p = tmp;    } } </code></pre><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创开发技术文章的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode-rectangle.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 9.2-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> 双链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Redis从认识安装到实现CURD</title>
      <link href="/2019/10/04/10.1-redis/001-redis-cong-ren-shi-an-zhuang-dao-shi-xian-curd/"/>
      <url>/2019/10/04/10.1-redis/001-redis-cong-ren-shi-an-zhuang-dao-shi-xian-curd/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis从一无所知，到知道一点点"><a href="#Redis从一无所知，到知道一点点" class="headerlink" title="Redis从一无所知，到知道一点点"></a>Redis从一无所知，到知道一点点</h1><p><img src="http://image.ideal-20.cn/Cover/redis.png" alt></p><blockquote><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库    ——维基百科</p></blockquote><p>可以简单的说，<strong>Redis就是一款高性能的NoSQL数据库</strong></p><h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL?"></a>什么是NoSQL?</h2><p>我们前面所学习的<strong>MySQL数据库</strong>是典型的的<strong>SQL数据库</strong>也就是传统的关系型数据库，而我们今天学习的<strong>Redis数据库</strong>则是一款NoSQL数据库，也叫作非关系型数据库，它与我们熟悉的MySQL等的概念完全是不一样的，它是一项全新的数据库理念，我们帖一组百度百科的解释</p><blockquote><p>NoSQL，泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题    ——百度百科</p></blockquote><p>说明：我们现在所看到的的博客，RSS，P2P，微博，抖音等均属于 Web2.0的产物，Web2.0相比较过去的Web1.0更加注重于用户的交互，用户不仅可以浏览，还可以上传一些资源到网站上，例如图片文字或者说短视频等，使得用户也参与到了网站内容的制造中去了</p><h2 id="为什么使用NoSQL？"><a href="#为什么使用NoSQL？" class="headerlink" title="为什么使用NoSQL？"></a>为什么使用NoSQL？</h2><ol><li>部署成本低：部署操作简单，以开源软件为主</li><li>存储格式丰富：支持 key-value形式、文档、图片等众多形式，包括对象或者集合等格式</li><li>速度快：数据存储在缓存中，而不是硬盘中，而且例如Redis基于键值对，同时不需要经过SQL层解析，性能非常高</li><li>无耦合性，易扩展<ul><li>在SQL中，一个正在使用的数据是不允许删除的，但NoSQL却可以操作</li></ul></li></ol><h2 id="NoSQL可以替代SQL吗？"><a href="#NoSQL可以替代SQL吗？" class="headerlink" title="NoSQL可以替代SQL吗？"></a>NoSQL可以替代SQL吗？</h2><p>有人会说，NoSQL = Not SQL ，但是我更倾向这样理解 NoSQL = Not only SQL ，我们不能以一个绝对的结论来判定两项技术的好坏，每一项技术的产生都有其特定的原因，在我看来，<strong>NoSQL更适合作为SQL数据库的补充</strong>，由于海量数据的出现，性能的要求高了起来，而NoSQL这种产物，对于<strong>结构简单</strong>但是<strong>数据量大</strong>的数据处理起来要比传统的SQL快很多，但是同样的，其<strong>逻辑运算就必须很简单</strong>，否则它也是力不从心的</p><p>在我看来，可以简单的说，NoSQL就是以功能换取性能，但是需要<strong>处理复杂的业务逻辑</strong>还需要使用<strong>关系型数据库</strong>，所以说想要在模型中完全用NoSQL替代SQL是不现实的，两者更像是互补的关系</p><p><strong>SQL的好处：</strong></p><ol><li>支持在一个表以及多表之前进行复杂的查询操作</li><li>支持对事物的处理，能保证数据的安全要求</li><li>学习成本低，资料较多</li></ol><p>市面上的NoSQL产品非常多，我们今天所要介绍的就是其中一款基于键值存储的数据库——Redis</p><h2 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h2><p>我们在一开始提到了，<strong>Redis就是一款高性能的NoSQL数据库</strong>，那么它的应用场景是什么呢？</p><ul><li><p>用于用户内容缓存，可以处理大量数据的高访问负载，例如：数据查询，新闻，商品内容</p></li><li><p>任务队列，例如：秒杀，12306</p></li><li><p>在线好友列表</p></li><li><p>应用、网站访问统计排行</p></li></ul><p><strong>由于其基于键值存储，那么可以支持的存储的类型有什么呢？</strong></p><ul><li><p>字符串类型 - String</p></li><li><p>列表 - list：linkedlist</p></li><li><p>集合 - set</p></li><li><p>有序集合 - sortedset</p></li><li><p>哈希 - hash：map</p></li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></p><p>由于官网访问速度过慢，我们可以访问对应的中文网：<a href="http://www.redis.net.cn" target="_blank" rel="noopener">http://www.redis.net.cn</a></p><p>下载，解压，编译：</p><pre><code>$ wget http://download.redis.io/releases/redis-5.0.4.tar.gz$ tar xzf redis-5.0.4.tar.gz$ cd redis-5.0.4$ make</code></pre><p>二进制文件是编译完成后在src目录下. 运行如下:</p><pre><code>$ src/redis-server</code></pre><p>你能使用Redis的内置客户端进行进行redis代码的编写，例如我们存入一个键值 name-zhangsan</p><pre><code>$ src/redis-cliredis&gt; set name zhangsanOKredis&gt; get name&quot;zhangsan&quot;</code></pre><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>我们可以去github中寻找windows版本,不过版本会有所滞后</p><p><a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a></p><p>解压即可用</p><ul><li><p>redis-server.exe：redis服务器端</p></li><li><p>redis-cli.exe：redis的客户端</p></li><li><p>redis.windows.conf：配置文件</p></li></ul><h2 id="常见支持类型—存取删除命令操作"><a href="#常见支持类型—存取删除命令操作" class="headerlink" title="常见支持类型—存取删除命令操作"></a>常见支持类型—存取删除命令操作</h2><h4 id="一-字符串类型-String"><a href="#一-字符串类型-String" class="headerlink" title="(一) 字符串类型 - String"></a>(一) 字符串类型 - String</h4><h5 id="1-存储"><a href="#1-存储" class="headerlink" title="(1) 存储"></a>(1) 存储</h5><ul><li>set key value</li></ul><pre><code>- 127.0.0.1:6379&gt; set address beijing- OK</code></pre><h5 id="2-获取"><a href="#2-获取" class="headerlink" title="(2) 获取"></a>(2) 获取</h5><ul><li>get key</li></ul><pre><code>- 127.0.0.1:6379&gt; get address- “beijing”</code></pre><h5 id="2-删除"><a href="#2-删除" class="headerlink" title="(2) 删除"></a>(2) 删除</h5><ul><li>del key</li></ul><pre><code>- 127.0.0.1:6379&gt; del address- (integer) 1</code></pre><h4 id="二-列表类型-list"><a href="#二-列表类型-list" class="headerlink" title="(二) 列表类型 - list"></a>(二) 列表类型 - list</h4><p><strong>添加一个元素到列表的头部（左边）或者尾部（右边）</strong></p><h5 id="1-添加"><a href="#1-添加" class="headerlink" title="(1) 添加"></a>(1) 添加</h5><ul><li>lpush key value：将元素添加到列表左边</li><li>Rpush key value：将元素添加到列表右边</li></ul><pre><code>127.0.0.1:6379&gt; lpush listDemo zhangsan(integer) 1127.0.0.1:6379&gt; lpush listDemo lisi(integer) 2127.0.0.1:6379&gt; rpush listDemo wangwu(integer) 3</code></pre><h5 id="2-获取：lrange-key-start-end"><a href="#2-获取：lrange-key-start-end" class="headerlink" title="(2) 获取：lrange key start end"></a>(2) 获取：lrange key start end</h5><ul><li>127.0.0.1:6379&gt; lrange listDemo 0 -1</li></ul><pre><code>1) &quot;lisi&quot;2) &quot;zhangsan&quot;3) &quot;wangwu&quot;</code></pre><h5 id="2-删除-1"><a href="#2-删除-1" class="headerlink" title="(2) 删除"></a>(2) 删除</h5><ul><li>lpop key：删除列表最左边的元素，且返回元素</li><li>rpop key：删除列表最右边的元素，且返回元素</li></ul><h4 id="三-集合类型-set"><a href="#三-集合类型-set" class="headerlink" title="(三) 集合类型 - set"></a>(三) 集合类型 - set</h4><p>set：String 类型的无序集合，且元素不能重复</p><h5 id="1-存储-1"><a href="#1-存储-1" class="headerlink" title="(1) 存储"></a>(1) 存储</h5><ul><li>sadd key value</li></ul><pre><code>127.0.0.1:6379&gt; sadd setDemo aaa(integer) 1127.0.0.1:6379&gt; sadd setDemo aaa(integer) 0</code></pre><h5 id="2-获取-1"><a href="#2-获取-1" class="headerlink" title="(2) 获取"></a>(2) 获取</h5><ul><li>smembers key：获取set集合中的所有元素</li></ul><pre><code>127.0.0.1:6379&gt; smembers setDemo1) &quot;aaa“</code></pre><h5 id="2-删除-2"><a href="#2-删除-2" class="headerlink" title="(2) 删除"></a>(2) 删除</h5><ul><li>srem key value：删除set集合中某元素</li></ul><pre><code>127.0.0.1:6379&gt; srem setDemo aaa(integer) 1</code></pre><h4 id="四-有序集合类型-sortedset"><a href="#四-有序集合类型-sortedset" class="headerlink" title="(四) 有序集合类型 - sortedset"></a>(四) 有序集合类型 - sortedset</h4><p>sortedset 和 set 一样也是 string 类型元素的集合，且不允许重复的元素</p><p>不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序</p><p>有序集合的成员是唯一，但分数(score)却可以重复</p><h5 id="1-存储-2"><a href="#1-存储-2" class="headerlink" title="(1) 存储"></a>(1) 存储</h5><ul><li>zadd key score value</li></ul><pre><code>127.0.0.1:6379&gt; zadd sortedsetDemo 20 zhangsan(integer) 1127.0.0.1:6379&gt; zadd sortedsetDemo 10 lisi(integer) 1127.0.0.1:6379&gt; zadd sortedsetDemo 60 wangwu(integer) 1</code></pre><h5 id="2-获取-2"><a href="#2-获取-2" class="headerlink" title="(2) 获取"></a>(2) 获取</h5><ul><li>zrange key start end [withscores]</li></ul><pre><code>127.0.0.1:6379&gt; zrange sortedsetDemo 0 -11) &quot;lisi&quot;2) &quot;zhangsan&quot;3) &quot;wangwu&quot;</code></pre><h5 id="2-删除-3"><a href="#2-删除-3" class="headerlink" title="(2) 删除"></a>(2) 删除</h5><ul><li>zrem key value</li></ul><pre><code>127.0.0.1:6379&gt; zrem sortedsetDemo wangwu(integer) 1</code></pre><h4 id="五-哈希类型-hash"><a href="#五-哈希类型-hash" class="headerlink" title="(五) 哈希类型 - hash"></a>(五) 哈希类型 - hash</h4><h5 id="1-存储-3"><a href="#1-存储-3" class="headerlink" title="(1) 存储"></a>(1) 存储</h5><ul><li>hset key field value</li></ul><pre><code>127.0.0.1:6379&gt; hset hashDemo username admin(integer) 1127.0.0.1:6379&gt;  hset hashDemo password admin(integer) 1</code></pre><h5 id="2-获取-3"><a href="#2-获取-3" class="headerlink" title="(2) 获取"></a>(2) 获取</h5><ul><li>hget key field：获取指定的field对应的值</li></ul><pre><code>127.0.0.1:6379&gt; hget hashDemo password&quot;admin&quot;</code></pre><ul><li>hgetall key：获取所有的field和value</li></ul><pre><code>127.0.0.1:6379&gt; hgetall hashDemo1) &quot;username&quot;2) &quot;admin&quot;3) &quot;password&quot;4) &quot;admin&quot;</code></pre><h5 id="2-删除-4"><a href="#2-删除-4" class="headerlink" title="(2) 删除"></a>(2) 删除</h5><ul><li>hdel key field</li></ul><pre><code>127.0.0.1:6379&gt; hdel hashDemo username(integer) 1</code></pre><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>开篇已经讲过，Redis是一个内存数据库，也就是说，我们的数据全部存储在内存中，而我们常见的MySQL和Oracle等SQL数据库会将数据存储到硬盘中，凡事都是有利有弊，虽然内存数据库读写速度要比在硬盘中读写的数据库快的多，但是却出现了一个很麻烦的问题，也就是说，当 Redis 服务器重启或者宕机后，内存中的数据会全部丢失，为了解决这个问题，Redis提供了一种持久化的技术，也就是将内存中的数据存储到硬盘中去，日后方便我们使用这些文件恢复数据库中的数据</p><h3 id="RDB-方式-默认方式"><a href="#RDB-方式-默认方式" class="headerlink" title="RDB 方式 (默认方式)"></a>RDB 方式 (默认方式)</h3><p>RDB：一定的时间内，检测key的变化情况，然后持久化数据</p><p>我们想要配置它，需要编辑 redis.windows.conf 配置文件</p><pre><code># Save the DB on disk:##   save &lt;seconds&gt; &lt;changes&gt;##   Will save the DB if both the given number of seconds and the given#   number of write operations against the DB occurred.##   In the example below the behaviour will be to save:#   after 900 sec (15 min) if at least 1 key changed#   after 300 sec (5 min) if at least 10 keys changed#   after 60 sec if at least 10000 keys changed#    ......省略部分save 900 1save 300 10save 60 10000</code></pre><p>我们需要修改的就是最后三行，前面的说明的意思是，如果给定的秒数和给定的对数据库的写操作数同时发生，那么将保存数据库，也就是说，它的配置是根据save后面的两个数字，根据说明可知，第一个数字代表间隔时间，第二个数代表操作数据的数量</p><p>例如第一个 save 900 1 ，就是说每900秒且，至少一个 key 被改变则保存数据</p><p>我们根据自己具体项目的需要设置好后，需要重新启动Redis的服务器，并且我们需要指定配置文件，我们先指向到Redis指定目录下， 然后输入命令 <code>redis-server.exe redis.windows.conf</code>    </p><p>例如我本地：<code>D:\Tools\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf</code></p><h3 id="AOF-方式"><a href="#AOF-方式" class="headerlink" title="AOF 方式"></a>AOF 方式</h3><p>AOF：每一次操作后，就持久化数据</p><p>我们同样可以在 redis.windows.conf 文件配置</p><p>我们找到这一行 </p><p><code>appendonly no</code> no代表关闭aof，改为yes代表开启</p><p>还有这一行</p><p><code># appendfsync no</code>：不进行持久化</p><p>我们可以修改 no 位置的值</p><ul><li>appendfsync always：每一次操作都进行持久化</li><li>appendfsync everysec：每隔一秒进行一次持久化</li></ul><h2 id="Jedis-Java中操作Redis数据库"><a href="#Jedis-Java中操作Redis数据库" class="headerlink" title="Jedis - Java中操作Redis数据库"></a>Jedis - Java中操作Redis数据库</h2><blockquote><p>Jedis is a blazingly small and sane Redis java client.</p><p>Jedis was conceived to be EASY to use.</p></blockquote><p>Jedis 是一款可以让我们在java中操作redis数据库的工具，下载其jar包导入即可，使用还是非常简单的</p><h4 id="一-字符串类型-String-1"><a href="#一-字符串类型-String-1" class="headerlink" title="(一) 字符串类型 - String"></a>(一) 字符串类型 - String</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接,空构造代表默认值 "localhost",6379端口</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span><span class="token string">"beijing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>String address <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>补充：setex() 方法可以存储数据，并且指定过期时间</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将aaa-bbb存入，且10秒后过期</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span></code></pre><h4 id="二-列表类型-list-1"><a href="#二-列表类型-list-1" class="headerlink" title="(二) 列表类型 - list"></a>(二) 列表类型 - list</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接,空构造代表默认值 "localhost",6379端口</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"listDemo"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从左</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"listDemo"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右</span><span class="token comment" spellcheck="true">//获取</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> mylist <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"listDemo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除，并且返回元素</span>String e1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"listDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从左</span>String e2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"listDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从右</span><span class="token comment" spellcheck="true">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="三-集合类型-set-1"><a href="#三-集合类型-set-1" class="headerlink" title="(三) 集合类型 - set"></a>(三) 集合类型 - set</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接,空构造代表默认值 "localhost",6379端口</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"setDemo"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> setDemo <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"setDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="四-有序集合类型-sortedset-1"><a href="#四-有序集合类型-sortedset-1" class="headerlink" title="(四) 有序集合类型 - sortedset"></a>(四) 有序集合类型 - sortedset</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接,空构造代表默认值 "localhost",6379端口</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"sortedsetDemo"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"sortedsetDemo"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"sortedsetDemo"</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedsetDemo <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">"sortedsetDemo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="五-哈希类型-hash-1"><a href="#五-哈希类型-hash-1" class="headerlink" title="(五) 哈希类型 - hash"></a>(五) 哈希类型 - hash</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接,空构造代表默认值 "localhost",6379端口</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hashDemo"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hashDemor"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"hashDemo"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有数据</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> user <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hashDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取value</span>    String value <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Jedis-连接池"><a href="#Jedis-连接池" class="headerlink" title="Jedis 连接池"></a>Jedis 连接池</h2><p>为什么我们要使用连接池呢？</p><p>我们要使用Jedis，必须建立连接，我们每一次进行数据交互的时候，都需要建立连接，Jedis虽然具有较高的性能，但建立连接却需要花费较多的时间，如果使用连接池则可以同时在客户端建立多个连接并且不释放，连接的时候只需要通过一定的方式获取已经建立的连接，用完则归还到连接池，这样时间就大大的节省了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个配置对象</span>JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建Jedis连接池对象</span>JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取连接</span>Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"setDemo"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭 归还到连接池中</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool jedisPool<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态代码初始化池配置</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Properties对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取配置文件</span>        InputStream is <span class="token operator">=</span> JedisPoolUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jedis.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关联文件</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取数据，配置到JedisPoolConfig</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化JedisPool</span>        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**        * 获取连接        */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创开发技术文章的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode-rectangle.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 10.1-Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-如何使用C++实现单链表</title>
      <link href="/2019/10/01/9.2-shu-ju-jie-gou/002-lian-biao-yuan-lai-ye-zhe-me-jian-dan/"/>
      <url>/2019/10/01/9.2-shu-ju-jie-gou/002-lian-biao-yuan-lai-ye-zhe-me-jian-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表——链表"><a href="#线性表——链表" class="headerlink" title="线性表——链表"></a>线性表——链表</h1><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-logo.png" alt></p><h2 id="为什么假期也在发文章"><a href="#为什么假期也在发文章" class="headerlink" title="为什么假期也在发文章"></a>为什么假期也在发文章</h2><p><strong>//TODO NullGirlfrindException</strong></p><p>请忽略以上两行无聊的事实……</p><h2 id="如何弥补顺序表的不足之处？"><a href="#如何弥补顺序表的不足之处？" class="headerlink" title="如何弥补顺序表的不足之处？"></a>如何弥补顺序表的不足之处？</h2><p>第一次学习线性表一定会马上接触到一种叫做顺序表（顺序存储结构），经过上一篇的分析顺序表的优缺点是很显然的，它虽然能够很快的访问读取元素，但是在解决如插入和删除等操作的时候，却需要移动大量的元素，效率较低，那么是否有一种方法可以改善或者解决这个问题呢？</p><p><strong>首先我们需要考虑，为什么顺序表中的插入删除操作会涉及到元素的移动呢？</strong></p><p>好家伙，问题就是围绕着顺序表的最大的特点出现的——顺序存储，相邻放置元素，也就是说每个元素都是根据编号一个一个挨着的，这就导致了 插入或删除后，为了仍然呈顺序线性存储，被操作元素后面的元素的位置均需要发生一定的变化，你应该能想象得到，在拥挤的队伍中突然从中插入一个学生的场景，后面浩浩荡荡的人群，口吐芬芳的向后挪了一个空位，如果人群过大，重新排好队也需要一定的时间</p><p>好嘛，人与人之间别这么挤在一起，每个人与人之间都流出一点空隙来，留一定的位置出来，好了，这好像是个办法，但是负责一个一个与学生交流填表的老师可就不干了，这意味着我（找人）遍历的时候，需要多跑好多路，浪费好多时间，先不说这个，体院馆又不行了，你们这么个摆法，我这小馆可放不下，这也就意味着空间复杂度增加了很多</p><p>我们刚才所围绕的都是在 “排队” 的基本前提下的，但我们能想到的方法并不是很理想，那么我们索性就不排队了，是不是能有更好的解决方式呢？</p><p><strong>一个有效的方法：</strong></p><p>让同学们（元素）自己找位置随便站，不过你要知道相对于自己下一位同学的位置，这样既解决了空间上的问题，又能通过这种两两联系的方式访问（遍历）到整个队伍（数组），最重要的是，插入和离开同学，由于同学（元素）之间不存在了那种排队，相邻的特点，所以也不会说影响到过多的同学（元素）只需要和你插入位置的前后两位同学沟通好就行了，反正别人也不知道你们之间发生了什么事</p><p>好了思路是有了，我们来看一种最常见的链表——单链表</p><h2 id="单链表的基本结构"><a href="#单链表的基本结构" class="headerlink" title="单链表的基本结构"></a>单链表的基本结构</h2><p>这种链表为什么被称作单链表呢？这是因为它只含有一个地址域，这是什么意思呢？</p><p>我们在链表中摈弃了顺序表中那种一板一眼的排队方式，但是我们必须让两个应该相邻的元素之间有一定的相互关系，所以我们选择让每一个元素可以联系对应的下一个元素</p><p>而这个时候我们就需要给每个元素安排一个额外的位置，来存储它的<strong>后继元素的存储地址</strong>，这个存储元素信息的域叫做<strong>指针域或地址域</strong>，指针域中储存的信息也叫作<strong>指针或者链</strong>，</p><p>我们用一张图 看一下他的结构</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-014.png" alt></p><p> <strong>结构中名词解释</strong></p><ul><li><p><strong>头指针</strong>：一个指向第一个节点地址的指针变量</p><ul><li>头指针具有<strong>标识单链表</strong>的作用，所以经常用头指针<strong>代表单链表的名字</strong></li></ul></li><li><p><strong>头结点</strong>：在单链表的第一个结点之前附设一个结点，它没有直接前驱，称之为头结点</p><ul><li>可不存信息，也可以作为监视哨，或用于存放线性表的长度等附加信息</li><li>指针域中存放首元结点的地址</li></ul></li><li><p><strong>首元结点</strong>：存储第一个元素的节点</p></li></ul><h2 id="为什么要附设一个头结点"><a href="#为什么要附设一个头结点" class="headerlink" title="为什么要附设一个头结点"></a>为什么要附设一个头结点</h2><p>我们来解释一下：</p><ul><li><p>链表如果为空的情况下，如果单链表没有头结点，那么头指针就会指向NULL，如果加上头结点，无论单链表是否为空，头指针都会指向头结点，这样使得空链表与非空链表处理一致</p></li><li><p>使首元结点前插入或删除元素的时候，与后面操作相同，不需要产生额外的判断分支，使得算法更加简单</p></li></ul><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-015.png" alt></p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-016.png" alt></p><p>（以插入为例讲解）在带头结点的情况下，在首元结点前插入或者删除元素仍与在其他位置的操作相同，只需要将前一个元素（在这里是头结点）的指针域指向插入元素，同时将插入元素的指针域指向原来的第二的元素      </p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-017.png" alt></p><p>而无头结点的情况由于，首元结点前没有元素，只能通过修改head的前后关系，所以导致了 与在别的位置插入或删除元素的操作不同，在实现这两个功能的时候就需要额外的写一个判断语句来判断插入的位置是不是首元结点之前的位置，增加了分支，代码不够简洁</p><p><strong>总结：头结点的存在使得空链表与非空链表处理一致，也方便对链表首元结点前结点的插入或删除操作</strong></p><h2 id="单链表的类型定义"><a href="#单链表的类型定义" class="headerlink" title="单链表的类型定义"></a>单链表的类型定义</h2><p>###线性表的抽象数据类型定义</p><p>我们在给出单链表的定义之前我们还是需要先引入我们线性表的抽象数据类型定义</p><pre class=" language-c++"><code class="language-c++">#ifndef _LIST_H_#define _LIST_H_#include<iostream>using namespace std;class outOfRange{};class badSize{};template<class T>class List {public:    // 清空线性表    virtual void clear()=0;    // 判空，表空返回true，非空返回false    virtual bool empty()const=0;    // 求线性表的长度    virtual int size()const=0;    // 在线性表中，位序为i[0..n]的位置插入元素value    virtual void insert(int i,const T &value)=0;    // 在线性表中，位序为i[0..n-1]的位置删除元素    virtual void remove(int i)=0;    // 在线性表中，查找值为value的元素第一次出现的位序    virtual int search(const T&value)const=0;    // 在线性表中，查找位序为i的元素并返回其值    virtual T visit(int i)const=0;    // 遍历线性表    virtual void traverse()const=0;    // 逆置线性表    virtual void inverse()=0;                        virtual ~List(){};};/*自定义异常处理类*/ class outOfRange :public exception {  //用于检查范围的有效性public:    const char* what() const throw() {        return "ERROR! OUT OF RANGE.\n";    }};class badSize :public exception {   //用于检查长度的有效性public:    const char* what() const throw() {        return "ERROR! BAD SIZE.\n";    }};#endif</code></pre><h3 id="单链表的类型定义-1"><a href="#单链表的类型定义-1" class="headerlink" title="单链表的类型定义"></a>单链表的类型定义</h3><pre class=" language-c++"><code class="language-c++">#ifndef _SEQLIST_H_#define _SEQLIST_H_#include "List.h"#include<iostream>using namespace std;template<class elemType>//elemType为单链表存储元素类型 class linkList:public List<elemType> {private:    //节点类型定义     struct Node {        //节点的数据域         elemType data;        //节点的指针域         Node *next;        //两个构造函数         Node(const elemType value, Node *p = NULL) {            data = value;            next = p;        }         Node(Node *p = NULL) {            next = p;        }     };    //单链表的头指针     Node *head;    //单链表的尾指针     Node *tail;    //单链表的当前长度     int curLength;    //返回指向位序为i的节点的指针     Node *getPostion(int i)const; public:    linkList();    ~linkList();    //清空单链表，使其成为空表     void clear();    //带头结点的单链表，判空     bool empty()const {return head -> next == NULL;}     //返回单链表的当前实际长度    int size()const {return curLength;}    //在位序i处插入值为value的节点表长增1     void insert(int i, const elemType &value);     //删除位序为i处的节点，表长减1    int search(const elemType&value)const;    //查找值为value的节点的前驱的位序    int prior(const elemType&value)const;    //访问位序为i的节点的值，0定位到首元结点    elemType visit(int i)const;    //遍历单链表    void traverse()const;    //头插法创建单链表    void headCreate();    //尾插法创建单链表    void tailCreate();    //逆置单链表     void inverse();};</code></pre><h2 id="单链表上的基本运算实现"><a href="#单链表上的基本运算实现" class="headerlink" title="单链表上的基本运算实现"></a>单链表上的基本运算实现</h2><h3 id="一-单链表的初始化-构造函数"><a href="#一-单链表的初始化-构造函数" class="headerlink" title="(一) 单链表的初始化-构造函数"></a>(一) 单链表的初始化-构造函数</h3><p>单链表的初始化就是创建一个<strong>带头节点</strong>的<strong>空链表</strong>，我们不需要设置其指针域，为空即可</p><pre class=" language-c++"><code class="language-c++">template<class elemType>linkList<elemType>::linkList() {    head = tail = new Node();    curLength=0;}</code></pre><blockquote><p>注意：new 操作符代表申请堆内存空间，上述代码中应该判断是否申请成功，为简单，默认为申请成功，实际上如果系统没有足够的内存可供使用，那么在申请内存的时候会报出一个 bad_alloc exception 异常</p></blockquote><h3 id="二-析构函数"><a href="#二-析构函数" class="headerlink" title="(二) 析构函数"></a>(二) 析构函数</h3><p>当单链表对象脱离其作用域时，系统自动执行析构函数来释放单链表空间，其实也就是清空单链表内容，同时释放头结点</p><pre class=" language-c++"><code class="language-c++">template<class elemType>linkList<elemType>::~linkList() {    clear();    delete head;}</code></pre><h3 id="三-清空单链表"><a href="#三-清空单链表" class="headerlink" title="(三) 清空单链表"></a>(三) 清空单链表</h3><p>清空单链表的主要思想就是从头结点开始逐步将后面节点释放掉，但是我们又不想轻易的修改头指针head的指向，所以我们引入一个工作指针，从头结点一直移动到表尾，逐步释放节点</p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::clear() {    Node *p, *tmp;    p - head -> next;    while(p != NULL) {        tmp = p;        p = p -> next();        delete tmp;     }    head -> next = NULL;    tail = head;    curLength = 0;    }</code></pre><h3 id="四-求表长"><a href="#四-求表长" class="headerlink" title="(四) 求表长"></a>(四) 求表长</h3><p>由于我们的代码中已经定义过一个叫做 curLength 的变量用来记录我们的表长</p><p>所以我们可以直接返回，我们在定义中已经实现了，也就是这句</p><pre class=" language-c++"><code class="language-c++">//返回单链表的当前实际长度int size()const {return curLength;}</code></pre><p>但是如果我们没有这样一个变量，我们想要实现这样的功能又是什么样的方法呢？</p><pre class=" language-c++"><code class="language-c++">template<class elemType>int linkList<elemType>::size()const {    Node *p = head -> next;    int count;    while(p) {count++; p = p -> next;}    return count;}</code></pre><h3 id="五-遍历单链表"><a href="#五-遍历单链表" class="headerlink" title="(五) 遍历单链表"></a>(五) 遍历单链表</h3><p>我们需要从头到尾访问单链表中的每一个节点，并且输出其中数据域的信息</p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::traverse()const {    Node *p = head -> next;    cout << "traverse:";    while (p != NULL) {        cout << p -> date << " ";        p = p -> next;    }}</code></pre><h3 id="六-按照位序-i-寻找其元素对应内存地址"><a href="#六-按照位序-i-寻找其元素对应内存地址" class="headerlink" title="(六) 按照位序 i 寻找其元素对应内存地址"></a>(六) 按照位序 i 寻找其元素对应内存地址</h3><p>设置一个移动工作指针，和一个计数器 count，初始时p指向头结点，每当指针p移向下一个结点的时候，计数器count + 1 ，直到 p指向位序为 i的节点为止。返回 p</p><pre class=" language-c++"><code class="language-c++">template<class elemType>typename linkList<elemType>::Node *linkList<elemType>::getPostion(int i)const {    if(i < -1 || i > curLength - 1)        return NULL;    Node *p = head;    int count = 0;    while(count <= i) {        p = p -> next;        count++;    }    return p;}</code></pre><h3 id="七-按值查询节点位序"><a href="#七-按值查询节点位序" class="headerlink" title="(七) 按值查询节点位序"></a>(七) 按值查询节点位序</h3><p>设置一个移动工作指针，和一个计数器 count，从单链表的第一个节点开始，开始于给定的值进行比对，如果相等则查找成功，返回节点的位序，否则继续查询知道单链表结束，查询失败返回 -1</p><pre class=" language-c++"><code class="language-c++">template<class elemType>int linkList<elemType>::search(const elemType&value)const {    Node *p = head -> next;    int count = 0;     while (p != NULL && p -> data != value) {        p = p -> next;        count++;    }    if (p == NULL) {        return -1;    }else {        return count;     }}</code></pre><h3 id="八-插入节点"><a href="#八-插入节点" class="headerlink" title="(八) 插入节点"></a>(八) 插入节点</h3><p>在位序为 i 出插入值为value 的新节点q，我们需要做的就是找到位序为i - 1 的节点p，让q指针域指向原来p的后继，然后修改p的后继为q即可，说白了也就是修改插入元素位置前后的元素指向关系就可以了</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-015.png" alt></p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::insert(int i,const elemType &value) {    Node *p, *q;    if(i < 0 || i > curLength)        throw outOfRange();    p = getPostion(i - 1);    q = new Node(value,p -> next);    p -> next = q;    if (p == tail) tail = q;    curLength++;}</code></pre><h3 id="九-删除节点"><a href="#九-删除节点" class="headerlink" title="(九) 删除节点"></a>(九) 删除节点</h3><p>能看懂添加节点的方法，理解删除节点也是手到擒来</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-016.png" alt></p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::remove(int i) {    //p是待删节点，pre是其前驱     Node *p, *pre;    if(i < 0 || i > curLength)        throw outOfRange();    pre = getPostion(i - 1);    p = pre -> next;    if (p == tail) {        tail = pre;        pre -> next = NULL;        delete p;    } else {        pre -> next = p -> next;        delete p;    }}</code></pre><h2 id="单链表整表的创建"><a href="#单链表整表的创建" class="headerlink" title="单链表整表的创建"></a>单链表整表的创建</h2><p>回顾我们前面认识的顺序表，它其实可以理解为一个数组，我们声明一个类型，同时给定值，初始化其大小，但是单链表就不一样了，它是一种动态组织，它不需要像顺序表一样元素集中，它可以随着实际的情况来动态生成节点，所以也不需要预先分配空间大小和位置</p><h3 id="一-头插法创建单链表"><a href="#一-头插法创建单链表" class="headerlink" title="(一) 头插法创建单链表"></a>(一) 头插法创建单链表</h3><p>头插法的意思就是说，每次新增节点全部插在头结点之后，首元结点之前，你可以这样理解，我先来排队，但是后面来了人，他就会排到我的前面去，我们来借助图看一下</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-018.png" alt></p><p>我们一次插入元素 123 但实际上输出的是按照321的顺序存储的，也就是说和我们的逻辑顺序是相反的</p><p>我们来看一看怎么实现它</p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::headCreate() {    Node *p;    elemType value, flag;    cout << "inputelements, ended with:";    cin >> flag;    while(cin >> value, value != flag) {        //p -> data == value, p -> next = head ->next         p = new Node(value, head -> next);        head -> next = p;        //原链表为空，新节点p成为为节点         if (head == tail)             tail = p;        curLength++;     }}</code></pre><h4 id="逆置单链表"><a href="#逆置单链表" class="headerlink" title="逆置单链表"></a>逆置单链表</h4><p>我们知道单链表中元素顺序与读入的顺序是相反的，我们可以通过逆置单链表的算法，帮助我们重新恢复我们的惯有思维顺序</p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::inverse() {    Node *p, *tmp;    //p为工作指针，指向首元结点     p = head -> next;    //头结点的指针域置空，构成空链表     head -> next = NULL;    //逆置后首元结点将成为尾节点     if (p)        tail = p;    while (p) {        //暂存p的后继         tmp = p -> next;        p -> next = head -> next;        //节点p插在头结点的后面         head -> next = p;        //继续处理下一个节点         p = tmp;     }}</code></pre><h3 id="二-尾插法创建单链表"><a href="#二-尾插法创建单链表" class="headerlink" title="(二) 尾插法创建单链表"></a>(二) 尾插法创建单链表</h3><p>看完了头插法，但是感觉这样的顺序与我们一贯的思维总是有一点别扭，而尾插法则是一种，逻辑顺序与我们一致的创建方法</p><p>还是看一下图</p><p><img src="http://image.ideal-20.cn/AlgorithmAndDataStructure/9.2-02-019.png" alt></p><pre class=" language-c++"><code class="language-c++">template<class elemType>void linkList<elemType>::tailCreate() {    Node *p;    elemType value, flag;    cout << "inputelements, ended with:";    cin >> flag;    while(cin >> value, value != flag) {        p = new Node(value,NULL);        tail -> next = p;        tail = p;        curLength++;    }}</code></pre><h2 id="合并单链表"><a href="#合并单链表" class="headerlink" title="合并单链表"></a>合并单链表</h2><p>要求：假设我们给出两个仍然是递增的单链表la和lb，我们将其合并为lc 仍保证递增，利用原表空间，但是我们仍在下面将表C称作新表</p><p>因为我们的要求是递增的，所以使用尾插法是非常合适的，我们设计三个工作指针，分别指向两个表的首元结点，然后将第三个指针指向新表的头结点，比较前两个指针指向的值，小的就放到新表的表尾，然后后移动两表中较小的那一个的指针，以此类推，直到其中一个表尾空，将剩余的节点全部链接到新表的末尾</p><pre class=" language-c++"><code class="language-c++">template<class elemType>typename linkList<elemType> *linkList<elemType> ::Union(linkList<elemType> *lb) {    Node *pa, *pb, *pc;    linkList<elemType> *lc = this;    pa = head -> next;    head -> next = NULL;    pb = (lb -> head) -> next;    (lb -> head) -> next = NULL;    pc = lc -> head;    while(pa && pb) {        if(pa -> data <= pb -> data) {            pc-> next = pa;            pc = pa;            pa = pa -> next;        } else {            pc -> next = pb;            pc = pb;            pb = pb -> next;        }    }    if(pa) {        pc -> next = pa;        lc -> tail = tail;    } else {        pc -> next = pb;        lc -> tail = lb -> tail;    }    lc -> cuirLength = curLength + lb -> curLength;    delete lb;    return lc; }</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单链表，采取了链式存储结构，用一组任意的存储单元存放线性表的元素，尤其对于需要频繁的插入和删除数据的时候更加适用，如果需要进行频繁的查找还是推荐使用顺序表，例如对于一个学生成绩管理系统的制作，学生更多的时候是查看自己的成绩，而录入的老师，也只有在考试后录入一次，所以应该使用顺序表，而例如考勤打卡系统，更多的是打卡信息的记录，所以还是选择使用链表，当然例子可能不是很恰当，同时正常的开发中还会有更多复杂的问题需要考虑，举例子只为了利于理解</p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创开发技术文章的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 9.2-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-顺序表原来这么简单</title>
      <link href="/2019/09/23/9.2-shu-ju-jie-gou/001-shun-xu-biao-yuan-lai-zhe-me-jian-dan/"/>
      <url>/2019/09/23/9.2-shu-ju-jie-gou/001-shun-xu-biao-yuan-lai-zhe-me-jian-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>新生安排体检，为了 便管理与统一数据，学校特地规定了排队的方式，即按照学号排队，谁在前谁在后，这都是规定好的，所以谁在谁不在，都是非常方便统计的，同学们就像被一条线（学号）联系起来了，这种组织数据（同学）的方式我们可以称作线性表结构</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>线性表</strong>：具有零个或多个（具有相同性质，属于同一元素的）数据元素的有限序列</p><p>若将线性表记为 ( a<sub>0</sub> , a<sub>1</sub> <strong>,a<sub>i -1</sub> a<sub>i</sub> ,a<sub>i +1</sub></strong>  ,  … , a<sub>n - 1</sub> , a<sub>n</sub> ) </p><ul><li><p>注意：i 是任意数字，只为了说明相对位置，下标即其在线性表中的位置)</p></li><li><p><strong>前继和后继</strong>：由于前后元素之间存在的是<strong>顺序关系</strong>，所以除了首尾元素外，每个元素均含有<strong>前驱</strong>和<strong>后继</strong>，简单的理解就是<strong>前一个 元素和后一个元素</strong></p></li><li><p><strong>空表</strong>：如果线性表中元素的个数 n 为线性表长度，那么 n = 0 的时候，线性表为空</p></li><li><p><strong>首节点、尾节点</strong>： 上面表示中的 ：a<sub>0</sub> 称作首节点，a<sub>n</sub> 称作尾节点</p></li></ul><h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><ul><li><p><strong>数据类型</strong>：一组<strong>性质相同</strong>的值的集合及定义在此集合上的一些操作的<strong>总称</strong></p></li><li><p><strong>抽象数据类型</strong>：是指一个数学模型及定义在该模型上的一组操作</p></li></ul><p>关于数据类型我们可以举这样一个例子</p><ul><li>例如：我们常常用到的 整数型 浮点型 数据 这些都是数据的总称，所有符合其性质特征的都可以用其对应数据类型来定义，例如 520是一个满足整数特征的数据，所以可以赋值给 一个int型的变量 <code>int love = 520;</code> </li></ul><p>像这些<strong>一般的数据类型</strong>通常在编程语言的内部定义封装，直接提供给用户，供其调用进行运算，而抽象数据类型一般由用户自己<strong>根据已有的数据类型进行定义</strong></p><p><strong>抽象数据类型和高级编程语言中的数据类型实际上是一个概念，但其含义要比普通的数据类型更加广泛、抽象</strong></p><p>为什么说抽象呢？是因为它是我们用户为了解决实际的问题，与描述显示生活且现实生活中的实体所对应的一种数据类型，我可以定义其存储的结构，也可以定义它所能够，或者说需要进行的一些操作，例如在员工表中，添加或删除员工信息，这两部分就组成了 “员工” 这个抽象的数据类型</p><p><strong>大致流程就是：</strong></p><ul><li><p>A：一般用户会编写一个自定义数据类型作为基础类型</p></li><li><p>B：其中一些抽象操作就可以定义为该类型的成员函数，然后实现这些函数</p></li><li><p>C：如果对外的接口在公有域中，就可以通过对象来调用这些操作了</p></li><li><p>当然，我们在使用抽象数据类型的时候，我们更加注意数据本身的API描述，而不会关心数据的表示，这些都是实现该抽象数据类型的开发者应该考虑的事情</p></li></ul><p>线性表分为两种——顺序存储结构和链式存储结构，我们先来学习第一种</p><h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><h3 id="什么是顺序存储结构呢？"><a href="#什么是顺序存储结构呢？" class="headerlink" title="什么是顺序存储结构呢？"></a>什么是顺序存储结构呢？</h3><p><strong>顺序存储结构</strong>：用一段地址连续的存储单元依次存储线性表的数据元素</p><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-001.png" alt></p><h3 id="怎么理解这这种存储方式呢？"><a href="#怎么理解这这种存储方式呢？" class="headerlink" title="怎么理解这这种存储方式呢？"></a>怎么理解这这种存储方式呢？</h3><p>例如在一个菜园子中，有一片空地，我们在其中找一小块种蔬菜，因为土地不够平整疏松所以我们需要耕地，同时将种子按照一定的顺序种下去，这就是对表的初始化</p><p>菜园子可以理解为内存空间，空地可以理解为可以使用的内存空间，我们通过种蔬菜种子的方式，将一定的内存空间所占据，当然，这片空间中你所放置的数据元素都必须是相同类型的 也就是说都得是蔬菜种子，有时候有些种子被虫子咬坏了，我们就需要移除一些种子，买来以后再在空出来的位置中选地方种好，这也就是增加和删除数元素</p><h3 id="地址计算方式"><a href="#地址计算方式" class="headerlink" title="地址计算方式"></a>地址计算方式</h3><p>从定义中我们可以知道 这种存储方式，存储的数据是连续的，而且相同类型，所以每一个数据元素占据的存储空间是一致的，假设每个数据 占据 L个存储单元那么我们可以的出这样的结论公式</p><p>$$Loc(a_i) = Loc(a_1) + (i -1)*L$$</p><ul><li>i 代表所求元素的下标</li><li>也就是单位长度乘以对应的个数</li></ul><h3 id="线性表的抽象数据类型"><a href="#线性表的抽象数据类型" class="headerlink" title="线性表的抽象数据类型"></a>线性表的抽象数据类型</h3><pre class=" language-c++"><code class="language-c++">#ifndef _LIST_H_#define _LIST_H_#include<iostream>using namespace std;class outOfRange{};class badSize{};template<class T>class List {public:    // 清空线性表    virtual void clear()=0;    // 判空，表空返回true，非空返回false    virtual bool empty()const=0;    // 求线性表的长度    virtual int size()const=0;    // 在线性表中，位序为i[0..n]的位置插入元素value    virtual void insert(int i,const T &value)=0;    // 在线性表中，位序为i[0..n-1]的位置删除元素    virtual void remove(int i)=0;    // 在线性表中，查找值为value的元素第一次出现的位序    virtual int search(const T&value)const=0;    // 在线性表中，查找位序为i的元素并返回其值    virtual T visit(int i)const=0;    // 遍历线性表    virtual void traverse()const=0;    // 逆置线性表    virtual void inverse()=0;                        virtual ~List(){};};/*自定义异常处理类*/ class outOfRange :public exception {  //用于检查范围的有效性public:    const char* what() const throw() {        return "ERROR! OUT OF RANGE.\n";    }};class badSize :public exception {   //用于检查长度的有效性public:    const char* what() const throw() {        return "ERROR! BAD SIZE.\n";    }};#endif</code></pre><p>在上面线性表的抽象数据类型中，定义了一些常用的方法，我们可以在其中根据需要，增删函数</p><p>有了这样的抽象数据类型List 我们就可以写出线性表其下的顺序结构和链式结构表的定义写出来</p><blockquote><p>异常语句说明：如果new在调用分配器分配存储空间的时候出现了错误（错误信息被保存了一下），就会catch到一个bad_alloc类型的异常，其中的what函数，就是提取这个错误的基本信息的，就是一串文字，应该是const char*或者string</p></blockquote><h3 id="顺序表——顺序存储结构的定义"><a href="#顺序表——顺序存储结构的定义" class="headerlink" title="顺序表——顺序存储结构的定义"></a>顺序表——顺序存储结构的定义</h3><pre class=" language-c++"><code class="language-c++">#ifndef _SEQLIST_H_#define _SEQLIST_H_#include "List.h"#include<iostream>using namespace std;//celemType为顺序表存储的元素类型template <class elemType>class seqList: public List<elemType> { private:    // 利用数组存储数据元素    elemType *data;    // 当前顺序表中存储的元素个数    int curLength;    // 顺序表的最大长度    int maxSize;    // 表满时扩大表空间    void resize();                            public:    // 构造函数    seqList(int initSize = 10);                     // 拷贝构造函数    seqList(seqList & sl);    // 析构函数    ~seqList()  {delete [] data;}    // 清空表，只需修改curLength    void clear()  {curLength = 0;}    // 判空    bool empty()const{return curLength == 0;}    // 返回顺序表的当前存储元素的个数    int size() const  {return curLength;}    // 在位置i上插入一个元素value，表的长度增1    void insert(int i,const elemType &value);    // 删除位置i上的元素value，若删除位置合法，表的长度减1     void remove(int i);    // 查找值为value的元素第一次出现的位序    int search(const elemType &value) const ;    // 访问位序为i的元素值，“位序”0表示第一个元素，类似于数组下标    elemType visit(int i) const;                // 遍历顺序表    void traverse() const;    // 逆置顺序表    void inverse();                                bool Union(seqList<elemType> &B);};</code></pre><h3 id="顺序表基本运算的实现"><a href="#顺序表基本运算的实现" class="headerlink" title="顺序表基本运算的实现"></a>顺序表基本运算的实现</h3><h4 id="一-构造函数"><a href="#一-构造函数" class="headerlink" title="(一) 构造函数"></a>(一) 构造函数</h4><p>在构造函数中，我们需要完成这个空顺序表的初始化，即创建出一张空的顺序表</p><pre class=" language-c++"><code class="language-c++">template <class elemType>seqList<elemType>::seqList(int initSize) {     if(initSize <= 0) throw badSize();    maxSize = initSize;    data = new elemType[maxSize];    curLength = 0;} </code></pre><p>在这里我们注意区分 initSize 和 curLenght 这两个变量</p><ul><li><strong>initSize</strong> ：初始化 (指定) 数组长度<ul><li>数组长度是<strong>存放线性表的存储空间的长度</strong>，一般来说这个值是固定的，但是为了满足需要很多情况下，我们会选择动态的分配数组，即定义扩容机制，虽然很方便，但是确带来了效率的损失，我们在扩容的函数中会再提到这一问题</li></ul></li><li><strong>curLenght</strong>：线性表长度，即<strong>数据元素的个数</strong></li></ul><h4 id="二-拷贝构造函数"><a href="#二-拷贝构造函数" class="headerlink" title="(二) 拷贝构造函数"></a>(二) 拷贝构造函数</h4><pre class=" language-c++"><code class="language-c++">template <class elemType>seqList<elemType>::seqList(seqList & sl) {     maxSize = sl.maxSize;    curLength = sl.curLength;    data = new elemType[maxSize];    for(int i = 0; i < curLength; ++i)        data[i] = sl.data[i];}</code></pre><h4 id="三-插入"><a href="#三-插入" class="headerlink" title="(三) 插入"></a>(三) 插入</h4><p>我们下面来谈一个非常常用的操作——插入操作，接着用我们一开始的例子，学校安排体检，大家自觉的按照学号顺讯排好了队伍，但是迟到的某个学生Z和认识前面队伍中的C同学，过去想套近乎，插个队，如果该同学同意了，这意味着原来C同学前面的人变成了Z，B同学后面的人也从C变成了Z同学，同时从所插入位置后面的所有同学都需要向后移动一个位置，后面的同学莫名其妙的就退后了一个位置 </p><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-002.png" alt></p><p>我们来想一下如何用代码实现它呢，并且有些什么需要特别考虑到的事情呢？</p><ul><li><strong>1、插入元素位置的合法以及有效性</strong><ul><li>插入的有效范围：[0,curLength]   说明：curLength：当前有效位置</li></ul></li><li><strong>2、检查是否表满，表满不能继续添加，否则发生溢出错误</strong><ul><li>A：不执行操作，报错退出 (为避免可以将数组初始大小设置大一些)</li><li>B：动态扩容，扩大数组容量 (下例采用)</li></ul></li><li><strong>3、首尾节点的特殊插入情况考虑</strong></li><li><strong>4、移动方向</strong><ul><li>利用循环，从表尾开始逐次移动，如果从插入位置开始，会将后面的未移动元素覆盖掉</li></ul></li></ul><pre class=" language-c++"><code class="language-c++">template <class elemType>void seqList<elemType>::insert(int i, const elemType &value) {     //合法的插入范围为【0..curlength】    if (i < 0 || i > curLength) throw outOfRange();     //表满，扩大数组容量    if (curLength == maxSize) resize();                for (int j = curLength; j > i; j--)        //下标在【curlength-1..i】范围内的元素往后移动一步        data[j] = data[j - 1];    //将值为value的元素放入位序为i的位置    data[i] = value;    //表长增加    ++curLength;    }</code></pre><h4 id="四-删除"><a href="#四-删除" class="headerlink" title="(四) 删除"></a>(四) 删除</h4><p>既然理解了插入操作，趁热打铁，先认识一下对应的删除操作，这个操作是什么流程呢？还是上面的例子，插队后的同学被管理人员发现，不得不离开队伍，这样刚才被迫集体后移的那些同学就都又向前移动了一步，当然删除位置的前后继关系也发生了改变</p><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-003.png" alt></p><p>与插入相同，它又有什么注意之处呢?</p><ul><li><p><strong>1、删除元素位置的合法以及有效性</strong></p><ul><li>删除的有效范围：[0,curLength - 1]   </li><li><code>i &lt; 0 || i &gt; curLength- 1</code>隐性的解决了判断空表的问题</li></ul></li><li><p><strong>2、移动方向</strong></p><ul><li>利用循环，从删除元素的位置后开始逐次前移</li></ul></li></ul><pre class=" language-c++"><code class="language-c++">template <class elemType>void seqList<elemType>::remove(int i) {     //合法的删除范围    if(i < 0 || i > curLength- 1) throw outOfRange();      for(int j = i; j < curLength - 1; j++)        data[j] = data[j+1];    --curLength; }</code></pre><h4 id="五-扩容操作"><a href="#五-扩容操作" class="headerlink" title="(五) 扩容操作"></a>(五) 扩容操作</h4><p>还记得吗，我们在构造函数中，定义了数组的长度<br><code>seqList&lt;elemType&gt;::seqList(int initSize) { 代码内容}</code> </p><p>同时我们将这个初始化的指定参数值做为了 数组的长度 </p><p><code>maxSize = initSize;</code> </p><p><strong>为什么我们不直接指定构造函数中的参数为 maxSize呢？</strong> </p><p>从变量名可以看出这是为了说明初始值和最大值不是同一个数据，也可以说是为了扩容做准备，</p><p><strong>为什么要扩容呢？</strong></p><p>数组中存放着线性表，但是如果线性表的长度（数据元素的个数）达到了数组长度会怎么样？很显然我们已经没有多余的空间进行例如插入这种操作，也称作表满了，所以我们定义一个扩容的操作，当涉及到可能表满的情况，就执行扩容操作</p><p><strong>扩容是不是最好的方式？</strong></p><p>虽然数组看起来有一丝不太灵光，但是数组确实也是存储对象或者数据的有效方式，我们也推荐这种方式，但是由于其长度固定，导致它在很多时候会受到一些限制，就例如我们上面的表满问题，那么如何解决呢？方法之一就是我们设置初始值比实际值多一些，但是由于实际值往往会有一些波动，就会导致占用过多的内存空间造成浪费，或者仍发生表满问题，为了解决实际问题，很显然还是扩容更加符合需要，但是代价就是一定的效率损失</p><blockquote><p>数组就是一个简单的线性序列，这使得元素访问非常快速。但是为这种速度所付出的代价是数组对象的大小被固定，并且在其生命周期中不可改变</p></blockquote><p><strong>我们看一下扩容的基本原理你就知道原因了！</strong></p><p><strong>扩容思想：</strong></p><p>由于数组空间在内存中是必须连续的，因此，扩大数组空间的操作需要重新申请一个规模更大的新数组，将原有数组的内容复制到新数组中，释放原有数组空间，将新数组作为线性表的存储区</p><p>所以为了实现空间的自动分配，尽管我们还是会首选动态扩容的方式，但是这种弹性显然需要一定的开销</p><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-004.png" alt></p><pre class=" language-c++"><code class="language-c++">template <class elemType>void seqList<elemType>::resize() {     elemType *p = data;    maxSize *= 2;    data = new elemType[maxSize];    for(int i = 0; i < curLength; ++i)        data[i] = p[i];    delete[] p; }</code></pre><h4 id="六-按值查找元素"><a href="#六-按值查找元素" class="headerlink" title="(六) 按值查找元素"></a>(六) 按值查找元素</h4><p>顺序查找值为value的元素第一次出现的位置，只需要遍历线性表中的每一个元素数据，依次与指定value值比较</p><ul><li>相同：返回值的位序<ul><li>注意查询的有效范围</li></ul></li><li>找不到或错误：返回 -1</li></ul><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-005.png" alt></p><pre class=" language-c++"><code class="language-c++">template<class elemType>int seqList<elemType>::search(const elemType & value) const{    for(int i = 0; i < curLength; i++)        if(value == data[i])return i;    return - 1;}</code></pre><h4 id="七-按位置-下标-查找元素"><a href="#七-按位置-下标-查找元素" class="headerlink" title="(七) 按位置(下标)查找元素"></a>(七) 按位置(下标)查找元素</h4><p>这个就真的很简单了，直接返回结果即可</p><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-006.png" alt></p><pre class=" language-c++"><code class="language-c++">template<class elemType>elemType seqList<elemType>::visit(int i) const {    return data[i];                                                                   }</code></pre><h4 id="八-遍历元素"><a href="#八-遍历元素" class="headerlink" title="(八) 遍历元素"></a>(八) 遍历元素</h4><p>遍历是什么意思呢？遍历其实就是每一个元素都访问一次，从头到尾过一遍，所以我们就可以利用遍历实现查询，或者输出等功能，如果表是空表，就输出信息提示，并且注意遍历的有效范围是[0，最后一个元素 - 1]</p><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.2-02-007.png" alt></p><pre class=" language-c++"><code class="language-c++">template<class elemType>void seqList<elemType>::traverse()const {    if (empty())        cout << "is empty" << endl;        else {        cout << "output element:\n";        //依次访问顺序表中的所有元素        for (int i = 0; i < curLength; i++)                cout << data[i] << " ";        cout << endl;    }}</code></pre><h4 id="九-逆置运算"><a href="#九-逆置运算" class="headerlink" title="(九) 逆置运算"></a>(九) 逆置运算</h4><p>逆置运算顾名思义 ，就是将线性表中的数据颠倒一下，也就是说首元素和尾元素调换位置，然后就是第二个元素和倒数第二个元素调换，接着向中间以对为单位继续调换，也可以称作收尾对称交换，需要注意的就是循环的次数仅仅是线性表长度的一半而已</p><pre class=" language-c++"><code class="language-c++">template<class elemType>void seqList<elemType>::inverse() {    elemType tem;    for(int i = 0; i < curLength/2; i++) {        //调换的具体方式，可以设置一个中间值        tem = data[i];        //对称的两个数据        data[i] = data[curLength - i -1];        data[curLength - i -1] = tem;    }}</code></pre><h4 id="十-合并顺序表"><a href="#十-合并顺序表" class="headerlink" title="(十) 合并顺序表"></a>(十) 合并顺序表</h4><p>现在给出两个线性表，表A和表B，其中的元素均为正序存储，如何可以合并两个表，放于A表中，但是表中的元素仍然保证正序存储</p><p>算法思想：我们分别设置三个指针，分别代表了A B C，C 代表新表，我们分别让三个指针指向三个表的末尾，将A表和B表的尾元素进行比较，然后将大的移入新A表中，然后将大的元素所在线性表的指针和新表的指针，前移一位 ，这样A和B表继续比较元素大小，重复操作，直到一方表空，将还有剩余的那个表的剩余元素移入新A表中</p><pre class=" language-c++"><code class="language-c++">template<class elemType>bool seqList<elemType>::Union(seqList<elemType> &B) {        int m, n, k, i, j;        //当前对象为线性表A    //m,n分别为线性表A和B的长度    m = this->curLength;                              n = B.curLength;    //k为结果线性表的工作指针（下标）新A表中    k = n + m - 1;        //i,j分别为线性表A和B的工作指针（下标）    i = m - 1, j = n - 1;    //判断表A空间是否足够大，不够则扩容    if (m + n > this->maxSize)                              resize();    //合并顺序表，直到一个表为空    while (i >= 0 && j >= 0)                              if (data[i] >= B.data[j])            data[k--] = data[i--];        //默认当前对象，this指针可省略        else data[k--] = B.data[j--];                  //将表B中的剩余元素复制到表A中    while (j >= 0)                                          data[k--] = B.data[j--];    //修改表A长度    curLength = m + n;                                  return true;}</code></pre><h3 id="顺序表的优缺点"><a href="#顺序表的优缺点" class="headerlink" title="顺序表的优缺点"></a>顺序表的优缺点</h3><p><strong>优点：</strong></p><ol><li>逻辑与物理顺序一致，顺序表能够按照下标直接<strong>快速的存取元素</strong></li><li>无须为了表示表中元素之间的逻辑关系而增加额外的存储空间</li></ol><p><strong>缺点：</strong></p><ol><li><p>线性表长度需要初始定义，常常难以确定存储空间的容量，所以只能以降低效率的代价使用扩容机制</p></li><li><p>插入和<strong>删除操作需要移动大量的元素，效率较低</strong></p></li></ol><h4 id="时间复杂度证明"><a href="#时间复杂度证明" class="headerlink" title="时间复杂度证明"></a>时间复杂度证明</h4><h5 id="读取："><a href="#读取：" class="headerlink" title="读取："></a>读取：</h5><p>还记的这个公式吗？</p><p>$$Loc(a_i) = Loc(a_1) + (i -1)*L$$</p><p>通过这个公式我们可以在任何时候计算出线性表中任意位置的地址，并且对于计算机所使用的时间都是相同的，即一个常数，这也就意味着，它的时间复杂度为 O(1)</p><h5 id="插入和删除："><a href="#插入和删除：" class="headerlink" title="插入和删除："></a>插入和删除：</h5><p>我们以插入为例子</p><ul><li><p>首先最好的情况是这样的，元素在末尾的位置插入，这样无论该元素进行什么操作，均不会对其他元素产生什么影响，所以它的时间复杂度为 O(1) </p></li><li><p>那么最坏的情况又是这样的，元素正好插入到第一个位置上，这就意味着后面的所有元素全部需要移动一个位置，所以时间复杂度为 O(n)</p></li><li><p>平均的情况呢，由于在每一个位置插入的概率都是相同的，而插入越靠前移动的元素越多，所以平均情况就与中间那个值的一定次数相等，为 (n - 1) / 2 ，平均时间复杂度还是 O(n)</p></li></ul><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>读取数据的时候，它的时间复杂度为 O(1)，插入和删除数据的时候，它的时间复杂度为 O(n)，所以线性表中的顺序表更加适合处理一些元素个数比较稳定，查询读取多的问题</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创开发技术文章的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode-rectangle.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 9.2-数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-算法与数据结构开篇</title>
      <link href="/2019/09/19/9.1-suan-fa-yu-shu-ju-jie-gou/suan-fa-yu-shu-ju-jie-gou-kai-pian/"/>
      <url>/2019/09/19/9.1-suan-fa-yu-shu-ju-jie-gou/suan-fa-yu-shu-ju-jie-gou-kai-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="算法与数据结构开篇"><a href="#算法与数据结构开篇" class="headerlink" title="算法与数据结构开篇"></a>算法与数据结构开篇</h1><h2 id="注意-算法与数据结构部分语言选用C"><a href="#注意-算法与数据结构部分语言选用C" class="headerlink" title="注意:算法与数据结构部分语言选用C++"></a>注意:算法与数据结构部分语言选用C++</h2><p>一些常见的算法，我会写出对应的Java写法，并且一些常见的源码解析 如HashMap等 ，我会在后期着重在Java部分中讲解，在这部分我们更加着重于理解算法与数据结构中的原理与思想，编程语言尽管存在差异，但是并不会造成太大的阅读障碍，如果你有Java或者C#等的基础，读起来基本不会存在太大的语言障碍，同时学习C++中例如指针的知识，更会让我们体会到指针的优越以及麻烦之处，阅读前可以简单补充一些C++基础语法（本篇基本不需要）</p><h2 id="你真的会数据结构吗？"><a href="#你真的会数据结构吗？" class="headerlink" title="你真的会数据结构吗？"></a>你真的会数据结构吗？</h2><blockquote><p> 公司开发一个客服电话系统，小菜需要完成客户排队模块的开发，经过三次修改：</p></blockquote><p><strong>第一次</strong>：小菜使用了数据库设计了一张客户排队表，并且设置了一个自动增长的整型id字段，来一个用户，就在这张表的末尾插入一条数据，等客服系统一空闲，就将表中最前的的客户提交，然后删除这条记录。</p><ul><li><strong>实时排队模块，在内存中实现即可，无序用数据库</strong></li></ul><p><strong>第二次</strong>：小菜用数组变量重新实现了这个功能，害怕数组不够大，选择远大于实际情况的100作为数组长度</p><ul><li><strong>数组虽然可以满足一定需求，但是需要考虑溢出问题，以及新增和删除后的数据移动，显然不是很方便</strong></li></ul><p><strong>第三次</strong>：小菜使用了数据结构中的 “队列结构” 终于满足了需求</p><blockquote><p>说明：此例子归纳参考自《大话数据结构》</p></blockquote><h2 id="为什么你的程序比别人的慢？-算法问题"><a href="#为什么你的程序比别人的慢？-算法问题" class="headerlink" title="为什么你的程序比别人的慢？(算法问题)"></a>为什么你的程序比别人的慢？(算法问题)</h2><p>来看一个问题：</p><p>公元前五世纪，我国古代数学家张丘建在《算经》一书中提出了“百鸡问题”：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？请设计一个“高效”的算法求解。</p><p>也就是说：</p><p>买一只公鸡要五文，买一只母鸡要三文，而一文可以买三只小鸡，共有100文，问公鸡母鸡小鸡各能买几只？</p><p>话不多说，我们先给出一种最容易想到的方式，也就是列两个三元方程组</p><p>也就是满足鸡的总数为100，同时花钱数也为100，我们来看一下代码实现</p><p><strong>方式一：</strong></p><pre class=" language-c++"><code class="language-c++">//i j k 分别代表公鸡 母鸡 雏鸡的数量 //20、34、300 为100元最多能买公鸡、母鸡、小鸡的数量for (int i = 0; i < 20; i++) {    for (int j = 0; j < 34; j++) {        for (int k = 0; k < 300; k = k + 3) { //k = k + 3 是为了满足小鸡实际存在的要求            if (5*i + 3*j +  k/3 == 100 && i + j + k == 100) {                cout << "公鸡 母鸡 雏鸡 数量分别为：" << i <<", "<< j <<", "<< k << endl;            }        }    }}</code></pre><p>我们用了三层循环，有没有办法能简化以下代码呢？能不能减少循环层数呢？这显然是可行的，上面小鸡的数量这一层明显可以省略的，因为总数是已知的</p><p><strong>方式二</strong>：</p><pre class=" language-c++"><code class="language-c++">for (int i = 0; i < 20; i++) {    for (int j = 0; j < 34; j++) {        k_temp = 100 - i - j;        if (k_temp % 3 == 0)            k = k_temp;        if (5*i + 3*j +  k/3 == 100 && i + j + k == 100) {            cout << "公鸡 母鸡 雏鸡 数量分别为：" << i <<", "<< j <<", "<< k << endl;        }    }}</code></pre><p>确实程序更加优化了一些，但是这样是不是就可以了呢？其实还可以优化为一层循环！</p><p><strong>方式三</strong>：</p><pre class=" language-c++"><code class="language-c++">int i, j, k, t;for (int t = 0; t <= 25/7; t++) {    i = 4 * t;    j = 25 - 7 * t;    k = 75 + 3 * t;    cout << "公鸡 母鸡 雏鸡 数量分别为：" << i <<", "<< j <<", "<< k << endl; } </code></pre><p>上例中对程序的优化涉及到了数学的运算</p><pre class=" language-c++"><code class="language-c++">//根据花钱的总数为100列式5x + 3y + (100 - x - y)/3 = 100//对上式进行化简y = 25 -(7/4)x  = 25 - 2x + x/4//设 x/4 = t，原式子可变为y = 25 - 7t//可以得到三个不等式x = 4t >= 0y = 25 - 7t >= 0z = 75 + 3t >= 0//解得t >= 0t <= 25/7</code></pre><p>为了增加说服力，我们测试每一个程序的运算时间，不太熟悉的朋友我下面已经贴出了代码</p><pre class=" language-c++"><code class="language-c++">#include<ctime>clock_t startTime,endTime;startTime = clock();......测试代码endTime = clock();cout << "The run time is: " << (double) (endTime - startTime) / CLOCKS_PER_SEC << "s" << endl; </code></pre><p>我们将数据放大一些，方便体现差异，我们将总金额和总数量均改为1000 下面是三种方式的运算时间</p><pre><code>The run time is: 0.114sThe run time is: 0.03sThe run time is: 0.026s</code></pre><p>很显然程序逐步的到了优化，减少了for循环 大大的减少了循环次数，所以节省了时间</p><p>##为什么要一起学习数据结构和算法？</p><p>想要回答这个问题，我们先开看一下数据结构和算法的概念</p><h3 id="数据结构概念"><a href="#数据结构概念" class="headerlink" title="数据结构概念"></a>数据结构概念</h3><p><strong>数据结构是指相互之间存在一种或多种特定关系数据元素的集合</strong></p><p>也就是说，计算机在对数据进行存储的时候并不是杂乱无序的而是拥有一定规则的，一个或多个数据元素之间拥有一定的相互关系，所以也可以说数据结构是计算机存储和组织数据的方式</p><h3 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h3><p><strong>算法是一种可以被计算机使用来解决问题的的方法，这种方法也正是解决问题的具体步骤</strong></p><p>对于小型的程序而言，即使这个算法比较差劲，解决问题的步骤比较累赘繁琐，也不会有很大的关系，只要能解决问题的就是好程序，但是如果对于数据量较大的中大型程序，我们就需要对方法的时间和空间进行有效的利用，也就是设计一个高效的算法，在同样硬件设备的情况下，有时候甚至可以将速度提高十倍甚至百倍</p><h3 id="程序-数据结构-算法"><a href="#程序-数据结构-算法" class="headerlink" title="程序 = 数据结构 + 算法"></a>程序 = 数据结构 + 算法</h3><p>数据结构是对计算机所存储的数据之间的一种组织管理，算法是对数据进行操作从而将你解决问题的方法在计算机中具体实现，也就是说，在计算机中而言，其实这两者单独拿出来讨论是没有什么实际意义的，就像鱼离不开水一样，即使一个优秀的算法，如果数据之间没有任何结构关系可言，算法也就无从实现，也就没有意义了，而即使数据之间有了组织关系，但是不对其进行操作这显然也没有意义。</p><p><strong>简单总结：只有数据结构的程序是没有灵魂的，只有算法的程序却只有魂魄，没有躯体</strong></p><p>不可否认，数据结构是非常重要的，但我更加倾向于算法为核心，正如 Algorithms(4th.Edition) 中的观点，<strong>数据结构是算法的副产品或者结果</strong>，在我看来，如何<strong>建立一个有效且高效的算法以及模型是更重要一些的</strong>，开发的最终目的就是通过程序利用科技设备实现我们实际生活中的一些需求，我们遇到问题的第一步都是在现实中对问题进行分析，然后设计出合适的方法，然后就要想办法将这种方法表达给计算机设备，但是这个时候就需要数据结构这样一种<strong>满足需要的产物</strong>，来支持我们对我们的设备具体表达我们的方法，尤其随着数据量的检验，不同的算法就会对解决实际问题的效率产生更大的影响，我用一个不是很恰当却很形象的例子表达就是：<strong>你的身体（数据结构）死了，你可能还活着，但你的灵魂（算法）死了，你即使活着也已经死了</strong></p><p>当然数据结构的重要性也是不容置疑的，一个好的数据结构，可以帮助我们的程序更加高效，如果什么时候，模型以及算法的选用已经可以根据数据的特点以及需求选用，我们就可以将更多的精力投入到数据结构的设计中去，不过这也仅仅是一种美好的假想，所以我们还是要学好算法，但是学好算法，我们也就要对支持我们算法的数据结构进行一定的研究</p><p>说了一些个人的观点，那让我们赶紧介绍一些入门的必备知识</p><h2 id="数据结构的基本概念和术语"><a href="#数据结构的基本概念和术语" class="headerlink" title="数据结构的基本概念和术语"></a>数据结构的基本概念和术语</h2><ul><li><p><strong>数据</strong>：描述客观事物的数字和符号，是能够被计算机识别且进行处理的的符号集合</p><ul><li><p>整型和实数型数据是可以直接进行数值计算的</p></li><li><p>文字、图像、图形、声音、视频等多媒体信息则可以通过合适的编码保存处理</p><p>例如：文本通过字符编码处理、声音通过储存波形 (WAV) 或在波形分解后存储其振幅特性然后压缩 (MP3)</p></li></ul></li><li><p><strong>数据元素</strong>：组成数据且有意义的的基本单位 (个体) </p><ul><li>例如：猫和狗都是动物群体中的一个数据元素 </li></ul></li><li><p><strong>数据项</strong>：组成数据元素具有特定意义的最小不可分割单位</p></li><li><p>作为人这个类群中具体的个体，一个人而言，其所拥有的手、脚、眼、鼻，亦或者姓名、年龄、身高、等都属于数据项</p></li><li><p><strong>数据对象</strong>：性质相同的数据元素的集合，是数据的子集</p><ul><li>例如：人类中一些人的生日、身高相同</li></ul></li></ul><h2 id="逻辑结构和物理结构-存储结构"><a href="#逻辑结构和物理结构-存储结构" class="headerlink" title="逻辑结构和物理结构(存储结构)"></a>逻辑结构和物理结构(存储结构)</h2><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.1-01-001.png" alt></p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p><strong>逻辑结构：数据对象中数据元素之间的相互关系</strong></p><p>① <strong>集合结构</strong>：数据元素之间的<strong>唯一关系</strong>就是<strong>属于同一个集合</strong></p><p>② <strong>线性结构</strong>：数据元素之间存在<strong>一对一</strong>的关系（除首尾元素均存在前驱和后继）</p><p>③ <strong>树形结构</strong>：数据元素之间存在<strong>一对多</strong>的关系</p><p>④ <strong>图形结构</strong>：数据元素之间存在<strong>多对多</strong>的关系</p><ul><li>（每一个数据元素看做一个节点，元素之间的逻辑关系用连线表示，如果关系有方向则连线带箭头）</li></ul><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.1-01-002.png" alt>)</p><h3 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构(存储结构)"></a>物理结构(存储结构)</h3><p><strong>物理结构：数据的逻辑结构关系在计算机中的存储形式</strong></p><p>① <strong>顺序存储结构</strong>：把元素分别放在地址连续的存储单元中的存储方式</p><ul><li>也就是说：元素一个一个有序的排好队，各自占据一定的空间，例如定义一个含有6个浮点型数据的数组：然后内存中的一块大小为6个浮点型数据大小空间就会被计算机所开辟，然后数据存入时，依次顺序摆入</li></ul><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.1-01-003.png" alt></p><p>② <strong>链式存储结构</strong>：把元素存储在任意的存储单元中的存储方式</p><ul><li><p>因为数据元素位置不确定，所以需要通过指针指向到元素的存储地址，从而确定不同数据元素之间的位置</p></li><li><p>举例：200人同时在一个阶梯教室上课，同学们坐的位置是没有关系的，老师点名签到的时候，你只需要关注你学号前一位的同学有没有被点到，点到后，你就知道下一个该你了</p></li></ul><p><img src="http://image.ideal-20.cn/DataStructuresAndAlgorithms/9.1-01-004.png" alt></p><p>③  <strong>散列 (哈希) 存储方式</strong>：是一种力图将数据元素的存储位置与关键码之间建立确定对应关系的查找技术</p><ul><li><p>你别慌，我这就来解释了，它的原理就是，将一个节点的关键字key作为自变量，通过一个确定的函数运算f(key)，其函数值作为节点的存储地址，将节点存入到指定的位置上，查找的时候，被搜索的关键字会再次通过f(key)函数计算地址，然后读取对应数据</p></li><li><p>我们后面会专篇讲解这个内容，现在做一个简单的了解即可</p></li></ul><p>④ <strong>索引存储方式</strong>：存储时，除了存储节点，还附加建立了索引表来表示节点的地址</p><h2 id="算法的特征"><a href="#算法的特征" class="headerlink" title="算法的特征"></a>算法的特征</h2><ul><li><p><strong>输入</strong>：算法具有<strong>零个</strong>或者多个输入（零个的情况例如打印输出字符串，或者算法自身已经给定了初始条件）</p></li><li><p><strong>输出</strong>：算法具有<strong>一个</strong>或者多个输出，用来反映算法对输入数据加工后的结果</p></li><li><p><strong>有穷性</strong>：算法必须在执行有限个步骤后终止</p><ul><li>“有限” 的定义不是绝对的，而是实际应用中合理的可接受的</li></ul></li><li><p><strong>确定性</strong>： 算法的每一步骤都具有确定的含义，不会出现二义性</p><ul><li>也就是说，唯一的输入只有唯一的输出</li></ul></li><li><p><strong>可行性</strong>：算法的每一步都是可行的，通过有限步骤可以实现</p></li></ul><h2 id="算法的设计要求"><a href="#算法的设计要求" class="headerlink" title="算法的设计要求"></a>算法的设计要求</h2><ul><li><p><strong>正确性</strong>：合理的数据输入下，最终可以输出能解决问题需求的正确答案</p><ul><li>对正确的理解：<ul><li>无语法错误</li><li>输入合法和非法的数据均可以得到正确答案</li><li>输入刁难的数据依旧可以输出满足需要的答案</li></ul></li></ul></li><li><p><strong>可读性</strong>：算法便于阅读和理解</p><ul><li><p>算法应该层次分明，易读易懂，方便二次调试和修改</p></li><li><p>复杂一些的算法，变量的命名尽量恰当一些，用阿里的开发手册中的一句话就是说：<strong>“正确的英文拼写和语法可以让阅读者易与理解避免歧义”</strong>，<strong>“为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意”</strong></p></li></ul></li><li><p><strong>健壮性</strong>：当数据不合理的时候，算法也能对各种情况作出处理，而不是报出异常，或者输出错误的答案</p></li><li><p><strong>高效性</strong>：尽量满足时间效率高，存储率低的需求</p></li></ul><h2 id="函数的渐进增长"><a href="#函数的渐进增长" class="headerlink" title="函数的渐进增长"></a>函数的渐进增长</h2><table><thead><tr><th>次数</th><th>算法A ：2n + 4</th><th>算法B ：3n  + 3</th><th>算法C ：2n</th><th>算法D ：3n</th></tr></thead><tbody><tr><td>n = 1</td><td>6</td><td>6</td><td>2</td><td>3</td></tr><tr><td>n = 2</td><td>8</td><td>9</td><td>4</td><td>6</td></tr><tr><td>n = 3</td><td>10</td><td>12</td><td>6</td><td>9</td></tr><tr><td>n = 10</td><td>24</td><td>33</td><td>20</td><td>30</td></tr><tr><td>n = 100</td><td>204</td><td>303</td><td>200</td><td>300</td></tr></tbody></table><p>n = 1的时候 算法 A 和 B 的效率一致，但是从n = 2的时候开始算法 A 的效率已经大于算法 B 了，n值变大后，算法 A 相比 B 变的更加快速</p><ul><li><p><strong>-所以在n值没有限定的情况下，只要在超过某数值N后，函数值就一直大于另一个函数，那么我们称函数是渐进增长的</strong>  </p><blockquote><p><strong>函数的渐近增长：给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n &gt; N，f(n)总是比g(n)大，那么，我们说f(n)的渐近增长快于g(n)</strong></p></blockquote></li><li><p>接着我们分别用 AC 、BD进行对照，你会发现其实后面的<strong>加数对算法的影响几乎是忽略不计的</strong>，所以我们一般选择<strong>忽略这些加法常数</strong></p></li></ul><table><thead><tr><th>次数</th><th>算法A ：2n + 6</th><th>算法B ：3n²  + 3</th><th>算法C ：n</th><th>算法D ：n²</th></tr></thead><tbody><tr><td>n = 1</td><td>8</td><td>6</td><td>1</td><td>1</td></tr><tr><td>n = 2</td><td>10</td><td>15</td><td>2</td><td>4</td></tr><tr><td>n = 3</td><td>12</td><td>30</td><td>3</td><td>9</td></tr><tr><td>n = 10</td><td>26</td><td>303</td><td>10</td><td>100</td></tr><tr><td>n = 100</td><td>206</td><td>30003</td><td>100</td><td>10000</td></tr></tbody></table><p>算法 A 和 B 比较的时候，n = 1的时候 B效率更高，从n = 2开始 算法 A 就比较高效，随着数据的输入，体现的越明显，但是我们同时将这两个算法去掉最高次项的系数，接着可以看到对数据的走向仍然影响不大</p><ul><li><p><strong>最高次项的系数对数据走向的影响不大</strong></p></li><li><p><strong>最高项的指数大的函数，随着n的增长，结果也会快速增长</strong></p></li><li><p>判断算法效率的时候，应主要关注最高次项，其他次要项或者常数项常常可以忽略</p></li></ul><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><p>算法的时间复杂度是一个函数 T(n)，它定性描述该算法的运行时间，通常用大O表示法，记作：T(n) = O(f(n)) 例如3n² + 2n  + 1 的时间复杂度为 O(n²) </p><p>注意：</p><ul><li><p>T(n) = O(f(n)) 解释：随着n增大算法执行时间的增长率和f(n)的增长率相同，同时也考察输入值大小趋于无穷的情况，也称作算法的渐进时间复杂度</p></li><li><p>在这个过程中，不考虑函数的低阶项、常数项和最高项系数，</p></li></ul><h3 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h3><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²)</strong> &lt; O(n³) &lt; O(2^n) &lt; O(n!) &lt; O(n^n) </p><p>实际开发中，我们常见到的还是前几个加粗的</p><p>我们还需要提到两个概念：</p><p><strong>最坏情况</strong>与<strong>平均情况</strong></p><p>最坏情况就是，运行时间的最大值，情况不能再坏了</p><p>平均时间就是</p><p>一般情况下，我们都是指最坏时间复杂度，但平均时间是最有意义的时间，因为它与我们的期望值更接近</p><h3 id="作者的话"><a href="#作者的话" class="headerlink" title="作者的话"></a>作者的话</h3><p>这些文章，当然谈不上算什么有深度的技术，但是我在尽可能的将一些概念通过举例、图表等方式给对这方面知识有需要的朋友，快速的入门，通过一些通俗的说法，先对一些知识有一定的了解，在此基础上，去看一些深入的权威书籍，或者大牛的博文，就会不至于劝退，自知技术有限，但仍然想给一些刚刚接触这部分知识的朋友们一些帮助，总得一个人，经历一些难捱的日子，你才会变得更加强大！</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 9.1-算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Ajax</title>
      <link href="/2019/09/17/8.1-ajax/001-ajax/"/>
      <url>/2019/09/17/8.1-ajax/001-ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>Ajax(Asynchronous JavaScript and XML) 异步的 JavaScript 和 XML</strong> </p><p><strong>什么是异步呢？</strong></p><p><strong>异步</strong>和<strong>同步</strong>往往是同时被提到的两个概念，这两者都是基于客户端和服务器端相互通信的基础上</p><ul><li><strong>同步</strong>：客户端必须的等待服务器端给予的响应，在此期间不能进行其他操作 </li><li><strong>异步</strong>：与同步不同，客户端不需要等待服务器响应，在此期间可以进行任何操作</li></ul><p>简单概述流程：</p><p>同步：发送请求 → 等待服务器处理 → 返回 </p><p>异步：事件触发 → 服务器处理 （不等待）→ 处理结束</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p><strong>Ajax</strong> 就是一种可以在<strong>无需重新加载整个网页</strong>的情况下 就可以实现与客户端与服务器的<strong>异步通讯</strong></p><p>往简单了说就是：不用刷新整个网页，就能修改网页局部内容</p><p>在之前的开发中，如果每一次局部的小修改都进行页面刷新，这显然对性能会有所降低，而且用户正在执行的操作也会中断</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p><img src="http://image.ideal-20.cn/basic/8.1-01-001.png" alt></p><p>上面图片中基本上所有内容我们都是有一定认识的，只有 XMLHttpRequest 我们似乎是第一次见，那么这又是什么呢？</p><p>XMLHttpRequest 是Ajax的核心，是一个非常重要的对象，我们下面的程序中会反复的用到</p><h2 id="XMLHttpRequest-基本原理"><a href="#XMLHttpRequest-基本原理" class="headerlink" title="XMLHttpRequest 基本原理"></a>XMLHttpRequest 基本原理</h2><p>Ajax中最大的特点 就是请求会<strong>被异步对象XMLHttpRequest进行封装</strong>，然后再<strong>发送到服务器</strong>，接着服务器以<strong>流的形式</strong>将数据返回给浏览器</p><p>也正是因为服务器返回的数据是通过流的形式发送的<strong>，XMLHttpRequest对象会不停的监听服务器</strong>，且得到服务器数据，所以浏览器不需要刷新就可以获取服务器端的数据</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><h3 id="JS实现方式（了解即可）"><a href="#JS实现方式（了解即可）" class="headerlink" title="JS实现方式（了解即可）"></a>JS实现方式（了解即可）</h3><p> <strong>1、创建核心对象</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE7+, Firefox, Chrome, Opera, Safari</span>    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE6, IE5</span>    xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> <strong>2、建立连接</strong></p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajaxServlet?username=tom"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>参数1：请求方式（Get、Post）</p><ul><li>get：请求参数在URL后拼，send方法为空</li><li>post：请求参数在send方法中写</li></ul></li><li><p>参数2：URL</p></li><li><p>参数3：true-异步，false-同步</p><p><strong>3、发送请求</strong></p></li></ul><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>4、获取并处理服务器的响应结果</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//方式：xmlhttp.responseText</span><span class="token comment" spellcheck="true">//时间：响应成功后</span><span class="token comment" spellcheck="true">//onreadystatechange 对象就绪状态改变</span>xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取服务器的响应结果</span>    <span class="token keyword">var</span> responseText <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="jQuery实现方式"><a href="#jQuery实现方式" class="headerlink" title="jQuery实现方式"></a>jQuery实现方式</h2><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span><span class="token string">"ajaxServlet1111"</span> <span class="token punctuation">,</span>     type<span class="token punctuation">:</span><span class="token string">"POST"</span> <span class="token punctuation">,</span>     data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出错啦..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    dataType<span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>url：请求路径</li><li>type：请求方式</li><li>date：请求参数，上例中等价于，<code>data: &quot;username=admin&amp;age=20&quot;</code></li><li>success：响应成功后的回调函数</li><li>error：果请求响应出现错误，会执行的回调函数</li><li>dateType：设置接受到的响应数据的格式</li></ul><h3 id="发送get请求——-get"><a href="#发送get请求——-get" class="headerlink" title="发送get请求——$.get()"></a>发送get请求——$.get()</h3><p>语法：<code>$.get(url, [data], [callback], [type])</code></p><ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul><h3 id="发送post请求——-post"><a href="#发送post请求——-post" class="headerlink" title="发送post请求——$.post()"></a>发送post请求——$.post()</h3><p>语法：<code>$.post(url, [data], [callback], [type])</code></p><ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型?</li></ul><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果文章中有什么不足，或者错误的地方，欢迎大家留言分享想法，感谢朋友们的支持！</p><p>如果能帮到你的话，那就来关注我吧！如果您更喜欢微信文章的阅读方式，可以关注我的公众号</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 8.1-Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Filter</title>
      <link href="/2019/09/17/7.1-fiter/001-filter/"/>
      <url>/2019/09/17/7.1-fiter/001-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>我们可以通过使用前面的技术，做出一些简单的登陆注册以及配合数据库实现对数据增删改查的Demo，程序是基本运行起来了，但是却存在着一个重大的安全问题，那就登陆权限验证，一般来说登陆的正确流程是这样的：用户在客户端发出请求 -&gt; 后台判断是否登录 -&gt; 是则不限制，否则 跳转回登录页面，判断是否登录和我们前面所学习的 Header中获取referer再判断达从而到防盗链的效果有相似的感觉，就是起一个判断过滤的样子，而Filter则是一个更好的解决这样问题的技术，当然强大的功能不止这一点，下面我们就好好来说一说！</p></blockquote><h2 id="一-过滤器概述"><a href="#一-过滤器概述" class="headerlink" title="(一) 过滤器概述"></a>(一) 过滤器概述</h2><p>过滤器，顾名思义就是起到过滤筛选作用的一种事物，只不过相较于现实生活中的过滤器，这里的过滤器过滤的对象是<strong>客户端访问的web资源</strong>，也可以理解为一种预处理手段，对资源进行拦截后，将其中我们认为的杂质（用户自己定义的）过滤，符合条件的放行，不符合的则拦截下来</p><p>当然，过滤器既可以拦截request，也可以拦截返回的response，我们来看一张图</p><p><img src="http://image.ideal-20.cn/basic/7.1-01-001.png" alt></p><h2 id="二-第一个过滤器程序"><a href="#二-第一个过滤器程序" class="headerlink" title="(二) 第一个过滤器程序"></a>(二) 第一个过滤器程序</h2><p><strong>过滤器的本质就是一个实现了 Filter 接口的 Java 类</strong></p><p>我们先自己创建一个类，实现Filter接口（javax.servlet），重写其中的所有方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//放行代码</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们先不探究其中的方法，我们先看一下如何配置filter</p><h2 id="三-filter配置"><a href="#三-filter配置" class="headerlink" title="(三) filter配置"></a>(三) filter配置</h2><h3 id="第一种：web-xml配置"><a href="#第一种：web-xml配置" class="headerlink" title="第一种：web.xml配置"></a>第一种：web.xml配置</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>filterDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>package cn.ideal.web.filter.FilterDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>filterDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 拦截路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>&lt;filter-name&gt;&lt;/filter-name&gt;</code> ：指定filter名字</p><p><code>&lt;filter-class&gt;&lt;/filter-class&gt;</code> ：指定filter全类名（带包名）</p><h4 id="filter-mapping"><a href="#filter-mapping" class="headerlink" title="filter-mapping"></a>filter-mapping</h4><p><code>&lt;filter-name&gt;&lt;/filter-name&gt;</code> ：这里的标签是为了与上面filter中的名字对应，从而指向到对应的文件中</p><p><code>&lt;url-pattern&gt;&lt;/url-pattern&gt;</code> ：<strong>设置filter所拦截的路径 ※ 这里决定了什么样的资源会被过滤器拦截处理</strong></p><h4 id="拦截路径设置"><a href="#拦截路径设置" class="headerlink" title="拦截路径设置"></a>拦截路径设置</h4><table><thead><tr><th>格式</th><th>解释</th></tr></thead><tbody><tr><td>/test.jsp</td><td>只有访问test.jsp这个资源的时候才会执行过滤器</td></tr><tr><td>/test/*</td><td>访问test下所有资源你的时候，执行过滤器</td></tr><tr><td>*.jsp</td><td>所有jsp格式的资源被访问的时候，执行过滤器</td></tr><tr><td>/*</td><td>任意资源被访问，均执行过滤器</td></tr></tbody></table><p>由于过滤器内设置的是比较通用的一些设置，所以一般来说使用 <code>/*</code> 这种格式，不过也可以根据需求情况选择</p><h4 id="拦截方式配置：dispatcher"><a href="#拦截方式配置：dispatcher" class="headerlink" title="拦截方式配置：dispatcher"></a>拦截方式配置：dispatcher</h4><p><strong>拦截方式配置</strong>也就是<strong>资源被访问的形式</strong>，有这么几个属性</p><ul><li><p>REQUEST：默认值，浏览器直接请求资源</p></li><li><p>FORWARD：转发访问资源 : RequestDispatcher.forward();</p></li><li><p>INCLUDE：包含访问资源 : RequestDispatcher.include();</p></li><li><p>ERROR：错误跳转资源 : 被声明式异常处理机制调用的时候</p></li></ul><p><strong>补充</strong>：声明式异常处理即：在web.xml中通过配置来确定不同的异常类型将如何被处理，最后跳转到哪个页面，也就是我们常常看到的一些404错误页面</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--异常的类--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception-type</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--异常发生时跳转的页面--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span></code></pre><h3 id="第二种：使用注解配置"><a href="#第二种：使用注解配置" class="headerlink" title="第二种：使用注解配置"></a>第二种：使用注解配置</h3><p>与servlet相似的配置 ，我们可以指定它的名字和拦截路径</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"filterName="</span>FilterDemo1<span class="token string">",urlPatters="</span><span class="token operator">/</span><span class="token operator">*</span>"<span class="token punctuation">)</span></code></pre><p>但是直接在类上声明注解，显然那我们是不需要指定其名字的，而通过查看源码又可以知道，urlPatters又可以被value指定，而value又可以省略，所以我们可以简写为</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span></code></pre><p>若想在filter注解中配置dispatcher，我们需要设置dispatcherTypes属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">,</span>dispatcherTypes <span class="token operator">=</span><span class="token punctuation">{</span>DispatcherType<span class="token punctuation">.</span>FORWARD<span class="token punctuation">,</span>DispatcherType<span class="token punctuation">.</span>FORWARD<span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h2 id="四-过滤器的生命周期"><a href="#四-过滤器的生命周期" class="headerlink" title="(四) 过滤器的生命周期"></a>(四) 过滤器的生命周期</h2><p>讲完了配置，下面我们就回归主题来说一说过滤器的生命周期，也就是上面实现接口而重写的那些方法们</p><p>首先是 <code>init(FilterConfig config)</code> 方法和 <code>void destroy()</code> 方法，Servlet也有这两个方法，两者分别在<strong>服务器启动和关闭的</strong>时候被<strong>创建以及销毁</strong>，两者均执行一次，用于<strong>加载以及释放资源</strong></p><p>其实就这两个方法来说在Servlet的基础上还是很好理解的</p><p>再者就是我们过滤器的核心方法了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span></code></pre><p>doFilter方法就是我们真正进行拦截的方法，通过前两个参数我们可以知道，不论是Request亦或是Respone我们都可以对其进行过滤操作，那么第三个参数是什么意思呢？</p><p>我们打开FilterChain的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FilterChain</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest var1<span class="token punctuation">,</span> ServletResponse var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>嗯！FilterChain是一个接口，接口内也定义了一个doFilter方法，它存在的意义是什呢？</p><p>这是一种链式结构，我们在这里称作过滤器链，其作用就是为了配置多个过滤器，多个过滤器下的执行流程是这样的</p><p><img src="http://image.ideal-20.cn/basic/7.1-01-002.png" alt></p><p>那么，多个过滤器谁前谁后呢？这还与我们前面的配置有关</p><ul><li>注解配置：按照类名字符串比较，值小的先执行<ul><li>Eg：AFilterDemo 优先于 BFilterDemo</li></ul></li><li>web.xml配置：<code>&lt;filter-mapping&gt;</code>中谁在上面，谁优先执行</li></ul><h4 id="过滤器的简单执行流程"><a href="#过滤器的简单执行流程" class="headerlink" title="过滤器的简单执行流程"></a>过滤器的简单执行流程</h4><ul><li><p>执行过滤器</p></li><li><p>执行放行后的资源，可能是下一个过滤器，也可能是web资源(JSP/Servlet)</p></li><li><p>执行过滤器放行代码<code>chain.doFilter(req, resp);</code>下边的代码</p></li></ul><h2 id="五-Filter的应用"><a href="#五-Filter的应用" class="headerlink" title="(五) Filter的应用"></a>(五) Filter的应用</h2><h3 id="1-登录权限验证"><a href="#1-登录权限验证" class="headerlink" title="(1) 登录权限验证"></a>(1) 登录权限验证</h3><p>我们前面的的知识已经能简单的满足我们对于登录以及简单注册的实现，但是如果我们知道地址，直接通过url访问一些  资源，很显然这是很不合理的，所以我们需要对登录状态进行验证，未登录则转发到的登录界面，登录则可以依据登录状态自由访问一些页面</p><p>我们写一个简单的模拟程序，为了可读性，以及篇幅问题，我们省略数据库连接的部分，采用固定的密码</p><p><strong>这是index.jsp页面，也就是需要登录后才能放开访问权限的页面</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>$Title$</title></head><body><h1>这是首页，只有登录后才能查看</h1></body></html></code></pre><p><strong>这是login.jsp页面，也就是登录页面，非常简单</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Title</title></head><body><form action="/web-test/loginServlet" method="post">    <table>        <tr>            <td>用户名:</td>            <td><input type="text" name="username"></td>        </tr>        <tr>            <td>密码:</td>            <td><input type="password" name="password"></td>        </tr>        <tr>            <td><input type="submit" value="登录"></td>        </tr>    </table></form></body></html></code></pre><p><strong>我们创一个domain 包，写一个User实体，补充其get、set方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面开始编写LoginServlet，也就是处理登录验证问题的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置编码</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取请求参数</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装user对象</span>        User loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginUser<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        loginUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登陆失败</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/failServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登录成功</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>我们根据 user 是否等于 null来判断用户名密码是否正确，那么我们你就来写一下这个返回了一个User对象的login方法</strong></p><p><strong>我们在dao层中创建一个UserDao类，正式一些的项目会写成接口的形式，在impl层中再写实现，为了掩饰我们简化这一步</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> User <span class="token function">login</span><span class="token punctuation">(</span>User loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义真实用户名密码(代替数据库读取)</span>        String trueUsername <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>        String truePassword <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>trueUsername<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>truePassword<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登陆成功</span>            <span class="token keyword">return</span> loginUser<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>关键来了，这也就是我们所讲的过滤器方法，这里所需要注意的就是 登陆成功后，记得写入状态</strong></p><p><strong><code>request.getSession().setAttribute(&quot;user&quot;,user);</code></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> resp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取资源请求路径</span>        String requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//排除包含登录确实所需要的资源，给予放行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestURI<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span> <span class="token operator">||</span> requestURI<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"/loginServlet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不包含，即验证用户是否已经登录</span>            Object user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//登陆了，放行</span>                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//没有登录，跳转回登录页面</span>                request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-敏感词过滤"><a href="#2-敏感词过滤" class="headerlink" title="(2) 敏感词过滤"></a>(2) 敏感词过滤</h3><p>如果我们想要对用户提交的一些信息进行过滤，在servlet中进行一些代码的编写也算一种方法，但是最为合适的还是fiter，它更加通用，下面我们使用代理模式增强request从而使用filter进行敏感词的过滤</p><p><strong>我们就在刚才的index页面上加以修改</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是首页，只有登录后才能查看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/web-test/replaceServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>words<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>敏感字检测<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>我们把传入的参数读取进来</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String words <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"words"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplaceFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse resp<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建代理对象，增强getParameter</span>        ServletRequest proxy_req <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequest<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断是不是getParameter方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"getParameter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取返回值</span>                    String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>proxy_req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取文件真实路径</span>            ServletContext servletContext <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/classes/replace.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取文件</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将每一行数据添加到list中</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 7.1-Fiter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Filter </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-JSP整合</title>
      <link href="/2019/09/17/6.1-jsp/001-jsp-quan-ji/"/>
      <url>/2019/09/17/6.1-jsp/001-jsp-quan-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP-第一篇："><a href="#JSP-第一篇：" class="headerlink" title="JSP 第一篇："></a>JSP 第一篇：</h1><h1 id="概述、原理、周期、指令、行为、内置对象、JavaBean"><a href="#概述、原理、周期、指令、行为、内置对象、JavaBean" class="headerlink" title="概述、原理、周期、指令、行为、内置对象、JavaBean"></a>概述、原理、周期、指令、行为、内置对象、JavaBean</h1><h2 id="一-JSP概述以及简单使用"><a href="#一-JSP概述以及简单使用" class="headerlink" title="(一) JSP概述以及简单使用"></a>(一) JSP概述以及简单使用</h2><p><strong>什么是JSP？</strong></p><p>JSP全名为Java Server Pages，java服务器页面。JSP是一种基于文本的程序，其特点就是HTML</p><p>和Java代码共同存在！</p><p><strong>为什么需要JSP？</strong></p><p>JSP是为了简化Servlet的工作出现的替代品，Servlet输出HTML非常困难，JSP就是替代Servlet输出HTML的</p><p><strong>JSP还有必要学吗</strong>？</p><p>在MVC中，JSP属于展示层，但是JSP却又可以写一定的业务，甚至跑去做数据层的事情，这样开发中就会变得无比混乱，也增加了开发的困难程度，所以将展示层与业务层分开就成为了主流，也就是我们说的前后端分离，但是事无绝对，确实一些比较老的项目仍然在跑jsp，不管你会不会写，你总得碰到能看懂吧，如果已经接近找工作，确实还是以比较流行的技术学习比较好，但是若作为学生，时间还是比较富裕的，很多本科也必然都会讲，学习一下也是挺好的，况且JSP与Servlet也是息息相关的，我认为，学它就是为了知道为什么以后会用别的技术代替它（狗头保命），废话有点多了，还是有一点需要的朋友可以简单看一看，希望给你能有一点点帮助</p><h2 id="二-JSP的工作原理"><a href="#二-JSP的工作原理" class="headerlink" title="(二) JSP的工作原理"></a>(二) JSP的工作原理</h2><p>Tomcat访问任何的资源都是在访问Servlet！，当然了，JSP也不例外！JSP本身就是一种Servlet。为什么说JSP本身就是一种Servlet呢？</p><p>其实JSP在第一次被访问的时候会被编译为HttpJspPage类（该类是HttpServlet的一个子类）</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>简单使用JSP</title></head><body><%    String s = "HelloWorld";    out.println(s);%></code></pre><p>编译过程是这样子的：</p><p>浏览器第一次请求1.jsp时，Tomcat会将1.jsp转化成1_jsp.java这么一个类，并将该文件编译成class文件。编译完毕后再运行class文件来响应浏览器的请求。</p><p>以后访问1.jsp就不再重新编译jsp文件了，直接调用class文件来响应浏览器。当然了，如果Tomcat检测到JSP页面改动了的话，会重新编译的。</p><p>既然JSP是一个Servlet，那JSP页面中的HTML排版标签是怎么样被发送到浏览器的？我们来看下上面1_jsp.java的源码就知道了。原来就是用write()出去的罢了。说到底，JSP就是封装了Servlet的java程序罢了</p><pre class=" language-jsp"><code class="language-jsp">out.write("\r\n");out.write("\r\n");out.write("<html>\r\n");out.write("<head>\r\n");out.write("<title>简单使用JSP</title>\r\n");out.write("</head>\r\n");out.write("<body>\r\n")</code></pre><p>有人可能也会问：JSP页面的代码服务器是怎么执行的？再看回1_jsp.java文件，java代码就直接在类中的service()中</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="三-声明周期"><a href="#三-声明周期" class="headerlink" title="(三) 声明周期"></a>(三) 声明周期</h2><p>JSP也是Servlet，运行时只有一个实例，JSP初始化和销毁时也会调用Servlet的init()和destroy()方法。另外，JSP还有自己初始化和销毁的方法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _el_expressionfactory <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getJspApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _jsp_instancemanager <span class="token operator">=</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>InstanceManagerFactory<span class="token punctuation">.</span><span class="token function">getInstanceManager</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span></code></pre><h2 id="四-指令"><a href="#四-指令" class="headerlink" title="(四) 指令"></a>(四) 指令</h2><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %></code></pre><p>作用：用于配置JSP页面，导入资源文件</p><p>格式： &lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 … %&gt;</p><ul><li><p>contentType：相当于response.setContentType()</p><ul><li><p>设置响应体的mime类型以及字符集</p></li><li><p>设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</p><pre><code>pageEncoding=&quot;characterSet | ISO-8859-1&quot;</code></pre></li></ul></li><li><p>import：导包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"{package.class | package.*}, ..."</span></code></pre></li><li><p>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</p><pre class=" language-jsp"><code class="language-jsp">//主页面<%@ page contentType="text/html;charset=UTF-8" language="java" errorPage="error.jsp" %>//错误后转到的页面<%@ page contentType="text/html;charset=UTF-8" language="java" isErrorPage="true"   %>我们发现地址栏是没有变化的，所以属于是服务器跳转。以上的做法是单个页面设置的，如果我会有很多错误（JSP多的情况下，错误就会多），单个设置太麻烦了！我们可以在web.xml文件中全局设置错误页，只要发生了404错误或者空指针异常的错误都会跳转到error.jsp页面上<error-page>    <error-code>404</error-code>    <location>/error.jsp</location></error-page><error-page>    <exception-type>java.lang.NullPointerException</exception-type>    <location>/error.jsp</location></error-page></code></pre></li><li><p>isErrorPage：标识当前也是是否是错误页面</p><ul><li>true：是，可以使用内置对象exception</li><li>false：否。默认值。不可以使用内置对象exception</li></ul></li></ul><h2 id="五-行为"><a href="#五-行为" class="headerlink" title="(五) 行为"></a>(五) 行为</h2><p>JSP行为（JSP Actions）是一组JSP内置的标签，只书写少量的标记代码就能够使用JSP提供丰富的功能，JSP行为是对常用的JSP功能的抽象和封装。</p><p>JSP内置的标签称之为JSP行为，是为了能够和JSTL标签区分开来。（叫做JSP标签也行）</p><h3 id="1-include-行为"><a href="#1-include-行为" class="headerlink" title="(1) include 行为"></a>(1) include 行为</h3><p>上面已经提及到了，include指令是静态包含，include行为是动态包含。其实include行为就是封装了request.getRequestDispatcher(String url).include(request,response)</p><p>include行为语法是这样的：</p><pre class=" language-jsp"><code class="language-jsp"><jsp:include page=""/>静态包含：<%@ include file="被包含页面"%>动态包含：<jsp:include page="被包含页面" flush="true"></code></pre><pre class=" language-jsp\"><code class="language-jsp\">      <%@ page contentType="text/html;charset=UTF-8" language="java" %>    <html>    <head>        <title>包含页头和页尾进来</title>    </head>    <body>        <jsp:include page="head.jsp"/>        <jsp:include page="foot.jsp"/>    </body></code></pre><p>jsp行为包含文件就是先编译被包含的页面，再将页面的结果写入到包含的页面中（1.jsp)</p><p>当然了，现在有静态包含和动态包含，使用哪一个更好呢？答案是：动态包含。</p><p>动态包含可以向被包含的页面传递参数（用处不大），并且是分别处理包含页面的（将被包含页面编译后得出的结果再写进包含页面）</p><p>【如果有相同名称的参数，使用静态包含就会报错！】！</p><h3 id="2-Param-行为"><a href="#2-Param-行为" class="headerlink" title="(2) Param 行为"></a>(2) Param 行为</h3><p>当使用<code>&lt;jsp:include&gt;和&lt;jsp:forward&gt;</code>行为引入或将请求转发给其它资源时，可以使用<code>&lt;jsp:param&gt;</code>行为向这个资源传递参数</p><h3 id="3-forward-行为"><a href="#3-forward-行为" class="headerlink" title="(3) forward 行为"></a>(3) forward 行为</h3><p>在Servlet中我们使用request.getRequestDispatcher(String url).forward(request,response)进行跳转。其实forward行为就是对其封装！</p><p>我们来看一下forward的语法</p><pre class=" language-jsp"><code class="language-jsp"> <jsp:forward page=""/></code></pre><pre class=" language-jsp"><code class="language-jsp">    <%@ page contentType="text/html;charset=UTF-8" language="java" %>    <html>    <head>        <title>访问1.jsp就跳转到head.jsp</title>    </head>    <body>    <jsp:forward page="head.jsp"/>    </body>    </html></code></pre><p><strong>如果我要传递参数，就要在forward行为嵌套param行为</strong></p><p>在跳转到head.jsp时传入参数username值为aaa</p><pre class=" language-jsp"><code class="language-jsp"><jsp:forward page="head.jsp">    <jsp:param name="username" value="aaa"/> </jsp:forward></code></pre><pre class=" language-jsp"><code class="language-jsp"><%    String ss = request.getParameter("username");%>获取到的参数是：    <%=ss%></code></pre><h3 id="4-directive-行为"><a href="#4-directive-行为" class="headerlink" title="(4) directive 行为"></a>(4) directive 行为</h3><p>directive的中文意思就是指令。该行为就是替代指令<code>&lt;%@%&gt;</code>的语法的</p><pre><code>· &lt;jsp:directive.include file=&quot;&quot;/&gt; 相当于&lt;%@include file=&quot;&quot; %&gt;· jsp:directive.page/ 相当于&lt;%@page %&gt;· jsp:directive.taglib/ 相当于&lt;%@taglib %&gt;</code></pre><p><strong>使用该指令可以让JSP页面更加美观！</strong></p><p>使用scriptlet行为<code>&lt;jsp:scriptlet&gt;</code>替代&lt;%%&gt;是同样一个道理</p><h3 id="5-javaBean-行为"><a href="#5-javaBean-行为" class="headerlink" title="(5) javaBean 行为"></a>(5) javaBean 行为</h3><p>JSP还提供了操作javaBean对象的行为，暂时记住JSP提供了javaBean行为来操作简单类即可！后面详细解释:</p><pre class=" language-jsp"><code class="language-jsp"><jsp:useBean id=""/><jsp:setProperty name="" property=""/><jsp:getProperty name="" property=""/></code></pre><h2 id="六-JSP内置对象（直接使用）"><a href="#六-JSP内置对象（直接使用）" class="headerlink" title="(六) JSP内置对象（直接使用）"></a>(六) JSP内置对象（直接使用）</h2><p>JSP引擎在调用JSP对应的jspServlet时，<strong>会传递或创建9个与web开发相关的对象供jspServlet使用</strong>。JSP技术的设计者为便于开发人员在编写JSP页面时获得这些web对象的引用，特意定义了9个相应的变量，<strong>开发人员在JSP页面中通过这些变量就可以快速获得这9大对象的引用</strong></p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问的多个资源(转发)</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求间</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面(Servlet)的对象  this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>内置对象exception是java.lang.Exception类的对象</td></tr></tbody></table><h2 id="七-四种属性范围"><a href="#七-四种属性范围" class="headerlink" title="(七) 四种属性范围"></a>(七) 四种属性范围</h2><p>到目前为止，我们已经学了4种属性范围了。</p><p><strong>page【只在一个页面中保存属性，跳转页面无效】</strong></p><p><strong>requet【只在一次请求中保存属性，服务器跳转有效，浏览器跳转无效】</strong></p><p><strong>session【在一个会话范围中保存属性，无论何种跳转均有效，关闭浏览器后无效】</strong></p><p><strong>application【在整个服务器中保存，所有用户都可以使用】</strong></p><p>4个内置对象都支持以下的方法：</p><ul><li><strong>setAttribute(String name, Object o )</strong></li><li><strong>getAttribute(String name)</strong></li><li><strong>removeAttribute(String name)</strong></li></ul><h4 id="※-应用场景"><a href="#※-应用场景" class="headerlink" title="※ 应用场景"></a>※ 应用场景</h4><ol><li>request：如果客户向服务器发请求，产生的数据，<strong>用户看完就没用了，</strong>像这样的数据就存在request域,像新闻数据，属于用户看完就没用的</li><li>session：如果客户向服务器发请求，产生的数据，<strong>用户用完了等一会儿还有用</strong>，像这样的数据就存在session域中，像购物数据，用户需要看到自己购物信息，并且等一会儿，还要用这个购物数据结帐</li><li>servletContext：如果客户向服务器发请求，产生的数据，<strong>用户用完了，还要给其它用户用</strong>，像这样的数据就存在servletContext域中，像聊天数据</li></ol><h2 id="八-JavaBean"><a href="#八-JavaBean" class="headerlink" title="(八) JavaBean"></a>(八) JavaBean</h2><p>avaBean就是一个普通的java类，也称之为简单java对象–POJO（Plain Ordinary Java Object），是Java程序设计中一种设计模式，是一种基于 Java 平台的软件组件思想</p><p>JavaBean遵循着特定的写法，通常有以下的规则：</p><p>有无参的构造函数</p><p>成员属性私有化</p><p>封装的属性如果需要被外所操作，必须编写public类型的setter、getter方法</p><p>上面的文字看起来好像很高大上，javaBean其实非常简单，常见的学生类，书籍类就是按照特定写法、规则编写的一个JavaBean对象</p><h4 id="为什么需要使用Javabean"><a href="#为什么需要使用Javabean" class="headerlink" title="为什么需要使用Javabean"></a>为什么需要使用Javabean</h4><p>使用javaBean的好处：封装，重用，可读！</p><p>JaveBean你可以理解为一辆货车，在你的java端和web页面进行数据传递的载体，你当然可以每个变量单独传递，或者使用集合传递，但是<strong>javabean可以使你的数据更有可读性，方便开发时明确变量的意义</strong>，也使其他阅读你代码的人能直接你的意图</p><p>如果bean类与数据库联合使用，一张表使用bean类，可以使你的代码更加简洁高效，易于理解，现在大多数框架都会使用这种机制。</p><h4 id="JSP行为–JavaBean"><a href="#JSP行为–JavaBean" class="headerlink" title="JSP行为–JavaBean"></a>JSP行为–JavaBean</h4><p>JSP技术提供了三个关于JavaBean组件的动作元素，即JSP行为（标签），它们分别为：</p><pre><code>jsp:useBean【在JSP页面中查找javaBean对象或者实例化javaBean对象】jsp:setProperty【设置javaBean的属性】jsp:getProperty【获取javaBean的属性】</code></pre><p><strong>※ JSP：useBean</strong></p><pre class=" language-jsp"><code class="language-jsp"><jsp:useBean></code></pre><p>标签用于在指定的域范围内查找指定名称的JavaBean对象：</p><p>存在则直接返回该JavaBean对象的引用。</p><p>不存在则实例化一个新的JavaBean对象并将它以指定的名称存储到指定的域范围中。</p><p><strong>语法：</strong></p><pre class=" language-jsp"><code class="language-jsp">jsp:useBean id="实例化对象的名称" class="类的全名" scope="保存范围"/></code></pre><p>果JSP不支持<code>&lt;jsp:useBean&gt;</code>这个行为，我们要使用Person类是这样使用的</p><pre class=" language-jsp"><code class="language-jsp">  <%--这里需要导入Person类--%>    <%@ page import="domain.Person" %>    <%@ page contentType="text/html;charset=UTF-8" language="java" %>    <html>    <head>        <title></title>    </head>    <body>    <%        //new出对象        Person person = new Person();        person.setName("admin");        System.out.println(person.getName());    %>    </body></code></pre><p>但是我们使用<code>&lt;jsp:useBean&gt;</code>就非常整洁，不用导包，不用new对象</p><pre class=" language-jsp"><code class="language-jsp"> <%@ page contentType="text/html;charset=UTF-8" language="java" %>    <html>    <head>        <title></title>    </head>    <body>    <jsp:useBean id="person" class="domain.Person" scope="page"/>    <%        person.setName("zhongfucheng");        System.out.println(person.getName());    %>    </body>    </html></code></pre><p>JavaBean中无参的构造函数改成有参的，会出现异常，这是因为<code>&lt;jsp:useBean&gt;</code></p><p>的内部原理是 new了一个无参的构造函数</p><p><strong>※ JSP：setProperty</strong></p><pre class=" language-jsp"><code class="language-jsp"><jsp:setProerty name="对象名称" property="属性名" param="参数名" value="值"></code></pre><p>四种模式</p><pre class=" language-jsp"><code class="language-jsp"><jsp:setProperty name="对象名称" property="*"/>自动匹配<jsp:setProperty name="对象名称" property="属性名称"/>指定属性<jsp:setProperty name="对象名称" property="属性名称" param="参数名称"/>指定参    数【很少用】<jsp:setProperty name="对象名称" property="属性名称" value="内容"/>指定内容【很    少用】</code></pre><p>当我们没有学习到<code>&lt;jsp:setProperty&gt;</code>时，我们获取表单的信息，然后导入到javaBean对象中是这样的一种情况：</p><pre class=" language-jsp"><code class="language-jsp"><jsp:useBean id="person" class="domain.Person" scope="page"/><%    int age = Integer.parseInt(request.getParameter("age"));             person.setAge(age);         System.out.println(person.getAge());%></code></pre><p>而我们使用<code>&lt;jsp:setProperty&gt;</code>后，代码更少，功能更强大</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>jsp<span class="token operator">:</span>useBean id<span class="token operator">=</span><span class="token string">"person"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"domain.Person"</span> scope<span class="token operator">=</span><span class="token string">"page"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>指定属性名称为age<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>jsp<span class="token operator">:</span>setProperty name<span class="token operator">=</span><span class="token string">"person"</span> property<span class="token operator">=</span><span class="token string">"age"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p><strong>代码少很直观的可以看出来，但是强大在什么地方呢？</strong></p><p>表单提交过来的数据都是字符串，在我们没有用<code>&lt;jsp:setProperty&gt;</code>前，我们存储设置int类型或其他非字符串类型的数据是需要强转的！但是<code>&lt;jsp:setProperty&gt;</code>不需要我们强转，它内部自动帮我们转换了！</p><p>下面再通过自动匹配来感受它的强大</p><pre class=" language-jsp"><code class="language-jsp"><jsp:useBean id="person" class="domain.Person" scope="page"/><%--property的值设置为*就代表自动匹配--%><jsp:setProperty name="person" property="*"/><%    System.out.println(person.getAge());    System.out.println(person.getName());%></code></pre><p><strong>为什么Property的值可以将表单传递过来的数据封装到JavaBean对象中？</strong></p><p>JavaBean属性名要和表单的name的名称一致</p><p>是通过反射来做的,调用了内省的方法！</p><p><strong>※ JSP：getProperty</strong></p><pre class=" language-jsp"><code class="language-jsp"><jsp:getProperty name="对象名" property="属性名"/></code></pre><pre class=" language-jsp"><code class="language-jsp"><%--使用<jsp:getProperty>输出--%><jsp:getProperty name="person" property="username"/><jsp:getProperty name="person" property="age"/></code></pre><h1 id="JSP-第二篇："><a href="#JSP-第二篇：" class="headerlink" title="JSP 第二篇："></a>JSP 第二篇：</h1><h1 id="EL运算符：概述、内置对象、数据回显、自定义函数、EL函数库"><a href="#EL运算符：概述、内置对象、数据回显、自定义函数、EL函数库" class="headerlink" title="EL运算符：概述、内置对象、数据回显、自定义函数、EL函数库"></a>EL运算符：概述、内置对象、数据回显、自定义函数、EL函数库</h1><h2 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h2><p>EL：Expression Language 表达式语言</p><p>它的作用就是替换和简化jsp页面中java代码的编写</p><p>EL表达式支持简单的运算符：加减乘除取摸，逻辑运算符。empty运算符（判断是否为null)，三目运算符</p><p><img src="http://image.ideal-20.cn/basic/6.1-01-001.png" alt></p><p><img src="http://image.ideal-20.cn/basic/6.1-01-002.png" alt></p><p><strong>empty运算符可以判断对象是否为null，用作于流程控制！</strong></p><p><strong>三目运算符简化了if和else语句，简化代码书写</strong></p><pre class=" language-jsp"><code class="language-jsp"><%    List<Person> list = null;%>${list==null?"list集合为空":"list集合不为空"}</code></pre><h2 id="二-内置对象"><a href="#二-内置对象" class="headerlink" title="(二) 内置对象"></a>(二) 内置对象</h2><p>EL表达式主要是来对内容的显示，为了显示的方便，EL表达式提供了11个内置对象</p><pre><code>pageContext 对应于JSP页面中的pageContext对象（注意：取的是pageContext对象）pageScope 代表page域中用于保存属性的Map对象requestScope 代表request域中用于保存属性的Map对象 sessionScope 代表session域中用于保存属性的Map对象applicationScope 代表application域中用于保存属性的Map对象param 表示一个保存了所有请求参数的Map对象paramValues 表示一个保存了所有请求参数的Map对象，它对于某个请求参数，返回的是一个string[]header 表示一个保存了所有http请求头字段的Map对象headerValues 同上，返回string[]数组。cookie 表示一个保存了所有cookie的Map对象initParam 表示一个保存了所有web应用初始化参数的map对象</code></pre><h2 id="三-数据回显"><a href="#三-数据回显" class="headerlink" title="(三) 数据回显"></a>(三) 数据回显</h2><pre class=" language-jsp"><code class="language-jsp"><%--模拟数据回显场景--%><%    User user = new User();    user.setGender("male");    //数据回显    request.setAttribute("user",user);%><input type="radio" name="gender" value="male" ${user.gender=='male'?'checked':'' }>男<input type="radio" name="gender" value="female" ${user.gender=='female'?'checked':'' }>女</code></pre><h2 id="四-自定义函数"><a href="#四-自定义函数" class="headerlink" title="(四) 自定义函数"></a>(四) 自定义函数</h2><p>EL自定义函数用于扩展EL表达式的功能，可以让EL表达式完成普通Java程序代码所能完成的功能</p><p><strong>开发HTML转义的EL函数</strong></p><p><strong>我们有时候想在JSP页面中输出JSP代码，但是JSP引擎会自动把HTML代码解析，</strong>    <strong>输出给浏览器。此时我们就要对HTML代码转义。</strong></p><p><strong>步骤：</strong></p><p>编写一个包含静态方法的类（EL表达式只能调用静态方法），该方法很常用，Tomcat都有此方法，可在webappsexamplesWEB-INFclassesutil中找到</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">filter</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> content<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'&lt;'</span><span class="token operator">:</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&amp;lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'>'</span><span class="token operator">:</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&amp;gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'&amp;'</span><span class="token operator">:</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'"'</span><span class="token operator">:</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&amp;quot;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在WEB/INF下创建tld（taglib description）文件，在tld文件中描述自定义函数</p><pre class=" language-jsp"><code class="language-jsp"><?xml version="1.0" encoding="ISO-8859-1"?><taglib xmlns="http://java.sun.com/xml/ns/javaee"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"        version="2.1">    <tlib-version>1.0</tlib-version>    <short-name>myshortname</short-name>    <uri>/zhongfucheng</uri>    <!--函数的描述-->    <function>        <!--函数的名字-->        <name>filter</name>        <!--函数位置-->        <function-class>utils.HTMLFilter</function-class>        <!--函数的方法声明-->        <function-signature>java.lang.String filter(java.lang.String)</function-signature>    </function></taglib></code></pre><p>在JSP页面中导入和使用自定义函数，EL自定义的函数一般前缀为”fn”，uri是”/WEB-INF/tld文件名称”</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html"</span> pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@taglib</span> prefix<span class="token operator">=</span><span class="token string">"fn"</span> uri<span class="token operator">=</span><span class="token string">"/WEB-INF/ideal.tld"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token comment" spellcheck="true">//完成了HTML转义的功能</span>$<span class="token punctuation">{</span>fn<span class="token operator">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"&lt;a href='#'>点这里&lt;/a>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h2 id="五-EL函数库（fn方法库）"><a href="#五-EL函数库（fn方法库）" class="headerlink" title="(五) EL函数库（fn方法库）"></a>(五) EL函数库（fn方法库）</h2><ul><li>由于在JSP页面中显示数据时，经常需要对显示的字符串进行处理，SUN公司针对于一些常见处理定义了一套EL函数库供开发者使用。</li><li>其实EL函数库就是fn方法库，是JSTL标签库中的一个库，也有人称之为fn标签库，但是该库长得不像是标签，所以称之为fn方法库</li><li>既然作为JSTL标签库中的一个库，要使用fn方法库就需要导入JSTL标签！要想使用JSTL标签库就要导入jstl.jar和standard.jar包！</li><li>所以，要对fn方法库做测试，首先导入开发包（jstl.jar、standard.jar)</li></ul><p><strong>在JSP页面中指明使用标签库</strong></p><pre class=" language-jsp"><code class="language-jsp"><%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %></code></pre><h1 id="JSP-第三篇："><a href="#JSP-第三篇：" class="headerlink" title="JSP 第三篇："></a>JSP 第三篇：</h1><h1 id="JSTLd的简单认识、三个常用对象"><a href="#JSTLd的简单认识、三个常用对象" class="headerlink" title="JSTLd的简单认识、三个常用对象"></a>JSTLd的简单认识、三个常用对象</h1><p>JSTL全称为 JSP Standard Tag Library 即JSP标准标签库</p><p>JSTL作为最基本的标签库，提供了一系列的JSP标签，实现了基本的功能：集合的遍历、数据的输出、字符串的处理、数据的格式化等等！</p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a><strong>为什么使用</strong></h2><p>EL表达式可以很方便地引用一些JavaBean以及其属性但是仍然不够完美，它不能遍历集合，做逻辑的控制。</p><p>Scriptlet的可读性，维护性，重用性都十分差！JSTL与HTML代码十分类似，遵循着XML标签语法，使用JSTL让JSP页面显得整洁，可读性非常好，重用性非常高，可以完成复杂的功能！</p><p>在JSP中不推荐使用scriptlet输出，推荐使用JSP标签</p><h2 id="使用JSTL标签库步骤"><a href="#使用JSTL标签库步骤" class="headerlink" title="使用JSTL标签库步骤"></a>使用JSTL标签库步骤</h2><ul><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：<code>&lt;%@ taglib %&gt;</code></li><li>使用标签</li></ul><h2 id="Core标签库"><a href="#Core标签库" class="headerlink" title="Core标签库"></a><strong>Core标签库</strong></h2><p><strong>core标签库是JSTL的核心标签库，实现了最基本的功能：流程控制、迭代输出等操作</strong>！</p><p><strong>core标签库的前缀一般是c</strong></p><p><strong>常用的三个JSTL标签</strong></p><h3 id="一-c-if"><a href="#一-c-if" class="headerlink" title="(一) c:if"></a>(一) c:if</h3><p>属性：</p><p>test 必须属性，接受boolean表达式</p><p>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</p><ul><li>注意：c:if 标签没有else情况，想要else情况，则可以在定义一个c:if标签</li></ul><pre class=" language-jsp"><code class="language-jsp"><%--如果带过来的名字是admin，那么可以登陆--%>    <c:if test="${param.name=='admin'}">        用户名：<input type="text" name="username"><br>        密码：<input type="password" name="password"><br>        <input type="submit" value="登陆">    </c:if>    <%--如果带过来的名字是admin888，那么就是注册--%>    <c:if test="${param.name=='admin888'}">        用户名：<input type="text" name="username"><br>        密码：<input type="password" name="password"><br>        <input type="submit" value="注册">    </c:if></code></pre><h3 id="二-c-choose"><a href="#二-c-choose" class="headerlink" title="(二) c:choose"></a>(二) c:choose</h3><p>它相当于java代码的switch语句</p><p>使用choose标签声明，相当于switch声明<br>使用when标签做判断，相当于case<br>使用otherwise标签做其他情况的声明，相当于default</p><pre class=" language-jsp"><code class="language-jsp"><c:choose>        <c:when test="${param.name=='admin'}">            欢迎管理员        </c:when>        <c:when test="${param.name=='user'}">            欢迎用户        </c:when>        <c:otherwise>            识别不出你是谁        </c:otherwise></c:choose></code></pre><h3 id="三-c-forEach"><a href="#三-c-forEach" class="headerlink" title="(三) c:forEach"></a>(三) c:forEach</h3><p>forEach为循环标签，相当于Java中的while和for</p><p>之前我们在使用EL表达式获取到集合的数据，遍历集合都是用scriptlet代码循环，现在我们学了forEach标签就可以舍弃scriptlet代码</p><p>向Session中设置属性，属性的类型是List集合</p><p>向Session中设置属性，属性的类型是List集合</p><p>遍历session属性中的List集合,items：即将要迭代的集合。var：当前迭代到的元素</p><pre class=" language-jsp"><code class="language-jsp"> <%    List list = new ArrayList<>();    list.add("admin");    list.add("zhangsan");    list.add("wanwu");    session.setAttribute("list", list);%>===================================================== <c:forEach  var="list" items="${list}" >    ${list}<br></c:forEach></code></pre><p>Map对象有稍微地不一样保存的不是每个迭代的对象，而是Map.Entry</p><pre class=" language-jsp"><code class="language-jsp"> <%    Map map = new HashMap();    map.put("1", "zhongfucheng");    map.put("2", "xiaohong");    map.put("3", "xiaoming");    session.setAttribute("map",map);%><c:forEach  var="me" items="${map}" >       ${me.key}  ${me.value}<br></c:forEach></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 6.1-JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-会话技术</title>
      <link href="/2019/09/17/5.3-hui-hua-ji-zhu/002-hui-hua-ji-zhu-cookies-session-xiang-jie/"/>
      <url>/2019/09/17/5.3-hui-hua-ji-zhu/002-hui-hua-ji-zhu-cookies-session-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="会话技术、Cookies、Session详解"><a href="#会话技术、Cookies、Session详解" class="headerlink" title="会话技术、Cookies、Session详解"></a>会话技术、Cookies、Session详解</h1><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h3 id="一-概述、用途以及分类"><a href="#一-概述、用途以及分类" class="headerlink" title="(一) 概述、用途以及分类"></a>(一) 概述、用途以及分类</h3><h4 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="(1) 基本概述"></a>(1) 基本概述</h4><p><strong>概述：会话是浏览器和服务器之间的多次请求和响应</strong></p><p>也就是说，从浏览器<strong>访问服务器开始</strong>，到<strong>访问服务器结束</strong>，<strong>浏览器关闭为止</strong>的这段时间内容产生的<strong>多次请求和响应</strong>，合起来叫做浏览器和服务器之间的一次会话</p><h4 id="2-为什么要使用会话技术呢？"><a href="#2-为什么要使用会话技术呢？" class="headerlink" title="(2) 为什么要使用会话技术呢？"></a>(2) 为什么要使用会话技术呢？</h4><p>实际上会话问题解决的还是客户端与服务器之间的通信问题，通过一些会话技术，可以将每个用户的数据以例如cookie/session的形式存储，方便以后用户访问web资源的时候使用</p><blockquote><p>假定场景：A和B两人在某个网上购物商场登陆账号后，A买了一个HHKB的键盘，而B则购买了一把民谣吉他，这些信息都会被保存下来</p><p>用途是：保存账户信息，登录时询问日后是否自动登录，或者根据之前浏览，购买过的商品，分析用户喜欢什么类型的商品，做出精准推送</p></blockquote><p>那么能不能用我们之前学过的 HttpServletRequest 对象和 ServletContext 对象来保存这些数据呢？答案是否定的</p><p><strong>不能用 HttpServletRequest 的原因：</strong>我们的一次会话中，存在多次请求和响应，而浏览器客户端的每一次请求都会产生一个 HttpServletRequest 对象，它只会保存此次请求的信息，例如放入购物车与购买付款是不同的请求，很显然数据没有得到很好的保存处理</p><p><strong>不能用 ServletContext 的原因：</strong>ServletContext对象是被整个web应用所共享的，将数据都存到这里，无疑会无法区分具体信息的归属</p><h4 id="3-分类"><a href="#3-分类" class="headerlink" title="(3) 分类"></a>(3) 分类</h4><p>客户端会话技术 —— Cookie</p><p>服务器会话技术 —— Session</p><h2 id="Cookie-技术"><a href="#Cookie-技术" class="headerlink" title="Cookie 技术"></a>Cookie 技术</h2><h3 id="一-基本认识"><a href="#一-基本认识" class="headerlink" title="(一) 基本认识"></a>(一) 基本认识</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><p>Cookies 可以简单的理解为服务器暂存在你浏览器中的一些信息文件，它将你在网站上所输入的一些内容，或者一些选项记录下来，当下一次你访问同一个网站的时候，服务器就会主动去查询这个cookie资料，如果存在的话，将会根据其中的内容，提供一些特别的功能，例如记住账号密码等</p><p>总结一下就是：</p><ul><li>网页之间的交互是通过HTTP协议传输数据的，而Http协议是无状态的协议 (数据提交后，浏览器和服务器的链接就会关闭，在此交互的时候    需要重新建立新的连接)</li><li>服务器无法确认用户的信息，于是给每一个用户发一个通行证，通过此确认用户的信息</li></ul><h4 id="2-具体流程"><a href="#2-具体流程" class="headerlink" title="(2) 具体流程"></a>(2) 具体流程</h4><p>浏览器访问服务器，如果服务器需要记录该用户的状态，就用response向浏览器发送一个cookie，浏览器会把Cookie保存起来。当浏览器再次访问服务器的时候，浏览器会把请求的网址以及Cookie一同提交给服务器</p><h4 id="3-规范"><a href="#3-规范" class="headerlink" title="(3) 规范"></a>(3) 规范</h4><ul><li><p>Cookie大小上限为4KB；</p></li><li><p>一个服务器最多在客户端浏览器上保存20个Cookie；</p></li><li><p>一个浏览器最多保存300个Cookie</p></li></ul><pre><code>面的数据是HTTP对Cookie的规范，但是现在一些浏览器可能会对Cookie规范    做了一些扩展，例如每个Cookie的大小为8KB，最多可保存500个Cookie等</code></pre><p>不同的浏览器之间是不共享Cookie的</p><h3 id="二-常用-API"><a href="#二-常用-API" class="headerlink" title="(二) 常用 API"></a>(二) 常用 API</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于在其响应头中增加一个相应的Set-Cookie头字段</span>addCookie<span class="token comment" spellcheck="true">//用于获取客户端提交的Cookie</span>GetCookie<span class="token keyword">public</span> <span class="token function">Cookie</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该方法设置与 cookie 关联的值。</span>setValue<span class="token comment" spellcheck="true">//该方法获取与 cookie 关联的值。</span>getValue<span class="token comment" spellcheck="true">//该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie只会在当前 session 会话中持续有效。</span>setMaxAge<span class="token comment" spellcheck="true">//该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭</span>getMaxAge<span class="token comment" spellcheck="true">//该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。</span>setPath<span class="token comment" spellcheck="true">//该方法获取 cookie 适用的路径。</span>getPath<span class="token comment" spellcheck="true">//该方法设置 cookie 适用的域</span>setDomain<span class="token comment" spellcheck="true">//该方法获取 cookie 适用的域</span>getDomain</code></pre><h4 id="1-注意："><a href="#1-注意：" class="headerlink" title="(1) 注意："></a>(1) 注意：</h4><ul><li>Cookie具有不可跨域名性</li><li>ookie保存中文乱码问题：中文属于Unicode字符，英文数据Ascii字符，中文占4个字符或者3个字符，英文占2个字符，Cookie使用Unicode字符时需要对Unicode字符进行编码</li></ul><pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-有效期"><a href="#2-有效期" class="headerlink" title="(2) 有效期"></a>(2) 有效期</h4><p>通过setMaxAge()方法可以设置Cookie的有效期</p><ul><li>如果MaxAge为正数，浏览器会把Cookie写到硬盘中，只要还在MaxAge秒之前，登录网站时该Cookie就有效【不论关闭了浏览器还是电脑】<br>   如果MaxAge为负数，Cookie是临时性的，尽在本浏览器内有效，关闭浏览器Cookie    就失效了，Cookie不会写到硬盘中。Cookie默认值就是 -1 </li><li>如果MaxAge为0，则表示删除该Cookie</li></ul><h4 id="3-删除和修改"><a href="#3-删除和修改" class="headerlink" title="(3) 删除和修改"></a>(3) 删除和修改</h4><p>Cookie存储的方式类似于Map集合，分为名字和值，只不过两者都是String类型的</p><p><strong>修改</strong></p><pre class=" language-java"><code class="language-java">String name <span class="token operator">=</span> <span class="token string">"刮风这天"</span>；Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>删除</strong></p><pre class=" language-java"><code class="language-java">String name <span class="token operator">=</span> <span class="token string">"刮风这天"</span>；Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"country"</span><span class="token punctuation">,</span>URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>printWriter<span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token string">"Cookie已经被删除了"</span><span class="token punctuation">)</span></code></pre><h3 id="三-Cookie的域名"><a href="#三-Cookie的域名" class="headerlink" title="(三) Cookie的域名"></a>(三) Cookie的域名</h3><p>Cookie的domain属性决定运行访问Cookie的域名，Deomain的值规定为“.域名”</p><p>Cookie的隐私安全机制决定Cookie是不可跨域名的。及时是同一级域名，不同的二级域名也不能交接，eg：<code>www.ideal.com 和 www.image..com</code></p><p>如果我希望一级域名相同的网页之间的Cookie之间可以互相访问，需要使用到domain方法</p><pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span>"<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>printWriter<span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token string">"使用www.ideal.com域名添加了一个Cookie，只要一级域名是ideal.com即可访问"</span><span class="token punctuation">)</span></code></pre><h3 id="四-Cookie的路径"><a href="#四-Cookie的路径" class="headerlink" title="(四) Cookie的路径"></a>(四) Cookie的路径</h3><p>Cookie的path属性决定允许访问Cookie的路径</p><p>一般来说，Cookie发布出来，整个网页的资源都可以使用，但是如果只需要某一个Servlet可以获取到Cookie，其他的资源不能或不需要获取</p><pre class=" language-java"><code class="language-java">Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>"<span class="token operator">/</span>Servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>printWriter<span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token string">"该Cookie只能在Servlet1中可以访问到"</span><span class="token punctuation">)</span></code></pre><h3 id="五-Cookie的安全属性"><a href="#五-Cookie的安全属性" class="headerlink" title="(五) Cookie的安全属性"></a>(五) Cookie的安全属性</h3><p>HTTP协议不仅是无状态的，而且是不安全的！如果不希望Cookie在非安全协议中传输，可以设置Cookie的secure属性为true，浏览器只会在HTTPS和SSL等安全协议中传输该Cookie</p><p>设置secure属性不会将Cookie的内容加密，如果想保证安全，最好使用md5算法加密</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置响应的消息体的数据格式以及编码</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有Cookie</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">////没有cookie为lastTime</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历cookie数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cookies<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取cookie的名称</span>                String name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断名称是否是：lastTime</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//非第一次访问</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有访问记录的time</span>                    <span class="token comment" spellcheck="true">//设置Cookie的value</span>                    <span class="token comment" spellcheck="true">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span>                    Date date  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String str_date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编码前："</span><span class="token operator">+</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//URL编码</span>                    str_date <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编码后："</span><span class="token operator">+</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置cookie的存活时间</span>                    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个月</span>                    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//响应数据</span>                    <span class="token comment" spellcheck="true">//获取Cookie的value，时间</span>                    String value <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解码前："</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//URL解码：</span>                    value <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解码后："</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>欢迎回来，您上次访问时间为:"</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">==</span> null <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//没有，第一次访问</span>            <span class="token comment" spellcheck="true">//设置Cookie的value</span>            <span class="token comment" spellcheck="true">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span>            Date date  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str_date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编码前："</span><span class="token operator">+</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//URL编码</span>            str_date <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str_date<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编码后："</span><span class="token operator">+</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>            Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">,</span>str_date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置cookie的存活时间</span>            cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个月</span>            resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>您好，欢迎您首次访问&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Character[32]在ASSCI码中代表空格 所以在日期表示格式中尽量不要出现空格，但若想要要求出现空格，或者特殊字符，</p><p>此外呢，我么你还可以做一个模拟显示上次浏览过商品记录的Demo，自行练习</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h3><p>Session是另一种记录浏览器状态的机制，Cookie保存在浏览器中，Session保存在服务器中。用户使用浏览器访问服务器的时候，服务把用户的信息，以某种形式记录在服务器，这就是Session</p><p>为何使用Session因为Session可以存储对象，Cookie只能存储字符串可以解决很多Cookie解决不了的问题</p><h3 id="二-API"><a href="#二-API" class="headerlink" title="(二) API"></a>(二) API</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取Session被创建时间</span><span class="token keyword">long</span> <span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取Session的id</span>String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回Session最后活跃的时间</span><span class="token keyword">long</span> <span class="token function">getLastAccessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取ServletContext对象</span>ServletContext <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置Session超时时间</span><span class="token keyword">void</span> <span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取Session超时时间</span><span class="token keyword">int</span> <span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取Session属性</span>Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String var1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取Session所有的属性名</span>Enumeration <span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置Session属性</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String var1<span class="token punctuation">,</span> Object var2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//移除Session属性</span><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String var1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//销毁该Session</span><span class="token keyword">void</span> <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//该Session是否为新的</span><span class="token keyword">boolean</span> <span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Session有着request和ServletContext类似的方法。其实<strong>Session也是一个域对象</strong>。Session作为一种记录浏览器状态的机制，<strong>只要Session对象没有被销毁，Servlet之间就可以通过Session对象实现通讯</strong></p><p><strong>设置</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpSession httpSession <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpSession<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>获取</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpSession httpSession <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> httpSession<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="三-生命周期和有效期"><a href="#三-生命周期和有效期" class="headerlink" title="(三) 生命周期和有效期"></a>(三) 生命周期和有效期</h3><p>用户第一次访问服务器Servlet，jsp等动态资源就会自动创建Session，Session对象保存在内存里，这也就为什么上面的例子可以直接使用request对象获取得到Session对象</p><p>如果访问HTML,Image等静态资源Session不会被创建</p><p>Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，无论是否对Session进行读写，服务器都会认为Session活跃了一次。</p><p>由于会有越来越多的用户访问服务器，因此Session也会越来越多。为了防止内存溢出，服务器会把长时间没有活跃的Session从内存中删除，这个时间也就是Session的超时时间</p><p>Session的超时时间默认是30分钟，有三种方式可以对Session的超时时间进行修改</p><p><strong>第一种方式：</strong>在tomcat/conf/web.xml文件中设置，时间值为20分钟，所有的WEB应用都有效————<code>&lt;session-timeout&gt;20&lt;session-timeout&gt;</code></p><p><strong>第二种方式：</strong>在单个的web.xml文件中设置，对单个web应用有效，如果有冲突，以自己的web应用为准</p><p><strong>第三种方式：通过setMaxInactiveInterval()方法设置</strong></p><pre><code>httpSession.setMaxInactiveInterval(60);</code></pre><h3 id="四-Session-和-Cookie的小区别"><a href="#四-Session-和-Cookie的小区别" class="headerlink" title="(四) Session 和 Cookie的小区别"></a>(四) Session 和 Cookie的小区别</h3><ul><li>Session周期指的是不活动的时间，如果我们设置Session是10s，在10s内，没有访问session，session中属性失效，如果在9s的时候，你访问了session，则会重新计时</li><li>如果重启了tomcat，或者reload web应用，或者关机了，Session也会失效，我们也可以通过函数让Session失效，invalidate()该方法是让Session中的所有属性失效，常常用于安全退出</li><li>如果你希望某个Session属性失效，可以使用方法removeAttribute</li></ul><ul><li>Cookie的生命周期就是按累积的时间来算的，不管用户有没有访问过Session</li></ul><h3 id="五-Session"><a href="#五-Session" class="headerlink" title="(五) Session"></a>(五) Session</h3><p>问题：我再Aservlet中设置了Session属性，在Bservlet中获取A的属性</p><p>在浏览器中新建一个页面再次访问Bservlet 报空指针异常</p><p>现在问题来了：服务器是如何实现一个session为一个用户浏览器服务的？换个说法：为什么服务器能够为不同的用户浏览器提供不同session？</p><p>HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一个用户。于是乎：服务器向用户浏览器发送了一个名为JESSIONID的Cookie，它的值是Session的id值。其实Session依据Cookie来识别是否是同一个用户。</p><p>简单来说：Session 之所以可以识别不同的用户，依靠的就是Cookie</p><p>该Cookie是服务器自动颁发给浏览器的，不用我们手工创建的。该Cookie的maxAge值默认是-1，也就是说仅当前浏览器使用，不将该Cookie存在硬盘中</p><p><strong>流程概述：</strong> </p><ul><li>访问Aservlet时，服务器就会创建一个Session对象，执行我们的程序代码，执行我们的程序代码，并自动颁发一个Cookie给用户浏览器</li><li>当我用同一个浏览器访问BServlet的时候，浏览器会把Cookie的值通过Http协议带过去给服务器，服务器就知道用哪一个Session</li><li>而当我们使用新会话的浏览器访问BServlet的时候，该新浏览器并没有Cookie，服务器无法辨认使用哪一个Session，所以获取不到值。</li></ul><h3 id="六-浏览器禁用Cookie后Session的使用"><a href="#六-浏览器禁用Cookie后Session的使用" class="headerlink" title="(六) 浏览器禁用Cookie后Session的使用"></a>(六) 浏览器禁用Cookie后Session的使用</h3><p>遇到两种情况：1.用户浏览器禁用了Cookie绝大多数手机浏览器都不支持Cookie</p><p>Java Web提供了解决方法：URL地址重写</p><p>HttpServletResponse类提供了两个URL地址重写的方法：</p><pre class=" language-java"><code class="language-java"><span class="token function">encodeURL</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span><span class="token function">encodeRedirectURL</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span></code></pre><p>需要值得注意的是：这两个方法会自动判断该浏览器是否支持Cookie，如果支持Cookie，重写后的URL地址就不会带有jsessionid了【当然了，即使浏览器支持Cookie，第一次输出URL地址的时候还是会出现jsessionid（因为没有任何Cookie可带）】</p><p>例子</p><pre class=" language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"/web-01/Servlet5"</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">encodeURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>URL地址重写的原理：</p><p>将Session的id信息重写到URL地址汇总，服务器解析重写后URL获取Session的id，这样一来即使浏览器禁用掉了Cookie，但是Session的id通过服务端传递，还是可以使用Session来记录用户的状态。</p><h3 id="七-Session案例"><a href="#七-Session案例" class="headerlink" title="(七) Session案例"></a>(七) Session案例</h3><p><strong>案例一：使用Session完成用户简单登录</strong></p><p>先创建User类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>各种set get方法</code></pre><p>使用简单的集合模拟一个数据库</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDB</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过用户名密码查找用户</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">find</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>表单提交我们写在jsp里面(模仿即可后期说jsp)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDB</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"888"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过用户名密码查找用户</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">find</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>获取表单提交的数据，查找数据库是否有相对应的用户名和密码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> UserDB<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果找不到，就是用户名或者密码出错了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"用户名或者密码错误，登陆失败 ！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//标志着用户已经登录</span>        HttpSession httpSession <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpSession<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//跳转到其他页面，告诉用户已经登录成功</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">encodeURL</span><span class="token punctuation">(</span><span class="token string">"test.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://image.ideal-20.cn/basic/5.3-02-001.png" alt></p><p><img src="http://image.ideal-20.cn/basic/5.3-02-002.png" alt></p><p><img src="http://image.ideal-20.cn/basic/5.3-02-003.png" alt></p><p><strong>案例二：利用Session防止表单重复提交</strong></p><p>重复提交的危害：</p><p>在投票的网页上不停地提交，实现了刷票的效果。</p><p>注册多个用户，不断发帖子，扰乱正常发帖秩序。</p><p>常见的两种重复提交</p><p>第一种：后退再提交</p><p><img src="http://image.ideal-20.cn/basic/5.3-02-004.png" alt></p><p>第二种：网络延迟，多次点击提交按钮</p><p>略图</p><p>解决方案：</p><p><strong>网络延迟问题：</strong></p><p>对于第二种网络延而造成多次提交数据给服务器，其实是客户端的问题，我们可以使用javaScript来防止</p><p>→ 当用户第一次点击提交按钮是，把数据提交给服务器，当用户再次点击提交按钮时，就不把数据提交给服务器了</p><p>监听用监听事件。只能让用户提交一次表单：</p><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>表单提交</title><script type="text/javascript">    //定义一个全局标识量：是否已经提交过表单数据    var isCommitted = false;    function doSubmit() {        //false表示的是没有提交过，于是就可以让表单提交给Servlet        if (isCommited == false){            is Commited = true;            return true;        }else{            return false;        }        }</script></head><body>    <form action="/web-01/Lservlet" method="post" onsubmit="return doSubmit()">        用户名：<input type="text" name="username"><br /> <input            type="submit" value="提交">    </form></body></html></code></pre><p><strong>刷新后退再提交问题：</strong></p><p>我们知道Session可以用来标识一个用户是否登陆了。Session的原理也说了：不同的用户浏览器会拥有不同的Session。而request和ServletContext为什么就不行呢？request的域对象只能是一次http请求，提交表单数据的时候request域对象的数据取不出来。ServletContext代表整个web应用，如果有几个用户浏览器同时访问，ServletContext域对象的数据会被多次覆盖掉，也就是说域对象的数据就毫无意义了。</p><p>此时，我们就想到了，在表单中还有一个隐藏域，可以通过隐藏域把数据交给服务器。</p><p>A：判断Session域对象的数据和jsp隐藏域提交的数据是否对应。</p><p>B：判断隐藏域的数据是否为空【如果为空，就是直接访问表单处理页面的Servlet】</p><p>C：判断Session的数据是否为空【servlet判断完是否重复提交，最好能立马移除Session的数据，不然还没有移除的时候，客户端那边儿的请求又来了，就又能匹配了，产生了重复提交。如果Session域对象数据为空，证明已经提交过数据了！】</p><p>D：我们向Session域对象的存入数据究竟是什么呢？简单的一个数字？好像也行啊。因为只要Session域对象的数据和jsp隐藏域带过去的数据对得上号就行了呀，反正在Servlet上判断完是否重复提交，会立马把Session的数据移除掉的。更专业的做法是：向Session域对象存入的数据是一个随机数【Token–令牌】</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">TokenProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> TokenProcessor TOKEN_PROCESSOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TokenProcessor <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> TOKEN_PROCESSOR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">makeToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个随机生成出来的Token的长度是不确定的</span>        String token <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 我们想要随机数的长度一致，就要获取到数据指纹</span>            MessageDigest messageDigest <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"md5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> md5 <span class="token operator">=</span> messageDigest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果我们直接 return new String(md5)出去，得到的随机数会乱码</span>            <span class="token comment" spellcheck="true">// 因为随机数是任意的01010101010，在转换成字符串的时候，会差gb2312的码表</span>            <span class="token comment" spellcheck="true">// gb2312码表不一定支持该二进制数据，得到的就是乱码</span>            <span class="token comment" spellcheck="true">// 于是经过base64编码成了明文的数据</span>            BASE64Encoder base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>创建Token随机数，利用getRequestDispatcher跳转到jsp页面（地址还是Servlet的）</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生出随机数</span>        TokenProcessor tokenProcessor <span class="token operator">=</span> TokenProcessor<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> tokenProcessor<span class="token punctuation">.</span><span class="token function">makeToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将随机数存进Session中</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 跳转到显示页面</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/login3.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Jsp隐藏域获取到Session的值</strong></p><pre class=" language-jsp"><code class="language-jsp"><form action="/web-01/Mservlet" >    用户名：<input type="text" name="username">    <input type="submit" value="提交" id="button">    <%--使用EL表达式取出session中的Token--%>    <input type="hidden" name="token" value="${token}" ></form></code></pre><p><strong>在处理表单提交页面中判断：jsp隐藏域是否有带值过来，Session中的值是否为空，Session中的值和jsp隐藏域带过来的值是否相等</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String serverValue <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String clienValue <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serverValue <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> clienValue <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> serverValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clienValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            printWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"处理请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 清除Session域对象数据</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            printWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"请不要重复提交数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://image.ideal-20.cn/basic/5.3-02-005.png" alt></p><p><strong>实现原理是非常简单的</strong></p><p>在session域中存储一个token</p><p>然后前台页面的隐藏域获取得到这个token</p><p>在第一次访问的时候，我们就判断seesion有没有值，如果有就比对。对比正确后我们就处理请求，接着就把session存储的数据给删除了</p><p>等到再次访问的时候，我们session就没有值了，就不受理前台的请求了！</p><h3 id="八-Session和Cookie的区别"><a href="#八-Session和Cookie的区别" class="headerlink" title="(八) Session和Cookie的区别"></a>(八) Session和Cookie的区别</h3><p><strong>从存储方式上比较</strong></p><p>Cookie只能存储字符串，如果要存储非ASCII字符串还要对其编码。</p><p>Session可以存储任何类型的数据，可以把Session看成是一个容器</p><p><strong>从隐私安全上比较</strong></p><p>Cookie存储在浏览器中，对客户端是可见的。信息容易泄露出去。如果使用Cookie，最好将Cookie加密</p><p>Session存储在服务器上，对客户端是透明的。不存在敏感信息泄露问题。</p><p><strong>从有效期上比较</strong></p><p>Cookie保存在硬盘中，只需要设置maxAge属性为比较大的正整数，即使关闭浏览器，Cookie还是存在的</p><p>Session的保存在服务器中，设置maxInactiveInterval属性值来确定Session的有效期。并且Session依赖于名为JSESSIONID的Cookie，该Cookie默认的maxAge属性为-1。如果关闭了浏览器，该Session虽然没有从服务器中消亡，但也就失效了。</p><p><strong>从对服务器的负担比较</strong></p><p>Session是保存在服务器的，每个用户都会产生一个Session，如果是并发访问的用户非常多，是不能使用Session的，Session会消耗大量的内存。</p><p>Cookie是保存在客户端的。不占用服务器的资源。像baidu、Sina这样的大型网站，一般都是使用Cookie来进行会话跟踪。</p><p><strong>从浏览器的支持上比较</strong></p><p>如果浏览器禁用了Cookie，那么Cookie是无用的了！</p><p>如果浏览器禁用了Cookie，Session可以通过URL地址重写来进行会话跟踪。</p><p><strong>从跨域名上比较</strong></p><p>Cookie可以设置domain属性来实现跨域名</p><p>Session只在当前的域名内有效，不可跨域名</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 5.3-会话技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> 会话技术 </tag>
            
            <tag> Cookies </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-HTTP协议</title>
      <link href="/2019/09/17/5.3-hui-hua-ji-zhu/001-http-xie-yi/"/>
      <url>/2019/09/17/5.3-hui-hua-ji-zhu/001-http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><blockquote><p>HTTP (HyperText Transfer Protocol) 超文本传输协议，它是一个简单的请求-响应协议 ，它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应 ，所有的WWW文件都遵循这个标准，它是TCP/IP中的一个应用层协议</p></blockquote><h3 id="一-怎么理解-HTTP-协议呢？"><a href="#一-怎么理解-HTTP-协议呢？" class="headerlink" title="(一) 怎么理解 HTTP 协议呢？"></a>(一) 怎么理解 HTTP 协议呢？</h3><p>当我们在浏览器地址栏上输入URL后，浏览器会通过DNS解析到对应IP上，浏览器而根据这个IP将IP地址与WEb服务器进行通信，这个通信的协议就是HTTP协议，说白了，HTTP协议就是规定了客户端和服务器端之间通讯的一种规范和格式，只有两者都遵循这个协议，两者在接受和响应请求的时候才能达到一致</p><h3 id="二-HTTP请求"><a href="#二-HTTP请求" class="headerlink" title="(二) HTTP请求"></a>(二) HTTP请求</h3><p>浏览器向服务器请求某个web资源，称浏览器向服务器发送了一个http请求（客户端 –&gt; 服务器）</p><p><strong>请求格式：</strong></p><p>1、请求首行</p><p>2、请求头</p><p>3、空行</p><p>4、请求体（或称之为请求正文）</p><h4 id="1-请求行"><a href="#1-请求行" class="headerlink" title="(1) 请求行"></a>(1) 请求行</h4><p>常见的请求方法有<strong>GET和POST</strong></p><p>在浏览器<strong>地址栏中发送请求</strong>，以及<strong>点击超链接</strong>都是<strong>GET</strong>请求</p><p><strong>提交表单</strong>既可以使用GET，也可以使用POST方式，<strong>推荐使用POST方式</strong>，<strong>查询数据的时候推荐使用GET方式</strong></p><p>GET：没有请求体，但空行是存在的，附带的参数有限制，数据容量不能超过1k</p><p>POST：存在请求体，可以在请求的实体内容中向服务器发送数据，传送的数据量是无限制的</p><h4 id="2-请求头"><a href="#2-请求头" class="headerlink" title="(2) 请求头"></a>(2) 请求头</h4><ul><li><p>Accept-Charset: ISO-8859-1 ：客户端告诉服务器，所支持的字符集格式</p></li><li><p>Accept-Encoding: gzip,deflate,br ：客户端告诉服务器，所支持的压缩格式</p></li><li><p>Accept-Language: en-us,zh-cn ：客户端告诉服务器，它的语言环境</p></li><li><p>Connection: close/Keep-Alive ：客户端告诉服务器，请求完后是断开链接或保持链接</p></li><li><p>Cookie ：客户端告诉服务器，所带来的的cookie（后面讲）</p></li><li><p>Host:xxxxxx ：客户端告诉服务器，想访问哪台主机</p></li><li><p>User-Agent ：User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36：表示浏览器内核</p></li><li><p>Referer ：xxxxx：客户端告诉服务器，客户机从哪个页面来的，防盗链，前发出请求的地址，例如在浏览器地址栏直接访问服务器，那么没有这个请求头。如果是在<code>www.baidu.com</code>页面上点击链接访问的服务器，那么这个头的值<code>www.baidu.com</code></p></li><li><p>Content-Type：如果是POST请求，会有这个头，默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码</p></li></ul><h4 id="3-HTTP响应"><a href="#3-HTTP响应" class="headerlink" title="(3) HTTP响应"></a>(3) HTTP响应</h4><p>一个HTTP响应代表服务器向客户端回送数据</p><p><strong>响应格式：</strong></p><p>1、响应首行</p><p>2、响应头</p><p>3、空行</p><p>4、响应体（或称之为响应正文）</p><h4 id="1-状态行"><a href="#1-状态行" class="headerlink" title="(1) 状态行"></a>(1) 状态行</h4><p>格式：HTTP版本号 状态码 原因</p><p>状态行：HTTP/1.1 200 OK</p><p><strong>状态码</strong></p><p>响应首行的结构：协议及版本 状态码 状态码说明，例如：HTTP/1.1 200 OK</p><table><thead><tr><th>状态码</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td>请求成功</td></tr><tr><td>302</td><td>请求重定向</td></tr><tr><td>304</td><td>请求资源没有改变</td></tr><tr><td>404</td><td>请求资源补不存在，属性客户端错误</td></tr><tr><td>500</td><td>服务器内部错误</td></tr></tbody></table><h4 id="2-响应头"><a href="#2-响应头" class="headerlink" title="(2) 响应头"></a>(2) 响应头</h4><ul><li>Content-Type：响应正文的MIME类型，例如image/jpeg表示响应正文为jpg图片，例如text/html;charset=utf-8表示响应正文为html，并且编码为utf-8编码。浏览器会通过这一信息来显示响应数据</li><li>Content-Length：响应正文的长度</li><li>Set-Cookie：服务器告诉客户端要<strong>保存Cookie</strong> </li><li>Date：响应时间，可能会有8小时的误差，因为中国的时区问题</li></ul><p>通知客户端浏览器不要缓存页面的响应头：</p><ul><li>Expires:-1</li><li>Cache-Control: no-cache</li><li>Pragma: no-cache</li></ul><p>自动刷新响应头，浏览器会在3秒钟后自动重定向到传智主页</p><ul><li>Refresh: 3;url=<a href="http://www.xxxx" target="_blank" rel="noopener">http://www.xxxx</a></li></ul><p><strong>状态码304</strong></p><p>相关头信息</p><ul><li>Last-Modified：响应头，表示当前资源的最后修改时间；</li><li>If-Modified-Since：请求头，表示缓存的资源最后修改时间；</li></ul><p>状态码304：表示访问的资源没有改变</p><blockquote><ol><li><p>客户端首次访问服务器的静态资源index.html，服务器会把index.html响应给客户端，而且还会添加一个名为Last-Modified的响应头，它说明了当前index.html的最后修改时间</p><ol start="2"><li><p>客户端收到响应后，会把index.html缓存在客户端上，而且还会把Last-Modified缓存起来。</p></li><li><p>客户端第二次请求index.html时，会添加名为If-Modified-Since的请求头，它的值是上次服务器响应头Last-Modified，服务器获取到客户端保存的最后修改时间，以及当前资源的最后修改时间进行比较，如果相同，说明index.html没有改动过，那么服务器不会发送index.html，而是响应状态码304，即通知客户端资源没有改变，你可以使用自己的缓存。</p></li></ol></li></ol></blockquote><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 5.3-会话技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-Servlet技术2</title>
      <link href="/2019/09/17/5.2-servlet/002-servlet-zhi-request-respone-xiang-jie/"/>
      <url>/2019/09/17/5.2-servlet/002-servlet-zhi-request-respone-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet之request、respone详解"><a href="#Servlet之request、respone详解" class="headerlink" title="Servlet之request、respone详解"></a>Servlet之request、respone详解</h1><p><img src="http://image.ideal-20.cn/basic/5.2-02-005.png" alt></p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h3><p>request是Servlet.service()方法的一个参数，在客户端发出每个请求时，服务器都会创建一个request对象，并把请求数据封装到request中，然后在调用Servlet.service()方法时传递给service()方法</p><p>HttpServletRequest对象代表客户端的请求，当客户端通过HTTP协议访问服务器时，HTTP请求头中的所有信息都封装在这个对象中，开发人员通过这个对象的方法，可以获得客户这些信息</p><h3 id="二-常用方法"><a href="#二-常用方法" class="headerlink" title="(二) 常用方法"></a>(二) 常用方法</h3><h4 id="1-域方法"><a href="#1-域方法" class="headerlink" title="(1) 域方法"></a>(1) 域方法</h4><p><strong>存储</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用来存储一个对象，也可以称之为存储一个域属性</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span>Eg：servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>“xxx”<span class="token punctuation">,</span> “XXX”<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在ServletContext中保存了一个域属性，域属性名称为xxx，域属性的值为XXX</span></code></pre><p><strong>获取</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用来获取ServletContext中的数据</span>Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取名为xx的域属性</span>Eg：String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>“xxx”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有域属性的名称；</span>Enumeration <span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>移除</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用来移除ServletContext中的域属性</span><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span></code></pre><h4 id="2-获取请求头数据"><a href="#2-获取请求头数据" class="headerlink" title="(2) 获取请求头数据"></a>(2) 获取请求头数据</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取指定名称的请求头</span>String <span class="token function">getHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有请求头名称</span>Enumeration <span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取值为int类型的请求头</span><span class="token keyword">int</span> <span class="token function">getIntHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span></code></pre><h4 id="3-获取请求相关的其他方法"><a href="#3-获取请求相关的其他方法" class="headerlink" title="(3) 获取请求相关的其他方法"></a>(3) 获取请求相关的其他方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取请求体的字节数，GET请求没有请求体，没有请求体返回-1；</span><span class="token keyword">int</span> <span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*        获取请求类型，如果请求是GET，那么这个方法返回null；如果是POST请求，那么默认    为application/x-www-form-urlencoded，表示请求体内容使用了URL编码；*/</span>String <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回请求方法，例如：GET/POST</span>String <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回当前客户端浏览器的Locale。java.util.Locale表示国家和言语，这个东西在国际化中很有用；</span>Locale <span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*    获取请求编码，如果没有setCharacterEncoding()，那么返回null，表示使用    ISO-8859-1编码；*/</span>String <span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*    设置请求编码，只对请求体有效！注意，对于GET而言，没有请求体！！！所以此方法    只能对POST请求中的参数有效！*/</span><span class="token keyword">void</span> <span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>String code<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回上下文路径，例如：/Dmoe1</span>String <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回请求URL中的参数，例如：username=zhangSan</span>String <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回请求URI路径，例如：/Demo1/ServletDemo1</span>String <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*    返回请求URL路径，例如：http://localhost/Demo1/ServletDemo1即返回除了参数    以外的路径信息；*/</span>StringBuffer <span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回Servlet路径，例如：/ServletDemo1</span>String <span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回当前客户端的IP地址</span>String <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回当前客户端的主机名，但这个方法的实现还是获取IP地址</span>String <span class="token function">getRemoteHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回请求协议，例如：http</span>String <span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回主机名，例如：localhost</span>String <span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回服务器端口号，例如：8080</span><span class="token keyword">int</span> <span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>为了方便记忆，我们画一张图辅助记忆</p><p><img src="G:%5C%E5%85%AC%E4%BC%97%E5%8F%B7%5Cmarkdown%E6%96%87%E4%BB%B6%5C05-Servlet%5CServlet%5C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95.png" alt></p><h4 id="4-案例练习"><a href="#4-案例练习" class="headerlink" title="(4) 案例练习"></a>(4) 案例练习</h4><p><strong>案例一：防盗链</strong></p><p>顾名思义，就是说让用户只能在我们站内访问对应网页，而通过复制链接到地址栏以及贴链接到别人的网站进行盗链，则全部跳转回自己的链接页面</p><p>注意：有一部分响应代码未接触，可先照着敲，大致体会，后期回来看</p><p>先看一下效果：</p><p>这是我们所制定的网站，简单理解为官网</p><p><img src="http://image.ideal-20.cn/basic/5.2-02-003.png" alt></p><p>在官网中，正常点击链接访问，页面跳转正常</p><p><img src="http://image.ideal-20.cn/basic/5.2-02-001.png" alt></p><p>如果我们本地写一个页面，直接绕过 a.html 去访问 <code>http://localhost:8080/web-001/ServletDemo3&quot;</code> 此时页面就会跳转回a.html中去，也就会回到了我们的官网，并且控制台输出：非法盗链，已经跳回原页面访问！</p><p><img src="http://image.ideal-20.cn/basic/5.2-02-002.png" alt></p><p>下面是具体的代码实现</p><ul><li>a.html</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/web-001/ServletDemo3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>葫芦娃最新资源！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>ServletDemo3</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>request<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/ServletDemo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RequestDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取网页来源</span>        String referer <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//非法盗链</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>referer <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>referer<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"localhost:8080/web-001/a.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非法盗链，已经跳回原页面访问！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"a.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//正常访问</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"是他就是他，是他就是他，我们的英雄葫芦娃！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三-request获取请求参数"><a href="#三-request获取请求参数" class="headerlink" title="(三) request获取请求参数"></a>(三) request获取请求参数</h3><h4 id="1-GET-POST请求的使用位置"><a href="#1-GET-POST请求的使用位置" class="headerlink" title="(1) GET/POST请求的使用位置"></a>(1) GET/POST请求的使用位置</h4><ul><li>浏览器地址栏直接输入：一定是GET请求</li><li>超链接：一定是GET请求</li><li>表单：可以是GET，也可以是POST</li></ul><h4 id="2-GET-POST请求的区别"><a href="#2-GET-POST请求的区别" class="headerlink" title="(2) GET/POST请求的区别"></a>(2) GET/POST请求的区别</h4><h5 id="A：GET请求"><a href="#A：GET请求" class="headerlink" title="A：GET请求"></a>A：GET请求</h5><ul><li>请求参数会在浏览器的地址栏中显示，所以不安全</li><li>请求参数长度限制长度在1K之内</li><li>GET请求没有请求体，无法通过request.setCharacterEncoding()来设置参数的编码</li></ul><h5 id="B：POST请求"><a href="#B：POST请求" class="headerlink" title="B：POST请求"></a>B：POST请求</h5><ul><li>请求参数不会显示浏览器的地址栏，相对安全</li><li>请求参数长度没有限制</li></ul><h4 id="3-获取请求参数的通用方式-Get-Post均可"><a href="#3-获取请求参数的通用方式-Get-Post均可" class="headerlink" title="(3) 获取请求参数的通用方式(Get/Post均可)"></a>(3) 获取请求参数的通用方式(Get/Post均可)</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据参数名称获取参数值</span>String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据参数名称获取参数值的数组 </span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有请求的参数名称</span>Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有参数的map集合</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>（一）表单提交数据【通过post方式提交数据】</strong></p><ul><li>b.html</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/web-001/RequestDemo3<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>爱好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>游泳<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游泳            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跑步<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跑步            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网球<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网球      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this is hidden text!<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>从哪来的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>广州<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>北京<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>深圳<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>补充说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textarea<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>RequestDemo3</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>request<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/RequestDemo3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RequestDemo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置request字符编码的格式</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过html的name属性，获取到值</span>        String username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String gender <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//复选框和下拉框有多个值，获取到多个值</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobbies"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> address <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取到文本域的值</span>        String description <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到隐藏域的值</span>        String hiddenValue <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username: "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password: "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gender: "</span> <span class="token operator">+</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hobbies: "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"address: "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"description: "</span> <span class="token operator">+</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hiddenValue: "</span> <span class="token operator">+</span> hiddenValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>（二）超链接方式提交数据【通过get方式提交数据】</strong></p><ul><li>c.html</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/web-001/RequestDemo4<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    参数1：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    参数2：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>RequestDemo4</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//省略包</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/RequestDemo4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RequestDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String v1 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v2 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1="</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2="</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四-中文乱码问题"><a href="#四-中文乱码问题" class="headerlink" title="(四) 中文乱码问题"></a>(四) 中文乱码问题</h3><p><strong>乱码问题主要针对Tomcat8以前的版本，Tomcat8以上版本默认编码格式是UTF-8，而不是ISO 8859-1了</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置request字符编码的格式</span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Tomcat服务器的默认编码是ISO 8859-1，而浏览器使用的是UTF-8编码。浏览器的中文数据提交给服务器，Tomacat以ISO 8859-1编码对中文编码，当我在Servlet读取数据的时候自然拿到乱码。所以设置request的编码为UTF-8，乱码就解决了</p><p>注意：按照上述例子中（使用post方式）乱码问题已经解决了，但是在get方式中尝试仍然是乱码。在此我们需要了解post方法是怎么进行参数传递的。</p><p>当我们点击提交按钮的时候，数据封装进了Form Data中，http请求中把实体主体带过去了【传输的数据称之为主体】，既然request对象封装了http请求，所以request对象可以解析到发送过来的数据，于是只要把编码设置成UTF-8就可以解决乱码问题</p><p>（对上例中post请求方式进行抓包）</p><p><img src="http://image.ideal-20.cn/basic/5.2-02-006.png" alt></p><p>而get方式不同，它的数据是从消息行带过去的，没有封装到request中，所以使用request设置编码是无效的。</p><p>解决方法： 我们既然知道Tomcat默认的编码是ISO 8859-1，那么get方式由消息体带过去给浏览器的时候肯定是用ISO 8859-1编码了。</p><p>（还可以通过修改Tomcat服务器的配置来解决，但是不推荐，因为会太依赖服务器了）</p><pre class=" language-JAVA"><code class="language-JAVA">//此时得到的数据已经是被ISO 8859-1编码后的字符串了，这个是乱码String name = request.getParameter("username);//乱码通过反向查ISO 8859-1得到原始的数据byte[] bytes = name.getBytes("ISO 8859-1);//通过原始的数据，设置正确的码表，构建字符串String value = new String(bytes,"UTF-8");</code></pre><h3 id="五-实现转发"><a href="#五-实现转发" class="headerlink" title="(五) 实现转发"></a>(五) 实现转发</h3><p>服务器内部的资源跳转方式</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/web-001/RequestDemo<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是转发后的首页，地址栏地址也没有发生变化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到requestDispatcher对象，跳转到c.html</span>        RequestDispatcher requestDispatcher <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/c.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用requestDispatcher对象的forward()实现转发，传入req和resp方法</span>        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>reqt<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>转发的结果就是地址栏没有发生变化，但是页面已经跳转到c.html页面</p><p>学习Response后我们会学习重定向问题，到时候与转发做区分对别，请留意这一部分</p><h3 id="六-Servlet之间的通讯"><a href="#六-Servlet之间的通讯" class="headerlink" title="(六) Servlet之间的通讯"></a>(六) Servlet之间的通讯</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取到requesetDispatcher对象</span>        RequestDispatcher requestDispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/servletB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用requestDispatcher对象的forward()实现转发，传入req和resp方法</span>        requestDispatcher<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>ServletB</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到存进requeset对象的值</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在浏览器输出该值</span>        respe<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"i am: "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们可以同时使用ServletContext和request实现Servlet之间的通讯</p><p>一般来说我们尽量使用request，因为ServletContext代表着整个web应用，使用ServetContext会消耗大量的资源，而request对象会随着请求的结束而技术，资源会被回收，使用request域进行Servlet进行Servlet之间的通讯在开发中是非常频繁的</p><p><strong>细节：</strong></p><p>如果在调用foreard方法之前，在Servlet程序中写入的部分已经被真正地传到了客户端，forward方法将抛出IllegalStateException异常，也就是说，不要在在转发之前写数据给浏览器</p><p>如果调用forward方法之前向Servlet引擎的缓冲区中写入了内容，只要写入到缓冲区中的内容还没有被真正输出到客户端，forward方法就可以被正常执行，原来写入到缓冲区中的内容将被清空，但是已写入到HttpServletResponse对象中的响应头字段信息保持有效</p><h2 id="Respone"><a href="#Respone" class="headerlink" title="Respone"></a>Respone</h2><p>前面学习的 Request 对象可以帮助我们获取到浏览器发过来的请求，想对应的，我们就需要学习代表响应的 response 对象，它可以帮助我们进行对客户端的响应工作</p><h3 id="一-响应正文"><a href="#一-响应正文" class="headerlink" title="(一)  响应正文"></a>(一)  响应正文</h3><p>response作为响应对象，他提供了两个响应流对象，可以向客户端输出响应正文</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取字符流</span>l PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取字节流</span>l ServletOutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">ServletOutputStream servletOutputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servletOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servletOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Just for test"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果Tomcat版本在8以下 在outputStream中使用print()方法接收字符串，由于编码的问题，输出中文字符串的时候，就会出现乱码问题</p><p>原因是，outputStream是输出二进制的数据，print()方法先有一个将字符串转为二进制的过程，Tomcat会使用IOS 8859-1编码转换，所以出现了问题</p><p>但是使用write()却可以很好的解决这个问题，这是因为，<code>write(&quot;Just for test&quot;.getBytes());</code>转换为byte[]数组的时候默认使用的是gb2312编码，所以不会出现问题</p><p>但是为了后续方便，我们还是要使用UFT-8编码，如果我们在上一步骤中指定编码，看看如何</p><pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果就是会出现乱码，这是因为客户端浏览器不知道响应数据是什么编码的，那么如何解决这个问题呢</p><p>解决方案：</p><p><strong>A：设置消息头</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置头信息，告诉浏览器我回送的数据是UTF-8的</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span>，<span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>B：使用html标签模拟一个http消息头</strong></p><pre class=" language-java"><code class="language-java">ServletOutputStream servletOutputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用meta标签模拟http消息头，告诉浏览器回送数据的编码和格式</span>servletOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv='content-type' content='text/html;charset=UTF-8>"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>servletOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>C：推荐方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置浏览器用UTF-8编码显示数据</span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到printWriter对象</span>PrintWriter printWriter <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>printWriter<span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token string">"你好世界"</span><span class="token punctuation">)</span></code></pre><p><strong>好处</strong>：不只会调用<code>response.setCharaceterEncoding(“utf-8”)</code>，还会设置content-type响应头（客户端浏览器会使用content-type头来解读响应数据）</p><p><strong>总结</strong>：响应正文内容为字符，那么使用<code>respone.getWriter()</code>，如果响应内容是字节，例如下载文件，可以使用 <code>response.getOutputStream()</code></p><p><strong>注意</strong>：在同一个请求中，不能同时使用这两个流，否则会抛出 IllegalStateException 异常</p><p><strong>getWriter() 的缓冲区问题</strong></p><p>它的类型是PrintWriter类型的，所以它有缓冲区，缓冲区的默认大小为8KB，在限定代销范围以内，数据先存放在缓冲区，等到超过范围后，服务器刷新流，缓冲区中的数据发送倒客户端，如果想要响应数据马上发送到客户端，可以调用response.flushBuffer()方法来手动刷新缓冲区</p><h3 id="二-设置响应头信息、状态码以及其他"><a href="#二-设置响应头信息、状态码以及其他" class="headerlink" title="(二) 设置响应头信息、状态码以及其他"></a>(二) 设置响应头信息、状态码以及其他</h3><h4 id="1-设置响应头"><a href="#1-设置响应头" class="headerlink" title="(1) 设置响应头"></a>(1) 设置响应头</h4><p>使用 response 对象的 setHeader() 方法来设置响应头</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置content-type响应头,告诉浏览器响应内容为html类型，编码为utf-8。而且同时会设置response的字符流编码为utf-8，即response.setCharaceterEncoding(“uaav tf-8”)；</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>“content<span class="token operator">-</span>type”<span class="token punctuation">,</span> “text<span class="token operator">/</span>html<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>”<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//5秒后自动跳转到指定主页</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Refresh"</span><span class="token punctuation">,</span><span class="token string">"5; URL=http://www.xxx.com"</span><span class="token punctuation">)</span>：</code></pre><h4 id="2-设置状态码"><a href="#2-设置状态码" class="headerlink" title="(2) 设置状态码"></a>(2) 设置状态码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置状态码</span>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当发送错误状态码时，跳转到指定错误页面，但可以显示错误信息</span>response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> “您要查找的资源不存在”<span class="token punctuation">)</span></code></pre><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="(3) 其他"></a>(3) 其他</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等同于response.setHeader(“content-type”, “text/html;charset=utf-8”)</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置字符响应流的字符编码为UTF-8    </span>response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>“utf<span class="token operator">-</span><span class="token number">8</span>”<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//下例表示定时刷新，3秒后跳转页面</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Refresh"</span><span class="token punctuation">,</span> <span class="token string">"3;URL=Bservlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三-重定向"><a href="#三-重定向" class="headerlink" title="(三) 重定向"></a>(三) 重定向</h3><p>当你访问 <code>www.xxx.com</code>的时候，页面被跳转到了另一个页面，并且浏览器地址栏中的URL也发生了变化，这种技术就叫做重定向</p><p>完成重定向有两个关键的地方</p><ul><li>设置响应码</li><li>设置Location头</li></ul><p>响应码200的意思是响应成功，而重定向对应的响应码为302，所以我们需要设置响应码</p><p>因为重定向的原理为，发出二次请求，所以你需要给浏览器指定第二次请求的URL，所以需要蛇者Location头</p><p>注意：同服务器下可以使用相对路径</p><pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span> <span class="token string">"www.xxx.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单的写法</p><pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"www.xxx.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四-转发和重定向的区别与使用场景"><a href="#四-转发和重定向的区别与使用场景" class="headerlink" title="(四) 转发和重定向的区别与使用场景"></a>(四) 转发和重定向的区别与使用场景</h3><h4 id="1-区别"><a href="#1-区别" class="headerlink" title="(1) 区别"></a>(1) 区别</h4><p><strong>(一) 实际发生未知不同，地址栏不同</strong></p><p><strong>A：转发是发生在服务器的</strong></p><p><strong>B：转发是由服务器进行跳转的</strong>，转发时，浏览器的地址栏是没有发生变化的，（访    问了Servlet1后即使页面跳转到了Servlet2，但浏览器的地址还是Servlet1的）    也就是说浏览器是不知道该跳转的动作，实现转发只是一次的http请求，一次转    发中request和response对象都是同一个，这也解释了为什么可以使用request    作为域对象进行Servlet之间的通讯</p><p><strong>C：重定向是发生在浏览器的</strong></p><p><strong>D：重定向是由浏览器进行跳转的</strong>，进行重定向跳转的时候，浏览器的地址会发生变化，实现重定向的原理是由response的状态码和location头组合而实现的，这    是由浏览器进行的页面跳转实现会发出两个http请求，request域对象是无效的，    因为它不是同一个request对象</p><p><strong>(二) 用法不同</strong></p><p><strong>原则</strong>：给服务器用的直接从资源名开始写，给浏览器用的要把应用名协写上</p><p>Requst.getRequestDispatcher(“/资源名 URL”).forward(request,response);</p><p>转发时“/”代表的是本应用程序的根目录（web-01）</p><p>Response.send(“/web应用/资源名URL”);</p><p>重定向时“/”代表的是webapps目录</p><p><strong>(三) 能够去往的URL的范围不同</strong></p><p>转发是服务器跳转，只能去往当前web应用的资源</p><p>重定向是服务器跳转，可以去往任何的资源</p><p><strong>(四) 传递数据的类型不同</strong></p><p>转发的request对象可以传递各种类型的数据，包括对象</p><p>重定向只能传递字符串</p><p><strong>(五) 跳转的时间不同</strong></p><p>转发时：执行到跳转语句就会立刻跳转</p><p>重定向：整个页面执行完后才会执行跳转</p><h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><p>总结：转发是带着转发前的请求的参数。重定向时新的请求</p><p>典型的应用场景：</p><p>1：转发：访问Servlet处理业务逻辑，然后转发到jsp中去处理结果，浏览器里URL不变</p><p>2：重定向：提交表单，处理成功后重定向到另一个jsp，防止表单重复提交，浏览器里的URL变了</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 5.2-Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Servlet技术1</title>
      <link href="/2019/09/17/5.2-servlet/001-servlet-gai-shu-shi-xian-xi-jie-huo-qu-zi-yuan-servletconfig-servletcontext/"/>
      <url>/2019/09/17/5.2-servlet/001-servlet-gai-shu-shi-xian-xi-jie-huo-qu-zi-yuan-servletconfig-servletcontext/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet概述、实现、细节、获取资源、ServletConfig、ServletContext"><a href="#Servlet概述、实现、细节、获取资源、ServletConfig、ServletContext" class="headerlink" title="Servlet概述、实现、细节、获取资源、ServletConfig、ServletContext"></a>Servlet概述、实现、细节、获取资源、ServletConfig、ServletContext</h1><h2 id="一-Setvlet基本概述"><a href="#一-Setvlet基本概述" class="headerlink" title="(一) Setvlet基本概述"></a>(一) Setvlet基本概述</h2><h3 id="1-什么是Servlet-？"><a href="#1-什么是Servlet-？" class="headerlink" title="(1) 什么是Servlet ？"></a>(1) 什么是Servlet ？</h3><blockquote><p>Servlet（Server Applet）是JavaServlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容是</p></blockquote><p>JavaWeb中，我们将会接触到三大组件（Servlet、Filter、Listener），Servlet由服务器调用，处理服务器接收到的请求，即完成，接受请求数据 –&gt; 处理请求 –&gt; 完成响应，其本质就是一个实现了Servlet接口的java类</p><p><strong>Servlet类由我们来写，但对象由服务器来创建，并且由服务器来调用相应的方法</strong></p><h3 id="2-Servlet用来做什么？"><a href="#2-Servlet用来做什么？" class="headerlink" title="(2) Servlet用来做什么？"></a>(2) Servlet用来做什么？</h3><p>网络中比较常见的一些功能，例如登录，注册，这样存在交互的功能，而Servlet就可以帮助我们处理这些请求，可以说Servlet是JavaWeb知识中重要的知识点之一</p><h2 id="二-实现Servlet的方式"><a href="#二-实现Servlet的方式" class="headerlink" title="(二) 实现Servlet的方式"></a>(二) 实现Servlet的方式</h2><p><strong>实现Servlet有三种方式：</strong></p><ul><li>实现 javax.servlet.Servlet 接口；</li><li>继承 javax.servlet.GenericServlet类；</li><li>继承 javax.servlet.http.HttpServlet类；</li></ul><p>实际开发中，我们<strong>通常会选择继承HttpServlet类</strong>来完成我们的Servlet，但认识Servlet接口这种方式也是很重要的，是我们入门知识中不可或缺的部分</p><h3 id="1-创建我们的第一个Servelt"><a href="#1-创建我们的第一个Servelt" class="headerlink" title="(1) 创建我们的第一个Servelt"></a>(1) 创建我们的第一个Servelt</h3><p>我们创建一个web项目，选择对应的参数，我们所装的jdk为1.8版本，可以选择到 JavaEE8的版本，对应versions也就是4.0，不过我们在这里选择市面上用的还是比较多的7版本</p><p><img src="http://image.ideal-20.cn/basic/5.2-01-001.png" alt></p><p>创建一个Demo类实现Servlet接口，然后我们快速生成这个接口中未实现的方法，我们先暂时忽略Servlet中其他四个方法，只关心service()方法，因为它是用来处理请求的方法，我们在该方法内给出一条输出语句</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServeltDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Servlet配置方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//提供服务方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"理想二旬不止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Servlet信息方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//销毁方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>写完了一个最简单Servlet代码，但是如何在浏览器中可以访问到呢？我们就需要对web/WEB-INF下的web.xml进行配置,我们在<code>&lt;web-app&gt;&lt;/web-app&gt;</code>中加入以下代码（虽然后期有优化的方法，但是很推荐大家记忆下来）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--给这个Servlet起一个名字，一般与类名相同--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--全类名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.ideal.web.servlet.ServeltDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置映射路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--外界访问的路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>现在我们根据我们在<code>url-pattern</code>中配置的路径来访问一下，在控制台中果然输出了，理想二旬不止这个字符串</p><h3 id="2-web-xml的作用"><a href="#2-web-xml的作用" class="headerlink" title="(2) web.xml的作用"></a>(2) web.xml的作用</h3><p>趁热打铁，我们来简单分析一下这个web.xml的因由，其实在web.xml中<strong>配置Servlet的目的</strong>，就是把在浏览器中的<strong>访问路径与对应Servlet绑到一起</strong>，上面的例子中就是把访问路径：“/Demo1” 与 “cn.ideal.web.servlet.ServeltDemo1” 绑定到了一起</p><p>1、<code>&lt;servlet&gt;&lt;/servlet&gt;</code> ：指定ServletDemo1这个Servlet的名字为ServletDemo1，一般此处与对应类同名</p><p>2、<code>&lt;servlet-mapping&gt;&lt;/servlet=mapping&gt;</code> ：设定访问的具体路径</p><p><strong>而这两者又通过<code>&lt;servlet-name&gt;&lt;/servlet-name&gt;</code> 关联在一起</strong></p><p>执行过程：</p><p>1、当服务器中接受到了浏览器的请求，解析URL路径，获取到Servlet的资源路径</p><p>2、寻找web.xml文件，找到 <code>&lt;url-pattern&gt;</code> 标签，寻找对应的全类名<code>&lt;servlet-class&gt;</code></p><p>3、Tomcat将字节码文件加载进内存，并且创建对象，调用其中的方法</p><p>所以我们需要知道：<strong>Servlet中的大多数方法均不由我们来创建和调用，均由Tomcat完成</strong></p><h2 id="三-Servlet-接口"><a href="#三-Servlet-接口" class="headerlink" title="(三) Servlet 接口"></a>(三) Servlet 接口</h2><h3 id="1-生命周期简单概述"><a href="#1-生命周期简单概述" class="headerlink" title="(1) 生命周期简单概述"></a>(1) 生命周期简单概述</h3><p>我将生命周期简单理解为这样几个过程：</p><p><strong>生前——出生——服务——死亡——埋葬</strong></p><p><strong>1、生前：</strong>当Tomcat第一次访问Servlet，Tomcat会创建Servlet的实例</p><p><strong>2、出生：</strong>Tomcat会调用init()方法初始化这个对象</p><p><strong>3、服务：</strong> 客户端访问Servlet的时候，service()方法会被调用</p><p><strong>4、死亡：</strong> 当Tomcat被关闭或者Servlet长时间不被使用，destroy()方法会被调用</p><p><strong>5、埋葬：</strong> destroy()方法被调用后，Servlet就等待垃圾回收（不轻易），有需要则用init()方法重新初始化</p><h3 id="2-生命周期详解"><a href="#2-生命周期详解" class="headerlink" title="(2) 生命周期详解"></a>(2) 生命周期详解</h3><p><strong>1、生前</strong></p><p>服务器会在S<strong>ervlet第一次被访问时</strong>，或者是在<strong>服务器启动时</strong>创建Servlet。如果服务器启动时就创建Servlet，那么还需要在web.xml文件中进行配置，也就是说默认情况下，<strong>Servlet是在第一次访问时由服务器创建的</strong></p><p>一个Servlet类型，服务器只创建一个实例对象：例如我们第一次访问<code>&lt;http://localhost:8080/Demo1&gt;</code>，服务器通过<code>/Demo1</code>就找到了<code>cn.ideal.web.servlet.ServeltDemo1</code> ，服务器就会判断这个类型的Servlet是否创建过，若没有才通过反射来创建ServletDmoe1的实例，否则就直接使用已经存在的实例</p><p><strong>2、出生</strong></p><p>在Servlet被创建后，服务器会<strong>立即调用</strong>Servlet的<code>void init(ServletConfig)</code>方法,而且一个Servlet的一生,这个方法只会被调用一次，我们可以把一些对Servlet的初始化工作放到方法中!</p><p><strong>3、服务</strong></p><p>当服务器每次接收到请求时，都会去调用Servlet的service()方法来处理请求。service()方法是会被调用多次的，服务器接收到一次请求，就会调用service() 方法一次，也正因为如此，所以我们才需要把处理请求的代码写到service()方法中！</p><p><strong>4、死亡及埋葬</strong></p><p>当服务器关闭时Servlet也需要被销毁了，但是销毁之前，服务器会先调用Servlet中的destroy()方法，我们可以把一些释放资源的代码放到此处</p><h3 id="3-Servlet接口的三个类型"><a href="#3-Servlet接口的三个类型" class="headerlink" title="(3) Servlet接口的三个类型"></a>(3) Servlet接口的三个类型</h3><p>在这五个方法中，我们可以在参数中看到三个我们没有接触过的类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>也就是这个三个类型：ServletConfig、ServletRequest、ServletResponse</p><h4 id="A：ServletConfig"><a href="#A：ServletConfig" class="headerlink" title="A：ServletConfig"></a>A：ServletConfig</h4><p>ServletConfig是服务器创建的一个对象，然后传递到Servlet的init()方法中</p><p>下述方法中我们简单使用一下第一个  getServletName() 就可以了，后面的方法等我们学写了Context以及其他知识才能更好的理解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取Servlet在web.xml文件中的配置名称，即&lt;servlet-name>指定的名称</span>String <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用来获取ServletContext对象</span>ServletContext <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用来获取在web.xml中配置的初始化参数，通过参数名来获取参数值；</span>String <span class="token function">getInitParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用来获取在web.xml中配置的所有初始化参数名称</span>Enumeration <span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="B：ServletRequest-amp-ServletResponse"><a href="#B：ServletRequest-amp-ServletResponse" class="headerlink" title="B：ServletRequest &amp; ServletResponse"></a>B：ServletRequest &amp; ServletResponse</h4><p>这两个类型出现在Servlet的service()方法中，分别代表着<strong>请求</strong>与<strong>响应</strong>对象，并且两者的实例也都是由服务器创建的</p><p>但是我们想要做一个web应用，归根结底要和HTTP相挂钩，如果我们希望在service() 方法中使用HTTP相关的功能，可以把 ServletRequest 和 ServletResponse 强转成 HttpServletRequest 和HttpServletResponse</p><p><strong>HttpServletRequest方法：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取指定请求参数的值；</span>String <span class="token function">getParameter</span><span class="token punctuation">(</span>String paramName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取请求方法，例如GET或POST</span>String <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取指定请求头的值；</span>String <span class="token function">getHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置请求体的编码！</span><span class="token comment" spellcheck="true">/*    GET没有请求体，所以这个方法只只对POST请求有效当调用    这个方法必须在调用getParameter()方法之前调用！    使用request.setCharacterEncoding(“utf-8”)之后，再通过getParameter()方法获取参数    时，参数值都已经通过了转码，即转换成了UTF-8编码*/</span><span class="token keyword">void</span> <span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>String encoding<span class="token punctuation">)</span></code></pre><p><strong>HttpServletResponse方法：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取字符响应流，使用该流可以向客户端输出响应信息。</span>PrintWriter <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Eg：response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span>h1<span class="token operator">></span>Just <span class="token keyword">for</span> test<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>”<span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//获取字节响应流,例如可实现向客户端响应一张图片</span>ServletOutputStream <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用来设置字符响应流的编码</span><span class="token keyword">void</span> <span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>String encoding<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//向客户端添加响应头信息</span><span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String value<span class="token punctuation">)</span>Eg：<span class="token function">setHeader</span><span class="token punctuation">(</span>“Refresh”<span class="token punctuation">,</span> “<span class="token number">3</span><span class="token punctuation">;</span>url<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com”<span class="token punctuation">)</span> 表示三秒后自动刷新到该网址<span class="token comment" spellcheck="true">//该方法是setHeader(“content-type”, “xxx”)的简便方法，即用来添加名为content-type响应头的方法</span><span class="token comment" spellcheck="true">/*    content-type响应头用来设置响应数据的MIME类型，例如要向客户端响应jpg的图片，那么    可以setContentType(“image/jepg”)，如果响应数据为文本类型，那么还要台同时设置编    码，例如setContentType(“text/html;chartset=utf-8”)表示响应数据类型为文本类型    中的html类型，并且该方法会调用setCharacterEncoding(“utf-8”)方法；*/</span><span class="token keyword">void</span> <span class="token function">setContentType</span><span class="token punctuation">(</span>String contentType<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//向客户端发送状态码，以及错误消息</span><span class="token keyword">void</span> <span class="token function">sendError</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String errorMsg<span class="token punctuation">)</span></code></pre><h2 id="四-GenericServlet-类"><a href="#四-GenericServlet-类" class="headerlink" title="(四)  GenericServlet 类"></a>(四)  GenericServlet 类</h2><p>A：通过查看这个类的源码可以知道，该类中只有</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest var1<span class="token punctuation">,</span> ServletResponse var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">;</span></code></pre><p><strong>一个方法需要实现</strong>，其他的方法已经均在源码中有了定义</p><p><strong>B：GenericServlet的init()方法</strong></p><p>还需要提一提的两个方法就是</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>GenericServlet 类实现了Servlet的init(ServletConfig)方法，把参数config赋给了本类的成员config，然后再调用本类自己的无参的init()方法</p><p>这个方法是 GenericServlet <strong>自己的</strong>方法，而不是从Servlet继承下来的。当我们自定义Servlet时，如果想完成初始化作用就不要再重复 init(ServletConfig) 方法了，而是应该去<strong>重写init()</strong>方法。因为在 GenericServlet中的 init(ServletConfig) 方法中保存了 ServletConfig 对象，如果覆盖了保存 ServletConfig 的代码，那么就不能再使用 ServletConfig 了</p><p><strong>C：实现了ServletConfig接口</strong></p><p>GenericServlet还<strong>实现了ServletConfig接口</strong>，所以可以<strong>直接调用</strong>getInitParameter()、getServletContext()等ServletConfig的方法。</p><p>但是这个类我们仍然不是我们要讲的重点，我们接着看一下下一个类</p><h2 id="五-HttpServlet-类"><a href="#五-HttpServlet-类" class="headerlink" title="(五) HttpServlet 类"></a>(五) HttpServlet 类</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h3><p>在上面我们实现 Servlet 接口，需要实现5个方法，十分麻烦，而HttpServlet类已经实现了Servlet接口的所有方法，编写Servlet时，只需要继承HttpServlet，重写你需要的方法即可，并且它提供了对<strong>HTTP请求的特殊支持</strong>，更加强大</p><h3 id="2-service-方法"><a href="#2-service-方法" class="headerlink" title="(2) service()方法"></a>(2) service()方法</h3><p>在 HttpServlet 的 <code>service(ServletRequest,ServletResponse)</code>方法中会把 <strong>ServletRequest</strong> 和<strong>ServletResponse</strong> 强转成 <strong>HttpServletRequest</strong> 和 <strong>HttpServletResponse</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//HttpServlet 源码节选</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        HttpServletRequest request<span class="token punctuation">;</span>        HttpServletResponse response<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>req<span class="token punctuation">;</span>            response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span>res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"non-HTTP request or response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>强转过后，然后调用 HttpServlet 类中提供的 <code>service(HttpServletRequest,HttpServletResponse)</code>方法，这是这个类<strong>本身的方法</strong>，而不是继承而来的，这说明我们在使用的时候，只需要覆盖 <code>service(HttpServletRequest,HttpServletResponse)</code> 就可以了，不需要再进行强转这个两个对象了</p><p> 注意：其实还有更一步简化的步骤，也不必使用 <code>service(HttpServletRequest,HttpServletResponse)</code></p><h3 id="3-doGet-和-doPost"><a href="#3-doGet-和-doPost" class="headerlink" title="(3) doGet() 和 doPost()"></a>(3) doGet() 和 doPost()</h3><p>在HttpServlet的<code>service(HttpServletRequest,HttpServletResponse)</code> 方法会去判断这个请求是GET还是POST，如果是GET请求，就去调用类中的doGet()方法，如果是POST请求，就去调用doPost()方法，这说明我们在子类中去覆盖doGet()或doPost()方法就可以了</p><h2 id="六-Servlet细节"><a href="#六-Servlet细节" class="headerlink" title="(六) Servlet细节"></a>(六) Servlet细节</h2><h3 id="1-线程安全问题"><a href="#1-线程安全问题" class="headerlink" title="(1) 线程安全问题"></a>(1) 线程安全问题</h3><p>Servlet只会被服务器创建一个实例对象，很多情况下，一个Servlet需要处理多个请求，显然，Servlet虽然效率高，但也不是线程安全的</p><p>所以我们不应该在Servlet中轻易创建成员变量，因为可能会存在多个线程同时对这个成员变量进行不同的操作</p><p>结论：不要在Servlet中创建成员！创建局部变量即可，可以创建无状态成员量，或者状态只为可读的成员</p><h3 id="2-服务器启动时就创建Servlet"><a href="#2-服务器启动时就创建Servlet" class="headerlink" title="(2) 服务器启动时就创建Servlet"></a>(2) 服务器启动时就创建Servlet</h3><p>之前我们将生命周期的时候有说过，Servlet是在第一次访问时由服务器创建的，但我们可以通过在web.xml中对Servlet进行配置，使服务器启动时就创建Servlet</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.ideal.web.ServletDemo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--在&lt;servlet>中配置&lt;load-on-startup>，其中给出一个非负整数！--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre><p>它的作用是确定服务器启动时创建Servlet的顺序</p><h3 id="3-一个Servlet可以绑定多个URL"><a href="#3-一个Servlet可以绑定多个URL" class="headerlink" title="(3) 一个Servlet可以绑定多个URL"></a>(3) 一个Servlet可以绑定多个URL</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/AServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/BServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  </code></pre><p>这样配置后无论访问/AServlet还是/BServlet，访问的都是AServlet</p><h3 id="4-通配符匹配问题"><a href="#4-通配符匹配问题" class="headerlink" title="(4) 通配符匹配问题"></a>(4) 通配符匹配问题</h3><p>在<code>&lt;url-pattern&gt;</code>中可以使用通配符，也就是 “ * ” ，它可以匹配任何前缀或者后缀</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--路径匹配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-patter</span><span class="token punctuation">></span></span>：/servlet/a、/servlet/b，都匹配/servlet/*；<span class="token comment" spellcheck="true">&lt;!--扩展名匹配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>：/abc/de.xx、/a.xx，都匹配*.xx；<span class="token comment" spellcheck="true">&lt;!--什么都匹配--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>：匹配所有URL；</code></pre><p>通配符要么为前缀，要么为后缀，不能出现在URL中间位置，并且一个URL中最多只能出现一个通配符，如果存在更具体的地址，会优先访问具体的地址</p><h2 id="七-ServletContext"><a href="#七-ServletContext" class="headerlink" title="(七) ServletContext"></a>(七) ServletContext</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="(1) 概述"></a>(1) 概述</h3><p>服务器会为每个web应用创建一个 ServletContext 对象，可以说它就代表着这个web站点，并且这个对象，在Tomcat启动时就创建，在Tomcat关闭时才会销毁</p><h3 id="2-功能"><a href="#2-功能" class="headerlink" title="(2) 功能"></a>(2) 功能</h3><p>所有Servlet都共享着一个ServletContext对象，所以ServletContext对象的作用是在整个Web应用的动态资源之间共享数据，也就是说不同的Servlet之间可以通过ServletContext进行通讯，从而共享数据</p><h3 id="3-获取ServletContext对象"><a href="#3-获取ServletContext对象" class="headerlink" title="(3) 获取ServletContext对象"></a>(3) 获取ServletContext对象</h3><p>GenericServlet类有getServletContext()方法，所以可以直接使用this.getServletContext()来获取</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletContext context <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-域对象的功能"><a href="#4-域对象的功能" class="headerlink" title="(4) 域对象的功能"></a>(4) 域对象的功能</h3><p>所有域对象都有存取数据的功能，可以将这种存储数据的方式看做，Map的方式</p><p>我们来看几个常见的用来操作数据的方法</p><p><strong>存储</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用来存储一个对象，也可以称之为存储一个域属性</span><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span>Eg：servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>“xxx”<span class="token punctuation">,</span> “XXX”<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在ServletContext中保存了一个域属性，域属性名称为xxx，域属性的值为XXX</span></code></pre><p><strong>获取</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用来获取ServletContext中的数据</span>Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取名为xx的域属性</span>Eg：String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>“xxx”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有域属性的名称；</span>Enumeration <span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>移除</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用来移除ServletContext中的域属性</span><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span></code></pre><p><strong>访问量统计的小案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取ServletContext对象</span>        ServletContext servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取ServletContext对象中的count属性</span>        Integer count <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果在ServletContext中不存在count属性，name设置为count的值为1，表示第一次访问</span>            count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果在Servlet中存在count属性，说明以前被访问过，name让count在原来的基础上加1</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        servletResponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向客户端响应本页面被访问的次数</span>        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>本页面一共访问"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"次&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存count的值到ServletContext对象中</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="八-获取资源相关方法"><a href="#八-获取资源相关方法" class="headerlink" title="(八) 获取资源相关方法"></a>(八) 获取资源相关方法</h2><h3 id="1-获取路径"><a href="#1-获取路径" class="headerlink" title="(1) 获取路径"></a>(1) 获取路径</h3><p>使用ServletContext对象可以用来获取Web应用下的资源，例如在一个web应用的根目录下创建aaa.txt文件，WEB-INF目录下创建bbb.txt文件，如果我们想要通过Servlet获取这两者的路径就可以这样来写</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取aaa.txt的路径</span>String realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>“<span class="token operator">/</span>aaa<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取bbb.txt的路径</span>String realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>“<span class="token operator">/</span>WEB<span class="token operator">-</span>INF<span class="token operator">/</span>b<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span></code></pre><p>获取单个文件路径是这样，我们还有一种方式，可以获取到指定目录下所有的资源路径,例如获取/WEB-INF下的所有资源路径</p><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResourcePaths</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-获取资源流"><a href="#2-获取资源流" class="headerlink" title="(2) 获取资源流"></a>(2) 获取资源流</h3><p>不仅我们可以使用ServletContext获取路径，我们还可以获取资源流，以上面假设的两个文件为例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取aaa.txt</span>InputStream in <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>“<span class="token operator">/</span>aaa<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//获取bbb.txt</span>InputStream in <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>“<span class="token operator">/</span>WEB<span class="token operator">-</span>INF<span class="token operator">/</span>b<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span>；</code></pre><h3 id="3-获取类路径下资源"><a href="#3-获取类路径下资源" class="headerlink" title="(3) 获取类路径下资源"></a>(3) 获取类路径下资源</h3><pre class=" language-java"><code class="language-java">InputStream in <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"xxx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>IOUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="九-使用注解，不再配置web-xml"><a href="#九-使用注解，不再配置web-xml" class="headerlink" title="(九) 使用注解，不再配置web.xml"></a>(九) 使用注解，不再配置web.xml</h2><p>每创建一个Servlet我们就需要在web.xml中配置，但是如果我们的Servlet版本在3.0以上，就可以选择不创建web.xml，而使用注解来解决，十分简单方便</p><p>例如我们创建一个Servlet，配置web.xml如下</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletDemo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.ideal.web.servlet.ServletDemo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletDemo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在类名的上方写入这样一句代码，引号内为外部访问路径</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/Demo2"</span><span class="token punctuation">)</span></code></pre><p>是不是很简单方便，我们看一下其中的原理：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//WebServlet 源码节选</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>这个注解可以看到，<code>@Target({ElementType.TYPE})</code>作用范围为类上,<code>@Retention(RetentionPolicy.RUNTIME)</code>保留在运行期，name()方法反而在这里没有那么重要，因为在web.xml中，name主要起一个关联的作用，其中我们最重要的就是这个<code>String[] urlPatterns() default {};</code>配置一个地址，它的定义为一个数组，当然配置一个也是可以的，即<code>urlPatterns = &quot;/Demo2&quot;</code>而其中value所代表的最重要的值，其实也就代表这个地址，所以可以写为 <code>Value = &quot;/Demo2&quot;</code> ，而 Value又可以省略，所以可以写成 <code>&quot;/Demo2&quot;</code></p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 5.2-Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Tomcat</title>
      <link href="/2019/09/17/5.1-tomcat/001-tomcat/"/>
      <url>/2019/09/17/5.1-tomcat/001-tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="我叫Tomcat：一款web服务器"><a href="#我叫Tomcat：一款web服务器" class="headerlink" title="我叫Tomcat：一款web服务器"></a>我叫Tomcat：一款web服务器</h1><blockquote><p>如何将我们的 Java 代码，运行在网络上，初学时，首先接触到的一般都是Servlet以及Jsp（或略过Jsp）而 Tomcat 就是这两者的容器，帮你处理动态网页部分</p></blockquote><h3 id="一-从哪来，到哪去？"><a href="#一-从哪来，到哪去？" class="headerlink" title="(一) 从哪来，到哪去？"></a>(一) 从哪来，到哪去？</h3><h4 id="1-Tomcat和它的小伙伴"><a href="#1-Tomcat和它的小伙伴" class="headerlink" title="(1) Tomcat和它的小伙伴"></a>(1) Tomcat和它的小伙伴</h4><p>JBoss：Redhat 红帽，支持所有的 JavaEE 规则，适合大型项目，收费</p><p>Weblogic：Orcale，支持所有 JavaEE 规则，适合大型项目，收费</p><p>Websphere：IBM，支持所有 JavaEE 规则，适合大型项目，收费</p><p>Resin：Caucho，支持 所有 JavaEE 规则，应用趋于广泛</p><p>而我，我叫汤姆猫（<strong>Tomcat</strong>），来自<strong>Apache基金组织</strong>，可能因为我<strong>开源且免费</strong>，算是应用比较广泛的web服务器了，不过天下没有白吃的午餐，我仅仅<strong>支持少量的 javaEE规范</strong> （Servlet/Jsp等）所以<strong>中小型项目</strong>，在我这里跑的比较多</p><h4 id="2-Tomcat用来做什么？"><a href="#2-Tomcat用来做什么？" class="headerlink" title="(2) Tomcat用来做什么？"></a>(2) Tomcat用来做什么？</h4><p><img src="http://image.ideal-20.cn/basic/5.1-01-002.png" alt></p><h5 id="1、做Servlet等的容器"><a href="#1、做Servlet等的容器" class="headerlink" title="1、做Servlet等的容器"></a>1、做Servlet等的容器</h5><p>比如现存一个搜索引擎，我们将它看成一个完整的web项目，它基于http协议中的请求和响应，我输入一些内容查询，而它接收到了这个请求后，简单的认为，背后有一个Servlet（一些应用于web项目的java代码）在处理这个请求，它会通过一系列方法，对你的数据进行处理，以及查询，例如，正常则查询，存在非法字则不查询，返回文字警告，最后再把相应的界面展示给用户，而 Tomcat 就作为一个容器，其中存放着Servlet等东西</p><h5 id="2、让你-他人能在浏览器中访问你的web项目"><a href="#2、让你-他人能在浏览器中访问你的web项目" class="headerlink" title="2、让你/他人能在浏览器中访问你的web项目"></a>2、让你/他人能在浏览器中访问你的web项目</h5><p>想要在浏览器中访问我们本地的web项目，那必然需要一个URL地址，例如<code>http://localhost:8080/</code>（本地） ，也就是IP+端口号，那这个开放的端口，总得帮助我完成一些操作，它需要找到我再web.xml中配置的一些信息，然后找到我的Servlet，将我所需要的功能实现，执行完后，将结果返回到浏览器上，这样就能用java代码配合一些页面，实现数据动态的互动，从而在浏览器上查看这个效果</p><h3 id="二-配置-Tomcat"><a href="#二-配置-Tomcat" class="headerlink" title="(二) 配置 Tomcat"></a>(二) 配置 Tomcat</h3><h4 id="1-Tomcat的启动和关闭"><a href="#1-Tomcat的启动和关闭" class="headerlink" title="(1) Tomcat的启动和关闭"></a>(1) Tomcat的启动和关闭</h4><p>Tomcat的运行需要依赖 JDK，它会通过JAVA_HOME路径来寻找 JDK，我们是有  Java基础的，所以这一步可以忽略</p><p><strong>方式一</strong></p><p>在我们的安装路径下的bin文件夹中，<strong>startup.bat</strong>、<strong>shutdown.bat</strong>这两个文件分别代表着<strong>启动</strong>和<strong>关闭</strong></p><p>例如在我的电脑中开启 Tomcat：D:\develop\Java\apache-tomcat-8.5.40\bin\startup.bat</p><p><strong>方式二</strong></p><p>如果想更加方便一点，可以将这两者也设为环境变量</p><p>计算机 –&gt; 右键属性 –&gt; 高级系统设置（左侧）–&gt; 高级 –&gt; 环境变量 </p><p>新建系统变量 –&gt; 变量名：CATALINA_HOME    变量值：Tomcat安装路径</p><p>修改path变量 –&gt; 追加：%CATALINA_HOME%\bin </p><p>这样我们就可以在cmd中直接输入startup或shudown，启动我们的 Tomcat</p><p><img src="http://image.ideal-20.cn/basic/5.1-01-003.png" alt></p><p>启动后，弹出名为Tomcat的框，内打印出<strong>日志信息</strong>，即代表成功开启</p><p>如果在浏览器地址栏中输入 <code>http://localhost:8080</code>,如果出现对应Tomcat页面，说明配置也就成功了</p><p>因为服务器在本地上，所以我们的主机名可以为，<code>http://127.0.0.1:8080</code>或者 <code>http://localhost:8080</code>，端口前代表本地的主机名，tomcat的默认端口为8080</p><p><img src="http://image.ideal-20.cn/basic/5.1-01-005.png" alt></p><h4 id="2-修改端口号-可改可不改"><a href="#2-修改端口号-可改可不改" class="headerlink" title="(2) 修改端口号(可改可不改)"></a>(2) 修改端口号(可改可不改)</h4><p>Tomcat安装路径\conf\server.xml 修改，找到 <code>Connector port=&quot;8080&quot;</code>内容，修改8080的值</p><p>如果将端口号修改为80，那么以后再访问服务器的时候，就不需要再输入端口号了，因为<strong>http协议默认端口号就是80</strong>，即输入 <code>http://localhost</code>即可</p><h3 id="三-Tomcat-目录结构"><a href="#三-Tomcat-目录结构" class="headerlink" title="(三) Tomcat 目录结构"></a>(三) Tomcat 目录结构</h3><ul><li><p><strong>bin</strong>：存放启动和关闭 Tomcat 的脚本文件，例如startup.bat和shutdown.bat</p></li><li><p><strong>conf</strong>：存放各种配置文件，例如：context.xml、web.xml、tomcat-users.xml</p><ul><li>server.xml：配置一些setver信息，如端口号和主机</li><li>web.xml：与每个应用WEB-INF下的web.xml协同工作，配置Servlet，session等</li><li>tomcat-users.xml：用户名密码和相关的一些权限</li></ul></li><li><p><strong>lib</strong>：存放tomcat所需的jar包</p></li><li><p>logs：日志文件</p></li><li><p>temp：存放tomcat运行时产生的临时文件，当tomcat关闭后，这个目录中的件可以删除</p></li><li><p>webapps：目录下的每个文件夹对应我们的一个Web应用</p><ul><li>在webapps目录下有一个ROOT目录，它是缺省web应用，如果把web应用的内部放到webapps/ROOT下，访问URL路径中不用给出应用名称。</li></ul></li><li><p>work：webapps下的应用程序在运行时会自动生成文件，存放着 JSP被访问后，生成对应的server文件和字节码文件</p></li></ul><h3 id="四-配置虚拟目录（外部应用）"><a href="#四-配置虚拟目录（外部应用）" class="headerlink" title="(四) 配置虚拟目录（外部应用）"></a>(四) 配置虚拟目录（外部应用）</h3><blockquote><p>webapps：目录下的每个文件夹对应我们的一个Web应用</p></blockquote><p>默认情况下 webapps 下的文件夹可以被 Tomcat 自动管理成一个一个web站点，但是如果我们存在非常多的站点，<strong>一：过于占据内存</strong>，<strong>二：文件数过多不利于管理</strong>，所以我们需要在外部开辟一块空间，将我们的web站点分散到别的盘符中去</p><h4 id="1-方法一"><a href="#1-方法一" class="headerlink" title="(1) 方法一"></a>(1) 方法一</h4><p>在Tomcat安装目录下 找到 conf/server.xml </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localhost<span class="token punctuation">"</span></span> <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webapps<span class="token punctuation">"</span></span>      <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 待添加位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml">添加代码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/URL访问路径<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>外部应用的绝对路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-xml"><code class="language-xml">例如添加：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/web001<span class="token punctuation">"</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>F:/develop/web001<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="2-方法二"><a href="#2-方法二" class="headerlink" title="(2) 方法二"></a>(2) 方法二</h4><p>在Tomcat安装目录下 找到 conf/Catalina/loaclhost文件夹，在其中创建一个以web项目为名的文件夹</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span>     <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>外部应用的绝对路径<span class="token punctuation">"</span></span>     <span class="token attr-name">reloadable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">></span></span></code></pre><p><img src="http://image.ideal-20.cn/basic/5.1-01-001.png" alt></p><h3 id="五-设置站点的首页"><a href="#五-设置站点的首页" class="headerlink" title="(五) 设置站点的首页"></a>(五) 设置站点的首页</h3><p>一般在网络中部署站点的时候，index页面将作为一个网站的首页，也就是说只需要输入域名即可直接跳转到这个页面上去，不需要输入其文件名，而如何在本地Tomcat服务器中设置某一个web项目的首页呢？</p><p>1、我们在webapps中创建一个文件夹web1作为我们的一个web项目，在其中新建两个html文档，page1.html 以及 page2.html </p><p>2、在web1目录下新建一个名为WEB-INF的文件夹，并且在其中新建一个名为web.xml的文件</p><p>可以从别处复制格式，例如 webapps\ROOT\WEB-INF 下的web.xml文件，添加下方代码</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>首页文件名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span></code></pre><p>例如：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span>  <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>Welcome to Tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>     Welcome to Tomcat  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>page2.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>这样我们就不需要指定资源文件名访问了，page2已经成为了我们站点的首页</p><p><img src="http://image.ideal-20.cn/basic/5.1-01-006.png" alt></p><h3 id="六-外网如何访问本地基于Tomcat的web应用"><a href="#六-外网如何访问本地基于Tomcat的web应用" class="headerlink" title="(六) 外网如何访问本地基于Tomcat的web应用"></a>(六) 外网如何访问本地基于Tomcat的web应用</h3><h4 id="Tomcat-花生壳"><a href="#Tomcat-花生壳" class="headerlink" title="Tomcat + 花生壳"></a>Tomcat + 花生壳</h4><p>在本地开发好了一个web项目，我们部署在本地的tomcat服务器中，但是如果想要让别人通过外网访问我们的项目，帮助我们临时测试，或者提出意见，简单的可以通过Tomcat + 花生壳解决这个问题</p><p>首先自行安装注册花生壳这款软件，新建一条内网映射，输入相应数据</p><p><img src="http://image.ideal-20.cn/basic/5.1-01-004.png" alt></p><p>我们通过外网访问一下</p><p>!<img src="http://image.ideal-20.cn/basic/5.1-01-007.png" alt></p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 5.1-Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-jQuery</title>
      <link href="/2019/09/17/4.3-jquery/001-jquery/"/>
      <url>/2019/09/17/4.3-jquery/001-jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="简介-从这里开始"><a href="#简介-从这里开始" class="headerlink" title="简介 - 从这里开始"></a>简介 - 从这里开始</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h3><p>JavaScript + Query（查询） = jQuery ，jQuery是一个非常优秀的 JavaScript框架，<strong>在js的基础上做出了很多扩展操作</strong>，例如，<strong>事件处理</strong>，<strong>动画</strong>，或者<strong>与Ajax交互</strong>，并且可以更加快速的查询使用页面上的一些控件，总之还是非常值得我们学习的</p><p><strong>本质：就是封装了js原生代码的一些js文件</strong></p><h3 id="二-版本"><a href="#二-版本" class="headerlink" title="(二) 版本"></a>(二) 版本</h3><h4 id="基本版本介绍"><a href="#基本版本介绍" class="headerlink" title="基本版本介绍"></a>基本版本介绍</h4><table><thead><tr><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>1.x</td><td>兼容ie678，使用最为广泛的，官方只做bug维护，功能不再新增，最终版本：1.12.4</td></tr><tr><td>2.x</td><td>不兼容ie678，很少人使用，官方只做bug维护，功能不再新增，最终版本：2.2.4</td></tr><tr><td>3.x</td><td>不兼容ie678，只支持最新的浏览器。目前该版本是官方主要更新维护的版本。截至2019年4月11日，最新版本：3.4.1</td></tr></tbody></table><h4 id="选择什么版本呢？"><a href="#选择什么版本呢？" class="headerlink" title="选择什么版本呢？"></a>选择什么版本呢？</h4><p>首先呢，版本的选择不是固定的，我们需要根据我们的需求决定，关键在于我们需要项目兼容一个什么样的平台环境，通过上面的介绍可以看到，只有 1.x 版本是兼容所有浏览器的，但3.x却是持续更新中的较新版本，自然拥有许多新特性</p><p>所以总结一下：</p><p><strong>PC端</strong>我们最好选择 <strong>jQuery 1.9版本</strong>（1.7以及以上要好一些），首先IE8的兼容还是有必要的，API版本已经在旧版本（1.7以下）有了很大的完善，选择器，函数都较旧版本趋于规范以及高效（如.on函数）</p><p><strong>移动端</strong>我们当然选择新版本 也就是 Jquery3.x版本，应该3.41就是最后的3系小版本了</p><p>下载好对应版本后，有两个文件 <strong>jquery-x.x.x.js</strong> 和 <strong>jquery-x.x.x.min.js</strong> 其中第一个文件会大一些但是缩进清晰代码条理，适合程序员查看源码，但是我们真正导入的是 min文件，它没有任何缩进，但是文件体积却小很多，加载更快</p><h2 id="三-jQuery的好处——封装优化代码"><a href="#三-jQuery的好处——封装优化代码" class="headerlink" title="(三) jQuery的好处——封装优化代码"></a>(三) jQuery的好处——封装优化代码</h2><p> 既然 JQuery 是在 JavaScript的基础上进行封装，封装从最表面来看，简化操作是一定的，那么我们自已试着封装一下看一下与原来的js代码会有什么区别</p><p>1、定义三个div，分别设置其id以及内容，要求通控件过id获取其内容</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is div3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>2、使用js实现</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> d1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> d2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> d3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>2、自定义模拟封装实现</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">alertById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> elementById <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>elementById<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">alertById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alertById</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alertById</span><span class="token punctuation">(</span><span class="token string">"d3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里很好理解，我们将一些重复的代码封装成方法，很好的优化了代码，毕竟在js中控制控件的方法名都很长</p><p>那么Jquery又是怎么封装的呢，参考第五点中</p><h2 id="四-jQuery和js对象的区别与联系"><a href="#四-jQuery和js对象的区别与联系" class="headerlink" title="(四) jQuery和js对象的区别与联系"></a>(四) jQuery和js对象的区别与联系</h2><p>JQuery和JavaScript对象之间的方法是不通用的，但是两者又可以相互转换由于JQuery相较与js更加简洁方便所以我们更倾向于将Js对象转换为JQuery对象</p><h3 id="1-jQuery-–-gt-JavaScript"><a href="#1-jQuery-–-gt-JavaScript" class="headerlink" title="(1) jQuery –&gt; JavaScript"></a>(1) jQuery –&gt; JavaScript</h3><ul><li>jQuery对象[索引]</li><li>jQuery对象.get(索引)</li></ul><h3 id="2-JavaScript-–-gt-jQuery"><a href="#2-JavaScript-–-gt-jQuery" class="headerlink" title="(2) JavaScript –&gt; jQuery"></a>(2) JavaScript –&gt; jQuery</h3><ul><li>$(js对象)</li></ul><h2 id="五-jQuery入门程序"><a href="#五-jQuery入门程序" class="headerlink" title="(五) jQuery入门程序"></a>(五) jQuery入门程序</h2><p>这就是一个最简单的jQuery程序，作用是通过id获取输出控件中的内容，可以对照一下第三点中的js代码实现，看看是否jQuery是否简单了很多</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.3.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is div3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>jQuery的语法主要是为了方便我们能对Html页面中的元素进行查询以及操作，所以我们首先先来了解一下如何准确的获取到我们所需要的元素呢？至于我们可以对其进行的操作（一些API的介绍）我们放到后面介绍</p><h2 id="六-选择器-这东西可得会用"><a href="#六-选择器-这东西可得会用" class="headerlink" title="(六) 选择器-这东西可得会用"></a>(六) 选择器-这东西可得会用</h2><p>下面的选择器我将基本所有的情况都有书写，但是个别用的比较少的我省略了</p><h3 id="基本选择器（元素、id、类…）"><a href="#基本选择器（元素、id、类…）" class="headerlink" title="基本选择器（元素、id、类…）"></a>基本选择器（元素、id、类…）</h3><ul><li>元素选择器<ul><li>$(“html元素名”)：获取所有对应的HTML元素</li></ul></li><li>id选择器<ul><li>$(“#id属性值”)：根据id的属性值获取到匹配的元素</li></ul></li><li>类选择器<ul><li>$(“.class属性值”)：获取与class属性值匹配的元素</li></ul></li></ul><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><ul><li><p>后代选择器</p><ul><li>$(“A B”)：获取A元素内部的所有B元素</li></ul></li><li><p>子选择器（父子关系）</p><ul><li>$(“A &gt; B”)：获取A元素内部的所有B子元素</li></ul></li><li><p>兄弟选择器</p><ul><li><p>$(“A + B”)：获取A元素后第一个B元素</p></li><li><p>$(“A ~ B”)：获取A元素后面的所有B元素</p></li></ul></li></ul><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul><li><p>属性名称选择器</p><ul><li>$(“A[属性名]”)：获取含有指定属性的选择器</li></ul></li><li><p>属性选择器</p><ul><li>$(“A[属性名 = ‘值’]”)：获取含有指定属性等于指定值的选择器</li></ul></li><li><p>复合属性选择器</p><ul><li>$(“A[属性名 = ‘值’][]…”) ：获取包含多个属性条件的选择器</li></ul></li></ul><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><ul><li>大于索引选择器<ul><li>gt(index)：获取大于指定索引的元素</li></ul></li><li>小于索引选择器<ul><li>lt(index)：获取小于指定索引的元素</li></ul></li><li>等于索引选择器<ul><li>eq(index)：获取等于指定索引的元素</li></ul></li><li>首/尾元素选择器<ul><li>first/last：获取选中元素中的第一个/最后一个元素</li></ul></li><li>标题选择器<ul><li>header 获取标题</li></ul></li></ul><h2 id="表单所需选择器"><a href="#表单所需选择器" class="headerlink" title="表单所需选择器"></a>表单所需选择器</h2><ul><li>选中选择器<ul><li>checked：获取单选框/复选框中所选中的元素</li><li>selected：获取下拉框中选中的元素</li></ul></li><li>可用/不可用元素<ul><li>enabled/disabled：获取可用/不可用元素</li></ul></li></ul><h1 id="七-Dom操作"><a href="#七-Dom操作" class="headerlink" title="(七) Dom操作"></a>(七) Dom操作</h1><p>认识了这么多选择器，我们可以轻易的获取到  HTML中的各种标签，但是只有对其进行一定的操作，我们才可以让页面 “动起来” ~</p><h2 id="标签内容和属性"><a href="#标签内容和属性" class="headerlink" title="标签内容和属性"></a>标签内容和属性</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><ul><li>text()：获取元素的标签体中的文本内容 eg：<code>&lt;div&gt;&lt;p&gt;你好&lt;/p&gt;&lt;/div&gt;</code>  ——&gt; 你好</li><li>html()：获取元素的标签体 eg：<code>&lt;div&gt;&lt;p&gt;你好&lt;/p&gt;&lt;/div&gt;</code> ——&gt; <code>&lt;p&gt;你好&lt;/p&gt;</code></li><li>val()：获取元素的value属性值</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="普通属性"><a href="#普通属性" class="headerlink" title="普通属性"></a>普通属性</h4><ul><li><p>attr()或prop()：获取元素的属性</p></li><li><p>removeAttr()或removeProp()：删除属性</p><p>注意：如果操作的是元素的固有属性，推荐使用prop，自定义属性，推荐使用attr</p></li></ul><h4 id="针对class的属性"><a href="#针对class的属性" class="headerlink" title="针对class的属性"></a>针对class的属性</h4><ul><li>addClass()：增加class属性值</li><li>removeClass()：删除class属性值</li><li>toggleClass()：切换class属性</li><li>toggleClass(“A”)：添加或者将原存在的属性值A删掉</li></ul><h2 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h2><ul><li>append()：子元素追加到父元素末尾 eg：父.append(子) 下同</li><li>prepend()：子元素添加到父元素的开头</li><li>appendTo()：将调用元素添加到参数元素内部末尾 eg：A.appendTo(B) 下同</li><li>prependTo()：将调用元素添加到参数元素内部开头</li><li>after()：将参数元素添加到调用元素后面 eg：A.after(B) B添加到A后 </li><li>before()：将参数元素添加到调用元素前面</li><li>insertAfter()：调用元素添加到参数元素后面   eg：A.after(B) A添加到B后 </li><li>insertBefore()：调用元素添加到参数元素前面</li><li>remove()：移除元素</li><li>empty()：清空元素的所有后代元素</li><li>clone()：只复制样式，不复制行为</li><li>clone(true)：同时复制样式和行为</li></ul><h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><h3 id="显示和隐藏元素"><a href="#显示和隐藏元素" class="headerlink" title="显示和隐藏元素"></a>显示和隐藏元素</h3><h4 id="默认方式"><a href="#默认方式" class="headerlink" title="默认方式"></a>默认方式</h4><ul><li>show()</li><li>hide()</li><li>toggle()</li></ul><h4 id="滑动方式"><a href="#滑动方式" class="headerlink" title="滑动方式"></a>滑动方式</h4><ul><li><p>slideDown()</p></li><li><p>slideUp()</p></li><li><p>slideToggle()</p></li></ul><h4 id="淡入淡出方式"><a href="#淡入淡出方式" class="headerlink" title="淡入淡出方式"></a>淡入淡出方式</h4><ul><li><p>fadeIn()</p></li><li><p>fadeOut()</p></li><li><p>fadeToggle()</p></li></ul><p>注意：以上方法含有相同参数，eg：show([speed,[easing],[fn]])</p><p><strong>参数解释：</strong></p><p>[speed] 动画的速度 ，slow，normal，fast 或表示动画时长（毫秒为单位）</p><p>[easing] 切换效果 swing，linear</p><ul><li>swing：先慢，中快，后慢</li><li>linerr：匀速动画</li></ul><p>[fn] 动画完成时执行此函数</p><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><ul><li>each()</li></ul><p>使用：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//参数是一个需要进行处理的函数</span><span class="token comment" spellcheck="true">//index-索引</span><span class="token comment" spellcheck="true">//element-每一个元素对象</span>jquery对象<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>jQuery3.0后提供 for…of 方式，自行了解</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="关于事件的API"><a href="#关于事件的API" class="headerlink" title="关于事件的API"></a>关于事件的API</h3><ul><li><p><strong>ready</strong>：浏览器加载web页面时触发，后者不覆盖前者</p></li><li><p><strong>window.onload</strong>：浏览器加载web页面时触发，后者覆盖前者</p></li><li><p><strong>mouseover</strong> ：鼠标移入触发</p></li><li><p><strong>mouseover</strong> ：鼠标移出触发</p></li><li><p><strong>click</strong> ：单击触发</p></li><li><p><strong>dblclick</strong> ：双击触发</p></li><li><p><strong>change</strong> ：内容改变触发</p></li></ul><p>简单列举了几个常见的，如果需要使用更加丰富的api可以查一下文档</p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ol><li><p>标准绑定方式</p><p>jQuery对象.方法(回调函数)；</p></li><li><p>on绑定/off解绑</p><p>jQuery对象.on(“事件名称”,回调函数)</p><p>jQuery对象.on(“事件名称”)</p><p> 注意：如果off上不写参数，组件上的所有事件都会被解绑</p></li><li><p>toggle事件切换</p><p>jq对象.toggle(f1,f2…)</p><p>单击组件后，执行f1，第二次执行f2</p></li></ol><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 4.3-JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-JavaScript</title>
      <link href="/2019/09/17/4.2-javascript/001-javascript/"/>
      <url>/2019/09/17/4.2-javascript/001-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="一-基本概述"><a href="#一-基本概述" class="headerlink" title="(一) 基本概述"></a>(一) 基本概述</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><blockquote><p>JavaScript一种<strong>直译式脚本语言</strong>，是一种<strong>动态类型</strong>、<strong>弱类型</strong>、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于<strong>客户端</strong>的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加<strong>动态功能</strong></p></blockquote><p>脚本语言：不需要编译，可以直接被浏览器解析执行</p><p>客户端：专指浏览器</p><p>注意：Java 和 JavaScript 的区别相当于雷锋和雷峰塔</p><ul><li><p>java是sun（现为甲骨文）公司，现在是oracle；js是网景公司</p></li><li><p>JavaScript 是基于对象的，java是面向对象</p><ul><li>基于对象：提供好了很多对象，可以直接拿过来用</li></ul></li><li><p>java是强类型的语言，js是弱类型的语言</p><pre><code>          - 比如java里面 int i = &quot;10&quot;;          - js:  var i = 10; var m = &quot;10&quot;; // 比较随意</code></pre></li><li><p>JavaScript只需解析就可以执行，而java需要先编译成字节码文件，再执行</p></li></ul><h4 id="2-组成"><a href="#2-组成" class="headerlink" title="(2) 组成"></a>(2) 组成</h4><p><strong>(1) ECMAScript</strong>：客户端脚本语言的标准</p><ul><li><p>ECMA : 欧洲计算机协会</p></li><li><p>有ECMA组织制定的js的语法，语句…..</p><p><strong>(2) BOM</strong></p></li><li><p>broswer object model: 浏览器对象模型</p><p><strong>(3) DOM</strong></p></li><li><p>document object model：文档对象模型</p></li></ul><h3 id="二-基本语法"><a href="#二-基本语法" class="headerlink" title="(二) 基本语法"></a>(二) 基本语法</h3><h4 id="1-Js和html的结合方式"><a href="#1-Js和html的结合方式" class="headerlink" title="(1) Js和html的结合方式"></a>(1) Js和html的结合方式</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 第一种 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> js代码 </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 第二种 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="(2) 数据类型"></a>(2) 数据类型</h4><p>Java语言是强类型语言，而JavaScript是<strong>弱类型</strong>语言</p><p>而强弱类型定义的区别就是在开辟变量存储空间的时候，<strong>是否定义空间将来存储的数据类型</strong></p><p>Javascript 中定义变量均使用关键字 <strong>var</strong></p><table><thead><tr><th>原始类型</th><th>代码表示</th></tr></thead><tbody><tr><td>string：字符串</td><td>var str = “abc”;</td></tr><tr><td>number：数字类型</td><td>var m = 520;</td></tr><tr><td>boolean：true和false</td><td>var flag = true;</td></tr><tr><td>null</td><td>var date = new Date();获取对象的引用，null表示对象引用为空 所有对象的引用也是object</td></tr><tr><td>undifined</td><td>var aa;定义一个变量，没有赋值</td></tr><tr><td>typeof();</td><td>查看当前变量的数据类型</td></tr></tbody></table><h4 id="3-基本语句"><a href="#3-基本语句" class="headerlink" title="(3) 基本语句"></a>(3) 基本语句</h4><p><strong>A：if 判断语句</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">=</span>：表示赋值<span class="token operator">==</span>：表示判断</code></pre><p><strong>B：switch判断语句</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p><strong>C：循环语句 for  while    do-while</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>D：for循环</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>i<span class="token operator">++</span> <span class="token operator">++</span>i和java里面一样</code></pre><h4 id="4-基本运算符"><a href="#4-基本运算符" class="headerlink" title="(4) 基本运算符"></a>(4) 基本运算符</h4><p><strong>A： js里面不区分整数和小数（至少你我都有开心过，就足够）</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>j<span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>B：字符串的相加和相减的操作</strong></p><p>如果相加时候，做是字符串连接</p><p>如果相减，做的是相减的运算</p><p><strong>C: boolean类型也可以操作</strong></p><p>true = 1，false = 0</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><strong>D:  == 和 === 区别 （做判断）</strong></p><p>== ：比较的只是值</p><p>===：全等于，在比较之前，先判断类型，如果类型不一样，则直接返回false</p><p><strong>E：直接向页面输出的语句（可以把内容显示在页面上）</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//可以向页面输出变量，固定值和html代码</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>"test<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>"<span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-数组"><a href="#5-数组" class="headerlink" title="(5) 数组"></a>(5) 数组</h4><p> java里面的数组 定义 int[] arr = {1,2,3};</p><p>定义方式（三种）</p><p><strong>第一种：</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>第二种：</strong>使用内置对象 Array对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义一个数组，数组的长度是5</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span></code></pre><p><strong>第三种：</strong>使用内置对象 Array</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个数组</span><span class="token comment" spellcheck="true">//数组里面的元素是3 4 5 </span></code></pre><p>数组里面有一个属性  length：获取到数组的长度</p><p> <strong>Js中数组可以存放不同的数据类型的数据</strong></p><h4 id="6-定义函数"><a href="#6-定义函数" class="headerlink" title="(6) 定义函数"></a>(6) 定义函数</h4><p><strong>第一种</strong> 使用到一个关键字 function</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可加参</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"just for test"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回值可有可无</span><span class="token punctuation">}</span></code></pre><p><strong>第二种</strong> 匿名函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">functon</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体和返回值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>第三种</strong> 动态函数(了解即可)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"参数列表"</span>，方法体和返回值<span class="token punctuation">)</span></code></pre><h4 id="7-全局变量和局部变量"><a href="#7-全局变量和局部变量" class="headerlink" title="(7) 全局变量和局部变量"></a>(7) 全局变量和局部变量</h4><p><strong>全局变量：</strong>在script标签里面定义一个变量</p><p>这个变量在页面中js部分都可以使用</p><p>在方法外部使用，在方法内部使用，在另外一个script标签使用</p><p><strong>局部变量：</strong>在方法内部定义一个变量，只能在方法内部使用</p><p>如果在方法的外部调用这个变量，提示出错</p><p> SCRIPT5009: “xx”未定义 </p><h4 id="8-为什么script有时候会放到-lt-body-gt-后"><a href="#8-为什么script有时候会放到-lt-body-gt-后" class="headerlink" title="(8) 为什么script有时候会放到&lt;/body&gt;后"></a>(8) 为什么script有时候会放到<code>&lt;/body&gt;</code>后</h4><p>在js里面需要获取到input里面的值，如果把script标签放到head    里面会出现问题。</p><p>Html解析是从上到下解析的，script标签放在head里面，直接在里面取input里面的值，因为页面还没有解析到imput那一行，肯定无法取到</p><h3 id="三-常见对象"><a href="#三-常见对象" class="headerlink" title="(三) 常见对象"></a>(三) 常见对象</h3><h4 id="1-String-对象"><a href="#1-String-对象" class="headerlink" title="(1) String 对象"></a>(1) String 对象</h4><p>属性：length：字符串的长度</p><p><strong>方法</strong>：</p><p><strong>1. 与html相关的方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：加粗<span class="token function">fontcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 设置字符串的颜色<span class="token function">fontsize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 设置字体的大小<span class="token function">link</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 将字符串显示成超链接    str4<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token string">"hello.html"</span><span class="token punctuation">)</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">sup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 下标和上标</code></pre><p><strong>2. 与java相似的方法</strong></p><pre class=" language-js"><code class="language-js"><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 连接字符串    <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"dfg"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>返回指定指定位置的字符串    <span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字符位置不存在，返回空字符串</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>： 返回字符串位置    <span class="token keyword">var</span> str4 <span class="token operator">=</span> <span class="token string">"poiuyt"</span><span class="token punctuation">;</span>    Document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//字符不存在返回-1</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：切分字符串，返回数组    <span class="token keyword">var</span> str5 <span class="token operator">=</span> <span class="token string">"a-b-c-d"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr1 <span class="token operator">=</span> str5<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"length: "</span><span class="token operator">+</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ： 替换字符串    传递两个参数：        <span class="token operator">--</span> 第一个参数是原始字符        <span class="token operator">--</span> 要替换成的字符    <span class="token keyword">var</span> str6 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str6<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str6<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> str7 <span class="token operator">=</span> <span class="token string">"abcdefghuiop"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//document.write(str7.substr(5,5));  </span>    <span class="token comment" spellcheck="true">//从第五位开始，向后截取五个字符</span>        从第几位开始，向后截取几位    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str7<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//从第几位开始到第几位结束  [3,5)</span>        从第几位开始，到第几位结束，但是不包含最后哪一位</code></pre><h4 id="2-Array对象"><a href="#2-Array对象" class="headerlink" title="(2) Array对象"></a>(2) Array对象</h4><pre class=" language-js"><code class="language-js">创建数组（三种）        <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//长度是3</span>        <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组中的元素是1 2 3</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个空数组</span>属性：length：查看数组的长度<span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 向数组末尾添加元素，返回数组的新的长度        如果添加的是一个数组，这个时候把数组当做一个整体字符串添加进去<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：表示 删除最后一个元素，返回删除的那个元素<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 颠倒数组中的元素的顺序</code></pre><h4 id="3-Date对象"><a href="#3-Date对象" class="headerlink" title="(3) Date对象"></a>(3) Date对象</h4><pre class=" language-js"><code class="language-js">在java里面获取当前时间     Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//格式化 </span>    <span class="token comment" spellcheck="true">//toLocaleString()   //2015年4月17日 11:17:12</span>js里面获取当前时间    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前时间    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Fri Apr 17 10:47:46 UTC+0800 2015 </span>    <span class="token comment" spellcheck="true">//转换成习惯的格式</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的年方法    <span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：得到当前的年    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"year: "</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的月方法    <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前的月    返回的是 <span class="token number">0</span><span class="token operator">-</span><span class="token number">11</span>月，如果想要得到准确的值，加<span class="token number">1</span>    <span class="token keyword">var</span> date1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"month: "</span><span class="token operator">+</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的星期    <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：星期<span class="token punctuation">,</span>返回的是 <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">~</span> <span class="token number">6</span><span class="token punctuation">)</span>    外国朋友，把星期日作为一周的第一天，星期日返回的是 <span class="token number">0</span>    而星期一到星期六 返回的是 <span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"week: "</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的日    <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：得到当前的天 <span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"day: "</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的小时    <span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取小时    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hour: "</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的分钟    <span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：分钟    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"minute: "</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前的秒    <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 秒    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"second: "</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取毫秒数    <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    返回的是<span class="token number">1970</span> <span class="token number">1</span> <span class="token number">1</span> 至今的毫秒数    应用场景：        使用毫秒数处理缓存的效果（不有缓存）        http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">?</span>毫秒数</code></pre><h4 id="4-Math对象"><a href="#4-Math对象" class="headerlink" title="(4) Math对象"></a>(4) Math对象</h4><pre class=" language-js"><code class="language-js">里面的都是静态方法，使用可以直接使用 Math<span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">ceil</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> 向上舍入（进上去）<span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>：向下舍入（舍掉）<span class="token function">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>：四舍五入<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：得到随机数（伪随机数）    得到<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>的随机数        Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span>        Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-全局函数"><a href="#5-全局函数" class="headerlink" title="(5) 全局函数"></a>(5) 全局函数</h4><pre class=" language-js"><code class="language-js">由于不属于任何一个对象，直接写名称使用<span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：执行js代码（如果字符串是一个js代码，使用方法直接执行）    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"alert('1234');"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//alert(str);</span>    <span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ：对字符进行编码     <span class="token operator">-</span> <span class="token operator">%</span>E6<span class="token operator">%</span>B5<span class="token operator">%</span>8B<span class="token operator">%</span>E8<span class="token operator">%</span>AF<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span>E4<span class="token operator">%</span>B8<span class="token operator">%</span>AD<span class="token operator">%</span>E6<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span>87aaa1234    <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ：对字符进行解码    <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>判断当前字符串是否是数字    <span class="token operator">--</span> <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"aaaa"</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        如果是数字，返回<span class="token boolean">false</span>        如果不是数字，返回<span class="token boolean">true</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：类型转换    <span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-函数重载"><a href="#6-函数重载" class="headerlink" title="(6) 函数重载"></a>(6) 函数重载</h4><pre class=" language-js"><code class="language-js">什么是重载？方法名相同，参数不同js的重载是否存在？ 不存在    调用最后一个方法    把传递的参数保存到 arguments数组里面<span class="token function">s里面是否存在重载？</span><span class="token punctuation">(</span>面试题目<span class="token punctuation">)</span>    （<span class="token number">1</span>）js里面不存在重载。    （<span class="token number">2</span>）但是可以通过其他方式模拟重载的效果 （通过aruguments数组来实现）    <span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//比如传递的是两个参数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="四-bom对象-浏览器对象模型"><a href="#四-bom对象-浏览器对象模型" class="headerlink" title="(四) bom对象 (浏览器对象模型)"></a>(四) bom对象 (浏览器对象模型)</h3><pre class=" language-js"><code class="language-js">navigator： 获取客户机的信息（浏览器的信息）    navigator<span class="token punctuation">.</span>appName    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>screen<span class="token punctuation">:</span> 获取屏幕的信息    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">:</span> 请求url地址        <span class="token operator">-</span> href属性        A： 获取到请求的url地址            <span class="token operator">-</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>        B： 设置url地址            <span class="token operator">-</span> 页面上安置一个按钮，按钮上绑定一个事件，当我点击这个按钮，                    页面可以跳转到另外一个页面            <span class="token operator">-</span> location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"hello.html"</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"tiaozhuan"</span> onclick<span class="token operator">=</span><span class="token string">"href1();"</span><span class="token operator">/</span><span class="token operator">></span>        鼠标点击事件  onclick<span class="token operator">=</span><span class="token string">"js的方法;"</span>history：请求的url的历史记录        创建三个页面            <span class="token number">1</span>、创建第一个页面 a<span class="token punctuation">.</span>html 写一个超链接 到 b<span class="token punctuation">.</span>html            <span class="token number">2</span>、创建b<span class="token punctuation">.</span>html 超链接 到 c<span class="token punctuation">.</span>html            <span class="token number">3</span>、创建c<span class="token punctuation">.</span>html        到访问的上一个页面            history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        到访问的下一个页面            history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">window    窗口对象    顶层对象（所用的bom对象都是在window里面操作的）    方法        window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 页面弹出一个框，显示内容             <span class="token function">简写alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">onfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>： 确认框            <span class="token keyword">var</span> flag <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"显示的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>： 输入的对话框            window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"please input : "</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"在显示的内容"</span><span class="token punctuation">,</span><span class="token string">"输入框里面的默认值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>　打开一个新的窗口            <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"打开的新窗口的地址url"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"窗口特征，比如窗口宽度和高度"</span><span class="token punctuation">)</span>             创建一个按钮，点击这个按钮，打开一个新的窗口            window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.html"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"width=200,height=100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token function">关闭窗口</span><span class="token punctuation">(</span>浏览器兼容性比较差<span class="token punctuation">)</span>            window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            做定时器             <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"js代码"</span><span class="token punctuation">,</span>毫秒数<span class="token punctuation">)</span>  <span class="token number">1</span>秒<span class="token operator">=</span><span class="token number">1000</span>毫秒                表示每三秒，执行一次alert方法                window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"alert('123');"</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"js代码"</span><span class="token punctuation">,</span>毫秒数<span class="token punctuation">)</span>                表示在毫秒数之后执行，但是只会执行一次                表示四秒之后执行js代码，只会执行一次                window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"alert('abc');"</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 清除setInterval设置的定时器                <span class="token keyword">var</span> id1 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"alert('123');"</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//通过setInterval会有一个返回值</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>id1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 清除setTimeout设置的定时器                <span class="token keyword">var</span> id2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"alert('abc');"</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五-dom对象-文档对象模型"><a href="#五-dom对象-文档对象模型" class="headerlink" title="(五) dom对象 (文档对象模型)"></a>(五) dom对象 (文档对象模型)</h3><pre class=" language-js"><code class="language-js">文档：    超文本文档（超文本标记文档） html 、xml对象：    提供了属性和方法模型：使用属性和方法操作超文本标记型文档可以使用js里面的dom里面提供的对象，使用这些对象的属性和方法，对标记型文档进行操作想要对标记型文档进行操作，首先需要 对标记型文档里面的所有内容封装成对象        <span class="token operator">--</span> 需要把html里面的标签、属性、文本内容都封装成对象要想对标记型文档进行操作，解析标记型文档        <span class="token operator">-</span> 画图分析，如何使用dom解析html解析过程        根据html的层级结构，在内存中分配一个树形结构，需要把html中的每部分封装成对象，        A<span class="token punctuation">:</span>  document对象：整个文档        B<span class="token punctuation">:</span>  element对象：标签对象        C<span class="token punctuation">:</span>  属性对象        D<span class="token punctuation">:</span>  文本对象        E： Node节点对象：这个对象是这些对象的父对象            <span class="token operator">**</span><span class="token operator">*</span> 如果在对象里面找不到想要的方法，这个时候到Node对象里面去找</code></pre><p><img src="http://image.ideal-20.cn/basic/4.2-01-001.png" alt></p><h4 id="1-document-对象-表示整个文档"><a href="#1-document-对象-表示整个文档" class="headerlink" title="(1) document 对象(表示整个文档)"></a>(1) document 对象(表示整个文档)</h4><pre class=" language-js"><code class="language-js">常用方法    A<span class="token punctuation">:</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法：    （<span class="token number">1</span>）向页面输出变量（值）    （<span class="token number">2</span>）向页面输出html代码        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    B<span class="token punctuation">:</span> <span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    （<span class="token number">1</span>）通过id得到元素（标签）        <span class="token comment" spellcheck="true">//使用getElementById得到input标签</span>        <span class="token comment" spellcheck="true">//传递的参数是标签里面的id的值</span>        <span class="token keyword">var</span> input1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"nameid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//得到input里面的value值</span>        <span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//标签对象.属性名称</span>        <span class="token comment" spellcheck="true">//向input里面设置一个值value</span>        input1<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"bbbbb"</span><span class="token punctuation">;</span>    C<span class="token punctuation">:</span> <span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    （<span class="token number">1</span>）通过标签的name的属性值得到标签        返回的是一个集合（数组）            <span class="token comment" spellcheck="true">//使用getElementsByName得到input标签</span>            <span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//传递的参数是标签里面的name的值</span>            <span class="token comment" spellcheck="true">//alert(inputs.length);</span>            <span class="token comment" spellcheck="true">//遍历数组</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">//通过遍历数组，得到每个标签里面的具体的值</span>                <span class="token comment" spellcheck="true">//每次循环得到input对象，赋值到input1里面</span>                <span class="token keyword">var</span> input1 <span class="token operator">=</span> inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//得到每个input标签里面的value值</span>                <span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>         D<span class="token punctuation">:</span> <span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"标签名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            通过标签名称得到元素            <span class="token comment" spellcheck="true">//演示getElementsByTagName</span>            <span class="token comment" spellcheck="true">//传递的参数，是标签名称</span>            <span class="token keyword">var</span> inputs1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">//alert(inputs1.length);</span>            <span class="token comment" spellcheck="true">//遍历数组，得到每个input标签</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>inputs1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//得到每个input标签</span>                <span class="token keyword">var</span> input1 <span class="token operator">=</span> inputs1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//得到value值</span>                <span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        注意            如果只有一个标签，这个标签只能使用name获取            使用getElementsByName返回的是一个数组，            但是现在只有一个元素，这个时候不需要遍历，而是可以直接通过数组的下标获取到值            <span class="token comment" spellcheck="true">//通过name得到input标签</span>            <span class="token keyword">var</span> inputs2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"name11"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>inputs2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> inputss <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>inputss<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-element对象-标签对象"><a href="#2-element对象-标签对象" class="headerlink" title="(2) element对象(标签对象)"></a>(2) element对象(标签对象)</h4><pre class=" language-js"><code class="language-js">要操作element对象，首先必须要获取到element，使用document里面相应的方法获取方法（<span class="token number">1</span>）获取属性里面的值<span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"属性名称"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> input1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"inputid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//alert(input1.value);</span>    <span class="token function">alert</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>（<span class="token number">2</span>）设置属性的值    input1<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>（<span class="token number">3</span>）删除属性    input1<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>不能删除value想要获取标签下面的子标签使用属性 childNodes，但是这个属性兼容性很差获得标签下面子标签的唯一有效办法，使用getElementsByTagName方法    <span class="token keyword">var</span> ul11 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ulid1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取ul下面的子标签</span>    <span class="token comment" spellcheck="true">//var lis = ul11.childNodes;</span>    <span class="token comment" spellcheck="true">//alert(lis.length);</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> ul11<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-Node-对象属性一"><a href="#3-Node-对象属性一" class="headerlink" title="(3) Node 对象属性一"></a>(3) Node 对象属性一</h4><pre class=" language-js"><code class="language-js"><span class="token number">1</span>）nodeName          （<span class="token number">2</span>）nodeType         （<span class="token number">3</span>）nodeValue    <span class="token operator">*</span> 使用dom解析html时候，需要html里面的标签，属性和文本都封装成对象    <span class="token operator">*</span> 标签节点对应的值        nodeType： <span class="token number">1</span>        nodeName： 大写标签名称  比如SPAN        nodeValue<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token operator">*</span> 属性节点对应的值        nodeType： <span class="token number">2</span>        nodeName： 属性名称        nodeValue<span class="token punctuation">:</span> 属性的值    <span class="token operator">*</span> 文本节点对应的值        nodeType： <span class="token number">3</span>        nodeName： #text        nodeValue<span class="token punctuation">:</span> 文本内容</code></pre><h4 id="4-Node-对象属性二"><a href="#4-Node-对象属性二" class="headerlink" title="(4) Node 对象属性二"></a>(4) Node 对象属性二</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>qqqqq<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>wwww<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>父节点    ul是li的父节点    parentNode        <span class="token keyword">var</span> li1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"li1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ul1 <span class="token operator">=</span> li1<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>ul1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span> 子节点        li是ul的子节点        childNodes：得到所有子节点，但是兼容性很差        firstChild：获取第一个子节点            <span class="token keyword">var</span> ul1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ulid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> li1 <span class="token operator">=</span> ul1<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>li1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastChild：获取最后一个子节点            <span class="token keyword">var</span> li4 <span class="token operator">=</span> ul1<span class="token punctuation">.</span>lastChild<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>li4<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span> 同辈节点        li直接关系是同辈节点        nextSibling<span class="token punctuation">:</span> 返回一个给定节点的下一个兄弟节点。        previousSibling：返回一个给定节点的上一个兄弟节点。        <span class="token comment" spellcheck="true">//获取li的id是li3的上一个和下一个兄弟节点</span>        <span class="token keyword">var</span> li3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"li3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//alert(li3.nextSibling.id);</span>        <span class="token function">alert</span><span class="token punctuation">(</span>li3<span class="token punctuation">.</span>previousSibling<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-操作dom树"><a href="#5-操作dom树" class="headerlink" title="(5) 操作dom树"></a>(5) 操作dom树</h4><pre class=" language-js"><code class="language-js">appendChild方法           添加子节点到末尾           特点：类似于剪切粘贴的效果     <span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>oldNode<span class="token punctuation">)</span>方法        <span class="token operator">-</span> 在某个节点之前插入一个新的节点        <span class="token operator">-</span> 两个参数            <span class="token operator">*</span> 要插入的节点            <span class="token operator">*</span> 在谁之前插入        <span class="token operator">-</span> 插入一个节点，节点不存在，创建            <span class="token number">1</span>、创建标签            <span class="token number">2</span>、创建文本            <span class="token number">3</span>、把文本添加到标签下面        <span class="token operator">-</span> 代码        <span class="token comment" spellcheck="true">/*            1、获取到li13标签            2、创建li            3、创建文本            4、把文本添加到li下面            5、获取到ul            6、把li添加到ul下面（在&lt;li>貂蝉&lt;/li>之前添加 &lt;li>董小宛&lt;/li>）            */</span>        <span class="token comment" spellcheck="true">//获取li3 标签</span>        <span class="token keyword">var</span> li13 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"li13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建li</span>        <span class="token keyword">var</span> li15 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文本</span>        <span class="token keyword">var</span> text15 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"董小宛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把文本添加到li下面 appendChild</span>        li15<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text15<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取到ul</span>        <span class="token keyword">var</span> ul21 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ulid21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在&lt;li>貂蝉&lt;/li>之前添加 &lt;li>董小宛&lt;/li> </span>        <span class="token comment" spellcheck="true">//insertBefore(newNode,oldNode)</span>        ul21<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li15<span class="token punctuation">,</span>li13<span class="token punctuation">)</span><span class="token punctuation">;</span>        removeChild方法：删除节点        <span class="token operator">-</span> 通过父节点删除，不能自己删除自己        <span class="token operator">-</span> <span class="token comment" spellcheck="true">/*            1、获取到li24标签            2、获取父节点ul标签            3、执行删除（通过父节点删除）        */</span>        <span class="token comment" spellcheck="true">//获取li标签</span>        <span class="token keyword">var</span> li24 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"li24"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取父节点</span>        <span class="token comment" spellcheck="true">//两种方式  1、通过id获取 ； 2、通过属性 parentNode获取</span>        <span class="token keyword">var</span> ul31 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ulid31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除（通过父节点）</span>        ul31<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>li24<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">replaceChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>oldNode<span class="token punctuation">)</span>方法<span class="token punctuation">:</span> 替换节点        <span class="token operator">-</span> 不能自己替换自己，通过父节点替换        <span class="token operator">-</span> 两个参数        <span class="token operator">**</span> 第一个参数：新的节点（替换成的节点）        <span class="token operator">**</span> 第二个参数：旧的节点（被替换的节点）        <span class="token operator">-</span> 代码        <span class="token comment" spellcheck="true">/*            1、获取到li34            2、创建标签li            3、创建文本            4、把文本添加到li下面            5、获取ul标签（父节点）            6、执行替换操作 （replaceChild(newNode,oldNode)）        */</span>        <span class="token comment" spellcheck="true">//获取li34</span>        <span class="token keyword">var</span> li34 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"li34"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建li</span>        <span class="token keyword">var</span> li35 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文本</span>        <span class="token keyword">var</span> text35 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把文本添加到li下面</span>        li35<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text35<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取ul</span>        <span class="token keyword">var</span> ul41 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ulid41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//替换节点</span>        ul41<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li35<span class="token punctuation">,</span>li34<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">cloneNode</span><span class="token punctuation">(</span>boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> 复制节点        <span class="token operator">-</span> <span class="token comment" spellcheck="true">//把ul列表复制到另外一个div里面</span>        <span class="token comment" spellcheck="true">/*            1、获取到ul            2、执行复制方法 cloneNode方法复制 true            3、把复制之后的内容放到div里面去                ** 获取到div                ** appendChild方法        */</span>        <span class="token comment" spellcheck="true">//获取ul</span>        <span class="token keyword">var</span> ul41 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ulid41"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//复制ul，放到类似剪切板里面</span>        <span class="token keyword">var</span> ulcopy <span class="token operator">=</span> ul41<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取到div</span>        <span class="token keyword">var</span> divv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"divv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把副本放到div里面去</span>        divv<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ulcopy<span class="token punctuation">)</span><span class="token punctuation">;</span>※ 操作dom总结        <span class="token operator">*</span> 获取节点使用方法            <span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：通过节点的id属性，查找对应节点。            <span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：通过节点的name属性，查找对应节点。            <span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：通过节点名称，查找对应节点        <span class="token operator">*</span> 插入节点的方法            insertBefore方法：在某个节点之前插入            appendChild方法：在末尾添加，剪切黏贴        <span class="token operator">*</span> 删除节点方法            removeChild方法：通过父节点删除        <span class="token operator">*</span> 替换节点方法            replaceChild方法：通过父节点替换</code></pre><h3 id="六-innerHTML属性"><a href="#六-innerHTML属性" class="headerlink" title="(六) innerHTML属性"></a>(六) innerHTML属性</h3><pre class=" language-js"><code class="language-js">这个属性不是dom的组成部分，但是大多数浏览器都支持的属性    第一个作用：获取文本内容        <span class="token comment" spellcheck="true">//获取span标签</span>        <span class="token keyword">var</span> span1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>span1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    第二个作用：向标签里面设置内容（可以是html代码）        <span class="token comment" spellcheck="true">//向div里面设置内容 &lt;h1>AAAAA&lt;/h1></span>        <span class="token comment" spellcheck="true">//获取到div</span>        <span class="token keyword">var</span> div11 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置内容</span>        div11<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;h1>AAAAA&lt;/h1>"</span><span class="token punctuation">;</span></code></pre><h3 id="七-表单提交方式"><a href="#七-表单提交方式" class="headerlink" title="(七) 表单提交方式"></a>(七) 表单提交方式</h3><pre class=" language-js"><code class="language-js"><span class="token operator">*</span> 使用submit提交    <span class="token operator">&lt;</span>form<span class="token operator">></span>        <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token operator">*</span> 使用button提交表单        <span class="token operator">-</span> 代码        <span class="token comment" spellcheck="true">//实现提交方法</span>        <span class="token keyword">function</span> <span class="token function">form1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取form</span>            <span class="token keyword">var</span> form1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"form1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置action</span>            form1<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">"hello.html"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提交form表单</span>            form1<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">*</span> 使用超链接提交        <span class="token operator">-</span> 代码        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"hello.html?username=123456"</span><span class="token operator">></span>使用超链接提交<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>      onclick：鼠标点击事件      onchange：改变内容（一般和select一起使用）      onfocus<span class="token punctuation">:</span>得到焦点  <span class="token punctuation">(</span>ie5、某些版本的ie6<span class="token punctuation">)</span>      onblur<span class="token punctuation">:</span>失去焦点</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 4.2-JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-HTML5及CSS</title>
      <link href="/2019/09/17/4.1-html-css/001-html-css/"/>
      <url>/2019/09/17/4.1-html-css/001-html-css/</url>
      
        <content type="html"><![CDATA[<h1 id="前端语言基础：HTML5-amp-CSS"><a href="#前端语言基础：HTML5-amp-CSS" class="headerlink" title="前端语言基础：HTML5 &amp; CSS"></a>前端语言基础：HTML5 &amp; CSS</h1><h3 id="一-HTML5：超文本标记语言"><a href="#一-HTML5：超文本标记语言" class="headerlink" title="(一) HTML5：超文本标记语言"></a>(一) HTML5：超文本标记语言</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="(1) 基本概念"></a>(1) 基本概念</h4><ul><li>是由一系列<strong>成对</strong>出现的<strong>元素标签</strong>（标记）嵌套组合而成 ( XML也是标签构成的 )</li><li>这些标签以&lt;标签名称&gt;的形式出现，用于标记文本内容的含义</li><li>浏览器通过元素标签解析文本内容并将结果显示在网页上，而<strong>元素标签本身并不会被浏览器显示出来</strong></li></ul><h4 id="2-基本结构"><a href="#2-基本结构" class="headerlink" title="(2) 基本结构"></a>(2) 基本结构</h4><p>HTML5元素的内容一般以起始标签<strong>&lt;元素名&gt;</strong>开始，以结束标签<strong>&lt;/元素名&gt;</strong>终止</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!Doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>            ......    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        主体内容    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>DOCTYPE</strong>是<strong>Document Type</strong>的简写，含义为<strong>文档类型</strong>。</p><p>HTML5文档基础结构中第一行<strong><!DOCTYPE html></strong>就是<strong>HTML5的DOCTYPE声明</strong></p><p><code>&lt;html&gt; &lt;/html&gt;</code>  Html文件开始标签和结束的标签——<strong>文档的根标签</strong></p><p><code>&lt;head&gt; &lt;/head&gt;</code> <strong>指定html文档的一些属性</strong>，例如<strong>页面标题</strong>，<strong>字符集</strong>和<strong>关键字</strong>等-</p><ul><li><code>&lt;title&gt; &lt;/title&gt;</code>  网页标题标签，即被收藏以及搜索引擎中搜索出的名称</li><li><code>&lt;meta.../&gt;</code> 元数据标签，不显示，但是机器可读，常用于搜索引擎索引(SEO优化)<ul><li><strong>字符集声明</strong>（网页编码声明） <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li><li><strong>关键词声明</strong> <code>&lt;meta name=&quot;keywords&quot; content=&quot;Xx,Xx,Xx&quot; /&gt;</code></li><li><strong>页面描述声明</strong> <code>&lt;meta name=&quot;description&quot; content=&quot;This is a page about html5&quot; /&gt;</code></li></ul></li><li><code>&lt;style&gt; &lt;/style&gt;</code> <ul><li>可用于定义文档中指定区域的字体风格、背景颜色、对    齐方式等各类样式信息</li><li>Eg：<code>&lt;style&gt; p{color:read} &lt;/style&gt;</code></li></ul></li><li><code>&lt;link.../&gt;</code>  链接标签<ul><li>标签用于连接外部资源和当前HTML5文档，它只出现在首部标签    <code>&lt;head&gt; &lt;/head&gt;</code>中，通常用于<strong>连接外部样式表</strong></li><li>Eg：<code>&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; hred=&quot;test.css&quot;/&gt; &lt;/head&gt;</code></li></ul></li><li><code>&lt;script&gt; &lt;/script&gt;</code><ul><li>此标签为可选，取决于当前页面是否需要使用脚本内容，比如JavaScript。该标签可以直接<strong>引用外部脚本文件</strong>，也可以直接将脚本命令写在<code>&lt;script&gt; &lt;/script&gt;</code>标签中</li><li><code>&lt;head&gt; &lt;script src=&quot;test.js&quot;&gt;&lt;/script&gt; &lt;/head&gt;</code></li></ul></li></ul><p><code>&lt;body&gt; &lt;/body&gt;</code>显示在页面上的内容都写在body里面</p><h4 id="3-基本规范"><a href="#3-基本规范" class="headerlink" title="(3) 基本规范"></a>(3) 基本规范</h4><ol><li><p>HTML5使用<code>&lt;!--...--&gt;</code>标签为文档进行注释 （多行或者单行）</p></li><li><p>早期的HTML规范中，标签的大小写是不敏感的，可能存在大写标签的情况</p><p>万维网联盟（W3C）明确规定了在新版本<strong>HTML5中必须使用小写格式</strong>，包括元素标签本身和其中可能出现的属性均需要遵守此规范</p></li><li><p>一些标签，没有结束标签 ，在标签内结束</p><ul><li>比如 换行  <code>&lt;br/&gt;</code>（一般来说加上/更加标准）</li><li>XML规范中，所有的标签都必须有结束标签</li></ul></li><li><p>在HTML5文档中存在一些特殊字符无法直接使用。例如小于符号（&lt;）和大于符号（&gt;）是无法直接输出的，因为它们会被误认为是元素标签的组成部分；而连续空格也无法正确显示，会被浏览器缩减为单个空格。存在此类情况的一系列特殊字符在HTML5中称为<strong>字符实体</strong>（Character Entities）</p></li></ol><p><img src="http://image.ideal-20.cn/basic/4.1-01-002.png" alt></p><p><strong>html的操作思想 （理解即可）</strong></p><p>网页中有很多数据，不同的数据可能需要不同的显示效果，这个时候需要使用标签把要操作的数据包起来（封装起来），通过修改标签的属性值实现标签内数据样式的变化</p><p>一个标签相当于一个容器，想要修改容器内数据的样式，只需要改变容    器的属性值，就可以实现容器内数据样式的变化</p><h4 id="4-常用标签"><a href="#4-常用标签" class="headerlink" title="(4) 常用标签"></a>(4) 常用标签</h4><h5 id="1-文字标签：修改文字样式"><a href="#1-文字标签：修改文字样式" class="headerlink" title="1. 文字标签：修改文字样式"></a>1. 文字标签：修改文字样式</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>属性：    size:  文字的大小 取值范围 1-7,超出了7，默认还是7    face: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span>  <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>字体名称:<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    color: 文字颜色 （两种表示方式）    英文单词：red  green  blue  black  white  yellow    使用十六进制数表示 #ffffff :  RGB</code></pre><p><strong>2. 标题标签、段落标签、换行标签、水平线标签和特殊字符</strong></p><p><strong>A：标题标签</strong> </p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- h1 到 h6 大小依次变小，同时自动换行--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span> .......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><p><strong>B：段落标签</strong>    </p><p>p元素有多种属性，比较常用的是对齐方式align属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一段居中的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>一段居右的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span></code></pre><p><strong>C：换行标签</strong>    </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>换行标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>用于在当前位置产生一个换行，相当于一次回车键所    产生的效果。该标签单独使用，无结束标签建议使用该标签代替回车键，因为回车键所产生的多个连续换行会被浏览器自动省略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>标签每次只能换一行，如需多次换行，必须写多个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>标签</code></pre><p><strong>D：水平线标签</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span>代码    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><pre class=" language-html"><code class="language-html">属性    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>对齐方式<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>宽度<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>高度<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>颜色<span class="token punctuation">"</span></span> <span class="token attr-name">noshade</span><span class="token punctuation">></span></span>    align属性值：left（左对齐）、center（居中）、right（右对齐）    width：表示宽度，可以使用百分数，也可以用像素表示    size：表示高度，其值是数字 取值范围 1-7    color：代表颜色，默认黑色    noshade：代表不显示阴影，默认情况是显示阴影</code></pre><p>D：特殊字符**</p><pre class=" language-html"><code class="language-html">&lt;    <span class="token entity" title="&lt;">&amp;lt;</span>>    <span class="token entity" title="&gt;">&amp;gt;</span>空格    <span class="token entity" title="&nbsp;">&amp;nbsp;</span>&amp;    <span class="token entity" title="&amp;">&amp;amp;</span></code></pre><h5 id="3-文本格式标签"><a href="#3-文本格式标签" class="headerlink" title="3. 文本格式标签"></a>3. 文本格式标签</h5><pre class=" language-html"><code class="language-html">A. 字体标签      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span> B. 斜体字标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>C. 粗体字标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>D. 上标标签、下标标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>E. 修订标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span> 和 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>F. 预格式化标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span></code></pre><h5 id="4-列表标签"><a href="#4-列表标签" class="headerlink" title="4. 列表标签"></a>4. 列表标签</h5><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 无序列表 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>无序列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 有序列表 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>有序列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>TYPE取值</th><th>设置的符号样式</th></tr></thead><tbody><tr><td>1</td><td>以数字进行排列 ，系统默认</td></tr><tr><td>a</td><td>以小写字母排列</td></tr><tr><td>A</td><td>以大写字母排列</td></tr><tr><td>i</td><td>以小写的罗马数字排列</td></tr><tr><td>I</td><td>以大写的罗马数字排列</td></tr><tr><td>disc</td><td>圆点符号，系统默认</td></tr><tr><td>circle</td><td>空心原点</td></tr><tr><td>square</td><td>空心方块</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 定义列表 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>第一个词条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>第一个词条的定义    ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><h5 id="5-图像标签"><a href="#5-图像标签" class="headerlink" title="5. 图像标签"></a>5. 图像标签</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片的路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>语法结构为：&lt;img src="url" alt="替代文本" name="名字" width="宽度"     height="高度" border="边框” ></code></pre><pre class=" language-html"><code class="language-html">src:图片的路径width： 图片的宽度height：图片的高度alt: 图片上显示的文字，把鼠标移动到图片上，停留片刻显示内容有些浏览器下不显示（没有效果）</code></pre><h5 id="6-绝路径和相对路径"><a href="#6-绝路径和相对路径" class="headerlink" title="6. 绝路径和相对路径"></a>6. 绝路径和相对路径</h5><table><thead><tr><th>相对位置</th><th>输入方法</th><th>举例</th></tr></thead><tbody><tr><td>同一目录</td><td>直接输入链接的文件</td><td>a.html</td></tr><tr><td>链接上一目录</td><td>先输出 “../” 再输入文件名</td><td>../b.html</td></tr><tr><td>链接下一目录</td><td>输入目录和文件名，之间以 “/“ 分隔</td><td>test/c.html</td></tr></tbody></table><h5 id="7-超链接标签"><a href="#7-超链接标签" class="headerlink" title="7. 超链接标签"></a>7. 超链接标签</h5><p><strong>A: 链接资源</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>链接到资源的路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 显示在页面上的内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre><code>href: 链接的资源的地址target：设置打开的方式 ，默认是在当前页打开可以取四个值</code></pre><table><thead><tr><th>属性值</th><th>表示的含义</th></tr></thead><tbody><tr><td>_parent</td><td>在上一级窗口打开（常在框架页面中使用）</td></tr><tr><td>_blank</td><td>新建一个窗口打开</td></tr><tr><td>_self</td><td>在同一窗口打开，是默认取值</td></tr><tr><td>_top</td><td>忽略所有的框架结构，在浏览器的整个窗口打开</td></tr></tbody></table><p><strong>B: 定位资源</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 如果想要定位资源：定义一个位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 回到这个位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回到顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h5 id="8-移动文字标签"><a href="#8-移动文字标签" class="headerlink" title="8. 移动文字标签"></a>8. 移动文字标签</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>marquee</span><span class="token punctuation">></span></span>移动文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>marquee</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>属性</th><th>功能说明</th><th>属性取值</th><th>各属性值的功能</th></tr></thead><tbody><tr><td>behavior</td><td>设置文字的移动方式</td><td>Scroll、Slide、alternate</td><td>循环移动、移动一次停止、来回交替移动</td></tr><tr><td>direction</td><td>设置文字的移动方向</td><td>left、right、up、down</td><td>从右向左移动、从左向右移动、从下向上移动、从上向下移动</td></tr><tr><td>bgcolor</td><td>设置文字的背景颜色</td><td>英文颜色名称</td><td>表示所用颜色</td></tr><tr><td>width</td><td>设置文字背景的宽</td><td>数字 (或者百分比)</td><td>设置背景的绝对宽度</td></tr><tr><td>heigth</td><td>设置文字背景的高</td><td>数字 (或者百分比)</td><td>设置背景的绝对高度</td></tr><tr><td>hspace和vspace</td><td>设置文字背景和周围其他元素的空白间距</td><td>数字</td><td>设置文字背景和周围其他元素的空白间距的绝对值</td></tr><tr><td>loop</td><td>设置移动文字的循环次数</td><td>infinite、正整数</td><td>文字移动无限次、文字移动n次</td></tr><tr><td>sscrollmount</td><td>设置移动文字每次移动的距离</td><td>数字（默认单位px）</td><td>文字每次移动的距离</td></tr><tr><td>scrolldelay</td><td>设置移动文字每次移动后的间歇时间</td><td>数字（默认单位px）</td><td>文字每次移动后的间歇时间</td></tr></tbody></table><h5 id="9-表格标签"><a href="#9-表格标签" class="headerlink" title="9. 表格标签"></a>9. 表格标签</h5><p>可以对数据进行格式化，使数据显示更加清晰，可用于静态页面和动态页面的排版</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>: 表示表格的范围    width：宽度    border：边框    cellpadding：定义内容和单元格的距离    cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、    bgcolor：背景色    align：对齐方式        tr：定义行            bgcolor：背景色            align：对齐方式        td：定义单元格            colspan：合并列            rowspan：合并行    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>:表格的标题</code></pre><h5 id="10-表单标签"><a href="#10-表单标签" class="headerlink" title="10. 表单标签"></a>10. 表单标签</h5><p><strong>概念</strong>：用于采集用户输入的数据，用于和服务器交互，例如登录或者注册界面</p><pre><code>&lt;form&gt;&lt;/form&gt;: 定义一个表单的范围</code></pre><pre class=" language-html"><code class="language-html">属性action 指定提交数据的URL，默认提交到当前页面method 指定表单提交方式，常用的有两种，get(默认)和post</code></pre><p>简单说一说： get和post区别？</p><p>​    1、get请求地址栏会携带提交的数据，post不会携带</p><p>​    2、get请求安全级别较低，post较高</p><p>​    3、get请求数据大小的限制，post没有限制</p><p><strong>输入项：可以输入内容或者选择内容的部分</strong></p><pre class=" language-html"><code class="language-html">大部分的输入项 使用  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入项的类型<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>在输入项里面需要有一个name属性普通输入项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>密码输入项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>单选输入项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>复选输入项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--               在里面需要属性 name              name的属性值必须要相同              必须有一个value值              实现默认选中的属性               checked="checked"            --></span>文件输入项 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> （后面上传时候用到） 下拉输入项 （不是在input标签里面的）    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1991<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1991<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1992<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1992<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1993<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1993<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    - 默认选择         selected="selected"文本：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>隐藏项（不会显示在页面上，但是存在于html代码里面）：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>提交按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>使用图片提交：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>重置按钮： 回到输入项的初始状态：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>普通按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="11-容器标签"><a href="#11-容器标签" class="headerlink" title="11. 容器标签"></a>11. 容器标签</h5><pre class=" language-html"><code class="language-html">A. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>标签标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>可将网页页面分割成不同的独立部分，通常用于定义文档中的区域或节。该标签是一个块级元素（block     level element），浏览器会自动在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>和<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>所标记的    区域前后自动放置一个换行符。每个标签可有一个独立的id号。同样属于块级元素的还有段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>、表格标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>、标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>等。B. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>标签标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>通常作为文本的容器，它没有特定的含义和样式，只有与CSS同时使用才可以为指定文本设置样式属性。该标签是一个内联元素（inline element），与块级元素相反，内联元素不会自动在前后自动放置换行符，因此内联元素会默认在同一行显示。</code></pre><p><img src="http://image.ideal-20.cn/basic/4.1-01-001.png" alt></p><h3 id="二-层叠样式表"><a href="#二-层叠样式表" class="headerlink" title="(二) 层叠样式表"></a>(二) 层叠样式表</h3><p>多个样式可以作用在同一个html元素上，使得页面效果更加好，CSS将网页内容和显示样式进行分离，降低耦合度，提高了开发效率</p><h4 id="1-CSS和html结合的方式"><a href="#1-CSS和html结合的方式" class="headerlink" title="(1) CSS和html结合的方式"></a>(1) CSS和html结合的方式</h4><ol><li><p><strong>内联样式</strong></p><p>在每个html标签上面都有一个属性 style，把css和html结合在一起</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p><strong>内部样式</strong></p><p>使用html的一个标签实现 <style>标签，写在head里面</p></li></ol><pre class=" language-html"><code class="language-html">&lt;style type = "texy/css"><span class="token style language-css"> <span class="token selector">div</span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>     <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li><p><strong>补充样式</strong></p><p>style标签里面 使用语句（在某些浏览器下不起作用）</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@import</span> <span class="token function">uel</span><span class="token punctuation">(</span>div.css<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li><p><strong>外部样式</strong></p><p>使用头标签 link，引入外部css文件，第一步 ，创建一个css文件</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css文件的路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>一般使用第四种方式</strong></p><p>优先级（一般情况）</p><p>由上到下，由外到内。优先级由低到高。</p><p>后加载的优先级高</p><h4 id="2-CSS的基本选择器"><a href="#2-CSS的基本选择器" class="headerlink" title="(2) CSS的基本选择器"></a>(2) CSS的基本选择器</h4><p>含义：要对哪个标签里面的数据进行操作</p><p><strong>(1) 标签选择器</strong></p><p>​      使用标签名作为选择器的名称 </p><pre class=" language-html"><code class="language-html">div {    background-color:gray;    clolr:white;}</code></pre><p><strong>(2) class选择器（div.ideal）</strong></p><p>​      每个html标签都有一个属性 class </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ideal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> .ideal {     background-color:orange; }</code></pre><p><strong>(3) id选择器 (div#ideal)</strong></p><p>​      每个html标签上面有一个属性 id</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ideal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>#ideal {    background-color:#333300;}</code></pre><p><strong>优先级：</strong>style &gt; id选择器 &gt; class选择器 &gt; 标签选择器</p><h4 id="3-CSS的扩展选择器"><a href="#3-CSS的扩展选择器" class="headerlink" title="(3) CSS的扩展选择器"></a>(3) CSS的扩展选择器</h4><p><strong>(1) 关联选择器（调用加空格）</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>设置div标签里面p标签的样式，嵌套标签里面的样式div p {    background-color:orange;}</code></pre><p><strong>(2) 组合选择器</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>把div和p标签设置成相同的样式，把不同的标签设置成相同的样式    div,p {    background-color:orange;}</code></pre><h4 id="4-CSS的盒子模型"><a href="#4-CSS的盒子模型" class="headerlink" title="(4) CSS的盒子模型"></a>(4) CSS的盒子模型</h4><p>在进行布局前需要把数据封装到一块一块的区域内（div）</p><p><strong>(1) 边框</strong></p><pre class=" language-html"><code class="language-html">border: 2px solid blue;border：统一设置上 border-top下 border-bottom左 border-left右 border-right</code></pre><p><strong>(2) 内边距</strong></p><pre><code>padding:20px;使用padding统一设置也可以分别设置上下左右四个内边距 </code></pre><p><strong>(3) 外边距</strong></p><pre><code>margin: 20px;可以使用margin统一设置也可以分别设置上下左右四个外边距</code></pre><p><strong>(4) float：浮动</strong></p><pre><code>left：文本流向对象的右边 right：文本流向对象的左边</code></pre><p><strong>(5) 布局定位</strong></p><pre><code>position：    属性值    absolute ：        将对象从文档流中拖出        可以是top、bottom等属性进行定位     relative ：        不会把对象从文档流中拖出        可以使用top、bottom等属性进行定位</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt=""></p></style></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 4.1-HTML&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-数据库连接池 &amp; JDBCTemplate</title>
      <link href="/2019/09/17/3.2-jdbc/003-shu-ju-ku-lian-jie-chi/"/>
      <url>/2019/09/17/3.2-jdbc/003-shu-ju-ku-lian-jie-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库连接池-amp-JDBCTemplate"><a href="#数据库连接池-amp-JDBCTemplate" class="headerlink" title="数据库连接池 &amp; JDBCTemplate"></a>数据库连接池 &amp; JDBCTemplate</h1><h3 id="一-数据库连接池"><a href="#一-数据库连接池" class="headerlink" title="(一) 数据库连接池"></a>(一) 数据库连接池</h3><blockquote><p>每一个事物都有其存在的意义，在初学jdbc的时候，我们建立数据库连接对象后，会对其进行释放，但是数据库连接的建立和关闭是非常消耗资源的，而且频繁的操作会使得性能变得低下，数据库连接池可以帮我们解决这样的问题</p></blockquote><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h4><blockquote><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。 </p></blockquote><p><strong>简单理解：就是一个存放数据库连接的容器，当用户需要访问数据库的时候，容器提供连接对象给用户用，之后用户将连接对象归还给容器</strong></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="(2) 使用"></a>(2) 使用</h4><p><strong>A</strong>：实现 <strong>javax.sql</strong> 包下的 <strong>DataSource</strong> 接口</p><ul><li>方法：获取连接：<code>getConnection()</code></li><li>方法：归还连接：<code>Connection.close()</code></li></ul><p>注意：在连接池中使用connection.close()方法，不代表关闭连接，代表归还连接</p><p><strong>B</strong>：我们可以使用一些开源的数据库厂商提供的实现</p><ul><li>C3P0</li><li>Druid (来自阿里巴巴)</li></ul><h4 id="3-C3P0"><a href="#3-C3P0" class="headerlink" title="(3) C3P0"></a>(3) C3P0</h4><p><strong>A</strong>：首先<strong>导入三个jar包</strong> c3p0-0.9.5.2.jar 、mchange-commons-java-0.2.12.jar、数据库驱动jar包</p><p><strong>B</strong>：修改配置文件</p><p><strong>C</strong>：<strong>创建数据库连接池对象</strong>——ComboPooledDataSource()</p><p><strong>D</strong>：<strong>获取连接</strong>——getConnection()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>c3p0<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>ComboPooledDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C3P0Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DataSource comboPooledDataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不指定则使用默认XML配置</span>        <span class="token comment" spellcheck="true">//数据库连接池对象 ComboPooledDataSource</span>        comboPooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接</span>        <span class="token keyword">return</span> comboPooledDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试输出日志及内容</span></code></pre><h4 id="4-Druid"><a href="#4-Druid" class="headerlink" title="(4) Druid"></a>(4) Druid</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载配置文件</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> DruidDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接池对象</span>        DataSource ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span>ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>试着用Druid写一个工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DataSource ds <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载配置文件</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> Connection connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet resultSet<span class="token punctuation">,</span> Statement statement<span class="token punctuation">,</span> Connection connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>工具类测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JDBCUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtilsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取连接</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql</span>            String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO account VALUES(NULL,?,?)"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取preparedStatement对象</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给?赋值</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>preparedStatement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二-Spring-JDBC"><a href="#二-Spring-JDBC" class="headerlink" title="(二) Spring JDBC"></a>(二) Spring JDBC</h3><p>Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化JDBC的开发</p><p>步骤：<br>    1. 导入jar包<br>    2. 创建JdbcTemplate对象，依赖于数据源DataSource<br>        JdbcTemplate template = new JdbcTemplate(ds);</p><p>​    3. 调用JdbcTemplate的方法来完成CRUD的操作</p><pre class=" language-java"><code class="language-java"><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>执行DML语句。增、删、改语句<span class="token function">queryForMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合    注意：这个方法查询的结果集长度只能是<span class="token number">1</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>查询结果将结果集封装为list集合    注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中<span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>查询结果，将结果封装为JavaBean对象    query的参数：RowMapper        一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装        <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>类型<span class="token operator">></span><span class="token punctuation">(</span>类型<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>queryForObject：查询结果，将结果封装为对象    一般用于聚合函数的查询</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/7/6/16bc64e5e727d294?w=258&h=258&f=jpeg&s=27413" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.2-JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库连接池 </tag>
            
            <tag> JDBCTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-JDBC控制事务</title>
      <link href="/2019/09/17/3.2-jdbc/002-jdbc-kong-zhi-shi-wu/"/>
      <url>/2019/09/17/3.2-jdbc/002-jdbc-kong-zhi-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h1><h3 id="一-事务基本认识"><a href="#一-事务基本认识" class="headerlink" title="(一) 事务基本认识"></a>(一) 事务基本认识</h3><h4 id="1-事务概述"><a href="#1-事务概述" class="headerlink" title="(1) 事务概述"></a>(1) 事务概述</h4><blockquote><p>事务指访问并可能更新数据库中各种数据项的一个程序执行单元(unit) </p></blockquote><p>事务就是用来管理一个包含多个步骤的业务操作，这些操作要么同时成功，要么同时失败！</p><p>而事务需要满足4个属性，即ACID属性：</p><p><strong>原子性（atomicity）</strong>、<strong>一致性（consistency）</strong>、<strong>隔离性 （isolation）和持久性（durability）</strong></p><ul><li><p><strong>原子性</strong>：一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做</p></li><li><p><strong>一致性</strong>：事务操作前后，数据的总量不发生变化</p></li><li><p><strong>隔离性</strong>：一个事务的执行不能被其他事务干扰，相互独立</p></li><li><p><strong>持久性</strong>：一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的</p></li></ul><h4 id="2-为什么使用事务"><a href="#2-为什么使用事务" class="headerlink" title="(2) 为什么使用事务"></a>(2) 为什么使用事务</h4><blockquote><p>举一个简单的例子：A账户要转给B账户500元，A账户的余额首先要减去500元，然后再在B账户的余额中增加500，但是如果在转账的过程中，由于网络原因或者程序内部异常问题而导致操作失败，那么注定我们的业务是失败的，但是我们必须做出一些控制措施保证业务的正确性，这时候就需要使用事务，即，A账户金额的减少和B账户金额的增长，写到一个事务中去，要么同时成功，要么同时失败！</p></blockquote><p>写一个小Demo看一下，先创建一张简单的表，账户A：admin  账户B：zhangsan 初始余额均为1000</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    balance <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'1000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>transaction<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JDBCUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 本例中使用了自定义的JDBCUtils类，详情可以参考以前的文章，或者按照默认方法连接数据库等 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"UPDATE account SET balance = balance - 500 WHERE id = 1"</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE account SET balance = balance + 500 WHERE id = 2"</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>preparedStatement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//数据库中结果</span>admin 余额：<span class="token number">500</span>zhangsan 余额：<span class="token number">1500</span></code></pre><p>我们模拟中途发生错误的情况</p><pre class=" language-java"><code class="language-java">connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String sql <span class="token operator">=</span> <span class="token string">"UPDATE account SET balance = balance - 500 WHERE id = 1"</span><span class="token punctuation">;</span>preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟错误发生在这里</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE account SET balance = balance + 500 WHERE id = 2"</span><span class="token punctuation">;</span>preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行结果</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArithmeticException<span class="token operator">:</span> <span class="token operator">/</span> by zero    at cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>TransactionDemo<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>TransactionDemo<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//数据库中的结果</span>admin 余额：<span class="token number">500</span>zhangsan 余额：<span class="token number">1000</span></code></pre><p>这个时候事务的重要性就体现出来了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码节选</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//开启会务，对数据的操作就不会立即生效</span>    connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"UPDATE account SET balance = balance - 500 WHERE id = 1"</span><span class="token punctuation">;</span>    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模拟错误</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    String sql2 <span class="token operator">=</span> <span class="token string">"UPDATE account SET balance = balance + 500 WHERE id = 2"</span><span class="token punctuation">;</span>    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果程序到此仍无异常，则提交数据</span>    connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关闭事务</span>    connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果出现异常，则事务回滚，即数据恢复原来的样子</span>        connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭事务</span>        connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>preparedStatement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在在中途出错的情况下，上面的程序也依旧抛出了异常，但是A账户余额没有减少，B账户余额也没有增多，我们所需要的效果也就达到了</p><h3 id="二-savepoint"><a href="#二-savepoint" class="headerlink" title="(二) savepoint"></a>(二) savepoint</h3><p><strong>savepoint</strong> 即设置<strong>保留点</strong>，事务可以回到 savepoint 而不影响 savepoint 前的变化，即<strong>不需要放弃整个事务</strong>，回滚到想要的位置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明一个保留点</span>SAVEPOINT 保留点名<span class="token comment" spellcheck="true">//回滚到保留点</span>ROLLBACK TO 保留点名<span class="token comment" spellcheck="true">//删除指定保留点(MySQL5及以后)</span>RELEASE SAVEPOINT 保留点名</code></pre><h3 id="三-事务的隔离级别"><a href="#三-事务的隔离级别" class="headerlink" title="(三) 事务的隔离级别"></a>(三) 事务的隔离级别</h3><p>事务是满足<strong>隔离性</strong>的，即一个事务的执行不能被其他事务干扰，相互独立，但是如果多个事务去操作同一批数据，一些问题则会出现，而数据库定义了4个隔离界别就解决了这些问题</p><h4 id="1-隔离级别"><a href="#1-隔离级别" class="headerlink" title="(1) 隔离级别"></a>(1) 隔离级别</h4><p>补充概念：</p><p><strong>脏读</strong></p><blockquote><p>脏读又称无效数据的读出，是指在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。 </p><p>也就是说 ：脏读，即读取到不正确数据，另一个事务可能还没提交数据，但这个事务已经读取了中间数，这个数据不能保证正确</p></blockquote><p><strong>不可重复读</strong></p><blockquote><p>指在数据库访问中，一个事物范围内两个相同的查询却返回了不同数据，较为容易理解的说法：在一个事务内读取两次同一个数据，在两次读取中途，另一个事务也访问同一数据并且修改，那么第一个事务两次读取的结果就有可能不同</p></blockquote><p><strong>幻读</strong></p><blockquote><p>幻读是指当事务不是独立执行时发生的一种现象。</p><p>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检索范围为只读，这样就避免了幻读。</p></blockquote><p><strong>A：Read uncommitted：读未提交</strong></p><p><strong>存在的问题</strong>：<strong>脏读</strong>、<strong>不可重复读</strong>、<strong>幻读</strong></p><p>假设场景：期末阅卷结束后，老师在教务系统录入分数，99分一不小心就点成了59分，但在正式系统未公布，学生通过另一台内部的系统已经查到自己分数为59分，后来老师及时发现了录入错误，将尚未提交的事物滚回，将分数修改正确</p><p><strong>B：Read committed：读已提交 (Oracle)</strong></p><p><strong>存在的问题</strong>：<strong>不可重复读</strong>、<strong>幻读</strong></p><p>假设场景：两个人共用一张银行卡，卡中有2000元，我看中一个1500元的键盘，准备刷卡，刷卡机检测到我还有2000余额，但是这时候，我女朋友买化妆品花掉了1800元，并且提交，而我刷卡机准备正式从我卡中扣钱的时候发现已经余额不足</p><p><strong>C：Repetable read：可重复读 (MySQL默认)</strong></p><p><strong>存在的问题</strong>：<strong>幻读</strong></p><p>假设场景：当刷卡机一旦读取到我的余额后，其他用户就不能再进行操作了，直到我的操作结束</p><p><strong>D：Serializable：序列化</strong></p><p><strong>可以解决一切问题</strong></p><p>是事务隔离级别最高的，但是这种事务隔离级别效率低下，比较耗数据库性能，一般不是很推荐使用</p><p><strong>简单归纳：脏读绝对不能存在，不可重复读和幻读在一定情况下可以存在</strong></p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.2-JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-JDBC</title>
      <link href="/2019/09/17/3.2-jdbc/001-jdbc/"/>
      <url>/2019/09/17/3.2-jdbc/001-jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-请再爱我一次"><a href="#JDBC-请再爱我一次" class="headerlink" title="JDBC 请再爱我一次"></a>JDBC 请再爱我一次</h1><h3 id="一-JDBC-入门"><a href="#一-JDBC-入门" class="headerlink" title="(一) JDBC 入门"></a>(一) JDBC 入门</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><blockquote><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范<strong>客户端</strong>程序如何来<strong>访问数据库</strong>的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。JDBC是<strong>面向关系型</strong>数据库的。</p></blockquote><p><strong>简单解释：</strong> 通过Java语言执行sql语句，从而操作数据库</p><h4 id="2-来由"><a href="#2-来由" class="headerlink" title="(2) 来由"></a>(2) 来由</h4><p>想要通过Java操作不同的数据库，应该根据数据库的不同而执行特定的API，而出于简化的想法，Sun公司，定义了一套面向所有关系型数据库的 API 即 JDBC ，其只提供接口，而具体实现去交给数据库厂商实现，而我们作为开发者，我们针对数据数据库的操作，只需要基于JDBC即可</p><h3 id="二-简单使用-JDBC"><a href="#二-简单使用-JDBC" class="headerlink" title="(二) 简单使用 JDBC"></a>(二) 简单使用 JDBC</h3><p>我们简单的使用JDBC去查询数据库中的数据，并且输出到控制台中</p><p>为了快速演示，我们新建一张非常简单的表</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE student(    id INT PRIMARY KEY AUTO_INCREMENT,    NAME VARCHAR(20),    score DOUBLE(4,1));INSERT student(id,NAME,score) VALUES (1,'张三',98);INSERT student(id,NAME,score) VALUES (2,'李四',96);INSERT student(id,NAME,score) VALUES (3,'王五',100);</code></pre><p>我们根据数据库中的信息写一个对应的学生类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略构造、Get、Set、toString方法</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><p>下面是对 JDBC 查询功能的简单使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//导入数据库驱动包</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取与数据库的连接对象</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db1"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root99"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql语句</span>            String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM student"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行sql语句的对象statement</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql语句，获取结果集</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历获取到的结果集</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Double score <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放资源，后调用的先释放</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Student<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">98.0</span><span class="token punctuation">}</span>Student<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">96.0</span><span class="token punctuation">}</span>Student<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'王五'</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">100.0</span><span class="token punctuation">}</span></code></pre><p>下面我们开始详细的解释一下上面所用到的各个对象</p><h3 id="三-JDBC-对象详解"><a href="#三-JDBC-对象详解" class="headerlink" title="(三) JDBC 对象详解"></a>(三) JDBC 对象详解</h3><h3 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="(1) DriverManager"></a>(1) DriverManager</h3><p><strong>A：加载驱动 –&gt; 注册驱动</strong></p><p>首先我们要知道加载驱动和注册驱动这两个词是什么意思，刚刚接触的时候，会有人总有朋友将<code>Class.forName(com.mysql.jdbc.Driver)</code> 当做注册数据库驱动的语句，但实际不然，它的作用是将参数表示的类加载到内存中，并且<strong>初始化</strong>，同时其中的静态变量也会被初始化，静态代码块也会被执行</p><ul><li><p>疑惑：能否使用ClassLoader 类中的loadClass()方法呢？</p><ul><li>答案是否定的，这个方法的特点是加载但不对该类初始化</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Class类源码节选 -jdk8</span><span class="token operator">*</span> A call to <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> causes the <span class="token keyword">class</span> <span class="token class-name">named</span><span class="token operator">*</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> X<span class="token punctuation">}</span> to be initialized<span class="token punctuation">.</span></code></pre><p>关于初始化问题这里简单提及一下，我们还是先回到我们主线来</p><p><strong>为什么不对类进行初始化，就不能选择了呢？</strong></p><p>这是因为真正实现<strong>注册驱动</strong>（告诉程序使用哪一个数据库驱动jar）的是:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerDriver</span><span class="token punctuation">(</span>Driver driver<span class="token punctuation">)</span></code></pre><p>我们在jar包中找到Driver这个类，查看其源码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//com.mysql.jdbc.Driver类中的静态代码块</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>类被加载后，执行了类中的静态方法DriverManager进行了注册驱动</p><p>我们也可能有见过下面2中的代码，但是实际上驱动会被加载两次，因为执行</p><p><code>new com.mysql.jdbc.Driver()</code> 已经加载了一次驱动</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.推荐</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.不推荐</span>DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>那么何必这么麻烦呢？<code>new com.mysql.jdbc.Driver()</code> 直接这样写不就挺好了吗？</p><p>但我们还是选择 拒绝！为什么呢？</p><p>如果我们这样写，对于jar包的依赖就比较重了，我们如果面临多个项目，或者需要修改数据库，就需要修改代码，重新编译，但是如果使用Class类加载的方式，既保证了静态代码块中所包含的注册驱动方法会被执行 ，而又将参数变成了字符串形式，我们之后便可以通过修改配置文件 “ ” 内的内容 + 添加jar包 的方式更灵活的处理问题，并且不需要重新编译！</p><p>注意：mysql5之后的驱动jar包可以省略注册驱动这一步，原因查看jar包中META-INF/services/java.sql.Driver文件</p><pre class=" language-java"><code class="language-java">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Drivercom<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>fabric<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>FabricMySQLDriver</code></pre><p><strong>B：获取数据库连接</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String user<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*    jdbc:mysql://ip地址(域名):端口号/数据库名称    Eg:jdbc:mysql://localhost:3306/db1    本地mysql，且端口为默认3306，则可简写：jdbc:mysql:///数据库名称*/</span></code></pre><h4 id="2-Connection-数据库连接对象"><a href="#2-Connection-数据库连接对象" class="headerlink" title="(2) Connection (数据库连接对象)"></a>(2) Connection (数据库连接对象)</h4><p><strong>A：获取执行sql的对象</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建向数据库发送sql语句的statement对象</span>Statement <span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建向数据库发送预编译sql语句的PrepareStement对象</span>PreparedStatement <span class="token function">prepareStatement</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>  </code></pre><p><strong>B：管理事务</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//开启事务：设置参数为false，即开启事务</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//提交事务</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//回滚事务</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><h4 id="3-Statement-执行sql语句的对象"><a href="#3-Statement-执行sql语句的对象" class="headerlink" title="(3) Statement (执行sql语句的对象)"></a>(3) Statement (执行sql语句的对象)</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//执行DQL（查询数据库中表的记录(数据)）</span>ResultSet <span class="token function">executeQuery</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行DML（对数据库中表的数据进行增删改）</span><span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行任意sql语句，但是目标不够明确，较少使用</span><span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把多条sql的语句放到同一个批处理中</span><span class="token function">addBatch</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//向数据库总发送一批sql语句执行</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>代码演示（以增加一条数据为例）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatementDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加载驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取数据库连接对象</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db1"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root99"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql语句</span>            String sql <span class="token operator">=</span> <span class="token string">"INSERT student(id,NAME,score) VALUES (NULL,'马六',88);"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行sql语句的对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql语句</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-ResultSet（结果集对象，封装查询结果）"><a href="#4-ResultSet（结果集对象，封装查询结果）" class="headerlink" title="(4) ResultSet（结果集对象，封装查询结果）"></a>(4) ResultSet（结果集对象，封装查询结果）</h4><p>ResultSet所代表的的是sql语句的结果集——执行结果，当Statement对象执行excuteQuery()后，会返回一个ResultSet对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)</span><span class="token comment" spellcheck="true">//如果是，则返回false，如果不是则返回true</span><span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取数据，Xxx代表数据类型  </span><span class="token function">getXxx</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span>Eg<span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">int</span>：代表列的编号<span class="token punctuation">,</span>从<span class="token number">1</span>开始   如： <span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> String：代表列名称。 如： <span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></code></pre><p>案例可参考开头快速使用部分，自行尝试读取数据库中数据后用集合框架装载</p><h3 id="四-事半功倍——工具类"><a href="#四-事半功倍——工具类" class="headerlink" title="(四) 事半功倍——工具类"></a>(四) 事半功倍——工具类</h3><p>通过封装一些方法，使得出现一个更加通用的工具类，我们可以通过properties配置文件 ，使得信息更加直观且容易维护</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String driver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件读取     */</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建Properties集合类</span>            Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取src路径下的文件</span>            ClassLoader classLoader <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URL res <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//加载文件</span>            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取数据</span>            url <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取连接     *     * @return 连接对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     *     * @param statement     * @param connection     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> Connection connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放资源     *     * @param resultSet     * @param statement     * @param connection     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>ResultSet resultSet<span class="token punctuation">,</span> Statement statement<span class="token punctuation">,</span> Connection connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>工具类测试类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>jdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtilsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql语句</span>            String sql <span class="token operator">=</span> <span class="token string">"INSERT student(id,NAME,score) VALUES (NULL,'马六',88)"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行sql语句的对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行sql语句</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>之前的文章中分别通过集合实现、IO实现、而学习数据库后，我们可以试着通过数据库存储数据，写一个简单的登录注册小案例！在第五大点中有提到吼</p><h3 id="五-补充：PreparedStatment"><a href="#五-补充：PreparedStatment" class="headerlink" title="(五) 补充：PreparedStatment"></a>(五) 补充：PreparedStatment</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建向数据库发送预编译sql语句的prepareStatement</span>PreparedStatement <span class="token function">prepareStatement</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> </code></pre><p>prepareStatement继承自Statement，总而言之，它相较于其父类，更强更简单！</p><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="(1) 优点"></a>(1) 优点</h4><h5 id="A：效率"><a href="#A：效率" class="headerlink" title="A：效率"></a>A：效率</h5><p>Statement 直接编译 SQL 语句，直接送到数据库去执行，而且其多次重复执行sql语句，PreparedStatement 会<strong>对SQL进行预编译</strong>，再填充参数，这样效率会比较高（<strong>预编译的SQL存储在PreparedStatement中</strong>）</p><h5 id="B：可读性"><a href="#B：可读性" class="headerlink" title="B：可读性"></a>B：可读性</h5><p>定义 SQL 语句的时候，常常需要使用到 Java 中的变量，在一些复杂的情况下，需要频繁的使用到引号和单引号的问题，变量越多，越复杂，而PreparedStatement可以使<strong>用占位符</strong> ‘ ？’ 代替参数，接下来再进行参数的赋值，这样有利于代码的可读性</p><h5 id="C：安全性"><a href="#C：安全性" class="headerlink" title="C：安全性"></a>C：安全性</h5><p>PreparedStatement 由于预编译，可以避免Statement中可能需要采取字符串与变量的拼接而导致SQL注入攻击【编写永等式，绕过密码登录】</p><p>我们先按照我们之前的做法，写一个简单的登录Demo，先创一张表！</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE USER(    id INT PRIMARY KEY AUTO_INCREMENT,    username VARCHAR(32),    PASSWORD VARCHAR(32));SELECT * FROM USER;INSERT INTO USER VALUES(NULL,'admin','admin888');INSERT INTO USER VALUES(NULL,'zhangsan','123456');</code></pre><p>接着编写代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>login<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>JDBCUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 登录方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> null <span class="token operator">||</span> password <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义sql</span>            String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE username = '"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' AND password = '"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"' "</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取执行sql的对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行查询</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span>statement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>简单的来说，这样一个简单的登录Demo就写好了，但是这个时候，SQL注入问题中的一种情况就出现了，或许你听过，在早些年的时候，漏洞还是蛮常见的，一些黑客或者脚本小子们常常使用一些SQL注入的手段进行目标网站后台的入侵，我们今天所讲的这一种，就是其中一种，叫做SQL万能注入（SQL万能密码）</p><p>我们先来观察一下上述代码中关于SQL语句的部分</p><pre class=" language-java"><code class="language-java"> String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE username = '"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' AND password = '"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"' "</span><span class="token punctuation">;</span></code></pre><p>也就是说它将我们所输入的 <code>username</code> 和 <code>password</code>合成为SQL查询语句， 当数据库中不存在这样的字段就代表输入错误，但是对于存在SQL注入漏洞的程序，则可以通过构造一些特殊的字符串，达到登录的目的，先贴出来测试结果</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运行结果</span>请输入用户名admin请输入密码<span class="token number">1</span><span class="token string">' or '</span><span class="token number">1</span><span class="token string">' = '</span><span class="token number">1</span>登录成功</code></pre><p>如果我们将上述代码中密码 (username) 部分用我们的这些内容代替是怎么样的呢</p><pre><code> String sql = &quot;SELECT * FROM USER WHERE username = &#39;admin&#39; AND PASSWORD = &#39;1&#39; or &#39;1&#39; = &#39;1&#39; &quot;;</code></pre><blockquote><p>补充：在SQL语句中逻辑运算符具有优先级，= 优先于 and ，and 优先于 or </p></blockquote><p>所以上面的式子中 AND先被执行，当然返回错，接着执行or部分，对于一个永等式 ‘1’ = ‘1‘ 来说返回值永远是true，所以SQL查询结果为true，即可以登录成功</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用PrepareStemen替代主要部分</span><span class="token comment" spellcheck="true">//定义sql</span>String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM USER WHERE username = ? AND password = ?"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取执行sql的对象</span>preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给?赋值</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行查询</span>resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行结果</span>请输入用户名admin请输入密码<span class="token number">1</span><span class="token string">' or '</span><span class="token number">1</span><span class="token string">' = '</span><span class="token number">1</span>用户名或密码错误</code></pre><p>​                                                                                                                                                                                                                                                                                                                                         </p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.2-JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-数据库设计</title>
      <link href="/2019/09/17/3.1-mysql/004-shu-ju-ku-she-ji/"/>
      <url>/2019/09/17/3.1-mysql/004-shu-ju-ku-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p>###(一) 多表之间的关系</p><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="(1) 分类"></a>(1) 分类</h4><ol><li><p>一对一</p><ul><li>Eg：人和身份证</li><li>分析：人与身份证是一一对应的</li></ul></li><li><p>一对多(多对一)</p><ul><li>Eg：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li><p>多对多</p><ul><li>Eg：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol><h4 id="2-实现方式"><a href="#2-实现方式" class="headerlink" title="(2) 实现方式"></a>(2) 实现方式</h4><ol><li>一对多(多对一)：<ul><li>Eg：部门和员工</li><li>实现方式：在多的一方建立外键，指向一的一方的主键</li></ul></li><li>多对多：<ul><li>Eg：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>一对一(了解)：<ul><li>Eg：人和身份证</li><li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键</li></ul></li></ol><h4 id="3-案例"><a href="#3-案例" class="headerlink" title="(3) 案例"></a>(3) 案例</h4><pre class=" language-java"><code class="language-java">    <span class="token operator">--</span> 创建旅游线路分类表 tab_category    <span class="token operator">--</span> cid 旅游线路分类主键，自动增长    <span class="token operator">--</span> cname 旅游线路分类名称非空，唯一，字符串 <span class="token number">100</span>    CREATE TABLE <span class="token function">tab_category</span> <span class="token punctuation">(</span>        cid INT PRIMARY KEY AUTO_INCREMENT<span class="token punctuation">,</span>        cname <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL UNIQUE    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">--</span> 创建旅游线路表 tab_route    <span class="token comment" spellcheck="true">/*    rid 旅游线路主键，自动增长    rname 旅游线路名称非空，唯一，字符串 100    price 价格    rdate 上架时间，日期类型    cid 外键，所属分类    */</span>    CREATE TABLE <span class="token function">tab_route</span><span class="token punctuation">(</span>        rid INT PRIMARY KEY AUTO_INCREMENT<span class="token punctuation">,</span>        rname <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL UNIQUE<span class="token punctuation">,</span>        price DOUBLE<span class="token punctuation">,</span>        rdate DATE<span class="token punctuation">,</span>        cid INT<span class="token punctuation">,</span>        FOREIGN <span class="token function">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> REFERENCES <span class="token function">tab_category</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*创建用户表 tab_user    uid 用户主键，自增长    username 用户名长度 100，唯一，非空    password 密码长度 30，非空    name 真实姓名长度 100    birthday 生日    sex 性别，定长字符串 1    telephone 手机号，字符串 11    email 邮箱，字符串长度 100    */</span>    CREATE TABLE <span class="token function">tab_user</span> <span class="token punctuation">(</span>        uid INT PRIMARY KEY AUTO_INCREMENT<span class="token punctuation">,</span>        username <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> UNIQUE NOT NULL<span class="token punctuation">,</span>        PASSWORD <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>        NAME <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        birthday DATE<span class="token punctuation">,</span>        sex <span class="token function">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> DEFAULT <span class="token string">'男'</span><span class="token punctuation">,</span>        telephone <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        email <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    创建收藏表 tab_favorite    rid 旅游线路 id，外键    date 收藏时间    uid 用户 id，外键    rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次    */</span>    CREATE TABLE <span class="token function">tab_favorite</span> <span class="token punctuation">(</span>        rid INT<span class="token punctuation">,</span> <span class="token operator">--</span> 线路id        DATE DATETIME<span class="token punctuation">,</span>        uid INT<span class="token punctuation">,</span> <span class="token operator">--</span> 用户id        <span class="token operator">--</span> 创建复合主键        PRIMARY <span class="token function">KEY</span><span class="token punctuation">(</span>rid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">--</span> 联合主键        FOREIGN <span class="token function">KEY</span> <span class="token punctuation">(</span>rid<span class="token punctuation">)</span> REFERENCES <span class="token function">tab_route</span><span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">,</span>        FOREIGN <span class="token function">KEY</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> REFERENCES <span class="token function">tab_user</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二-数据库设计范式"><a href="#二-数据库设计范式" class="headerlink" title="(二) 数据库设计范式"></a>(二) 数据库设计范式</h3><pre><code>        设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。        目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。    * 分类：        1. 第一范式（1NF）：每一列都是不可分割的原子数据项        2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）            * 几个概念：                1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A                    例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数                2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。                    例如：（学号，课程名称） --&gt; 分数                3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。                    例如：（学号，课程名称） -- &gt; 姓名                4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A                    例如：学号--&gt;系名，系名--&gt;系主任                5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码                    例如：该表中码为：（学号，课程名称）                    * 主属性：码属性组中的所有属性                    * 非主属性：除过码属性组的属性        3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</code></pre><h3 id="三-数据库的备份和还原"><a href="#三-数据库的备份和还原" class="headerlink" title="(三) 数据库的备份和还原"></a>(三) 数据库的备份和还原</h3><pre class=" language-mysql"><code class="language-mysql">1. 命令行：    * 语法：        * 备份： MYSQLDUMP -u用户名 -p密码 数据库名称 > 保存的路径        * 还原：            1. 登录数据库            2. 创建数据库            3. 使用数据库            4. 执行文件。source 文件路径2. 图形化工具：</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.1-MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-MySQL多表查询以及事务</title>
      <link href="/2019/09/17/3.1-mysql/003-duo-biao-cha-xun-yi-ji-shi-wu/"/>
      <url>/2019/09/17/3.1-mysql/003-duo-biao-cha-xun-yi-ji-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="多表查询以及事务"><a href="#多表查询以及事务" class="headerlink" title="多表查询以及事务"></a>多表查询以及事务</h1><h3 id="一-多表查询"><a href="#一-多表查询" class="headerlink" title="(一) 多表查询"></a>(一) 多表查询</h3><h4 id="1-查询语法"><a href="#1-查询语法" class="headerlink" title="(1) 查询语法"></a>(1) 查询语法</h4><pre class=" language-mysql"><code class="language-mysql">    SELECT        列名列表    FROM        表名列表    WHERE....</code></pre><h4 id="2-准备sql"><a href="#2-准备sql" class="headerlink" title="(2) 准备sql"></a>(2) 准备sql</h4><pre class=" language-mysql"><code class="language-mysql">-- 创建部门表    CREATE TABLE dept(        id INT PRIMARY KEY AUTO_INCREMENT,        NAME VARCHAR(20)    );    INSERT INTO dept (NAME) VALUES ('开发部'),('市场部'),('财务部');-- 创建员工表    CREATE TABLE emp (        id INT PRIMARY KEY AUTO_INCREMENT,        NAME VARCHAR(10),        gender CHAR(1), -- 性别        salary DOUBLE, -- 工资        join_date DATE, -- 入职日期        dept_id INT,        FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)    );    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('孙悟空','男',7200,'2013-02-24',1);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('猪八戒','男',3600,'2010-12-02',2);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('唐僧','男',9000,'2008-08-08',2);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('白骨精','女',5000,'2015-10-07',3);    INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES('蜘蛛精','女',4500,'2011-03-14',1);-- 笛卡尔积：    有两个集合A,B .取这两个集合的所有组成情况。    要完成多表查询，需要消除无用的数据</code></pre><h4 id="3-多表查询的分类"><a href="#3-多表查询的分类" class="headerlink" title="(3) 多表查询的分类"></a>(3) 多表查询的分类</h4><pre class=" language-mysql"><code class="language-mysql">1. 内连接查询：        1. 隐式内连接：使用where条件消除无用数据            * 例子：            -- 查询所有员工信息和对应的部门信息            SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;            -- 查询员工表的名称，性别。部门表的名称            SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;            SELECT                 t1.name, -- 员工表的姓名                t1.gender,-- 员工表的性别                t2.name -- 部门表的名称            FROM                emp t1,                dept t2            WHERE                 t1.`dept_id` = t2.`id`;        2. 显式内连接：            * 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件            * 例如：                * SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;                    * SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;            3. 内连接查询：            1. 从哪些表中查询数据            2. 条件是什么            3. 查询哪些字段    2. 外链接查询：        1. 左外连接：            * 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；            * 查询的是左表所有数据以及其交集部分。            * 例子：                -- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称                SELECT     t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;        2. 右外连接：            * 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；            * 查询的是右表所有数据以及其交集部分。            * 例子：                SELECT     * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;    3. 子查询：        * 概念：查询中嵌套查询，称嵌套查询为子查询。            -- 查询工资最高的员工信息            -- 1 查询最高的工资是多少 9000            SELECT MAX(salary) FROM emp;            -- 2 查询员工信息，并且工资等于9000的            SELECT * FROM emp WHERE emp.`salary` = 9000;            -- 一条sql就完成这个操作。子查询            SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);        * 子查询不同情况            1. 子查询的结果是单行单列的：                * 子查询可以作为条件，使用运算符去判断。 运算符： > >= < <= =                *                 -- 查询员工工资小于平均工资的人                SELECT * FROM emp WHERE emp.salary < (SELECT AVG(salary) FROM emp);            2. 子查询的结果是多行单列的：                * 子查询可以作为条件，使用运算符in来判断                -- 查询'财务部'和'市场部'所有的员工信息                SELECT id FROM dept WHERE NAME = '财务部' OR NAME = '市场部';                SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;                -- 子查询                SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = '财务部' OR NAME = '市场部');            3. 子查询的结果是多行多列的：                * 子查询可以作为一张虚拟表参与查询                -- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息                -- 子查询                SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` > '2011-11-11') t2                WHERE t1.id = t2.dept_id;                -- 普通内连接                SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` >  '2011-11-11'</code></pre><h4 id="4-多表查询联系"><a href="#4-多表查询联系" class="headerlink" title="(4) 多表查询联系"></a>(4) 多表查询联系</h4><pre><code>        -- 部门表        CREATE TABLE dept (          id INT PRIMARY KEY PRIMARY KEY, -- 部门id          dname VARCHAR(50), -- 部门名称          loc VARCHAR(50) -- 部门所在地        );        -- 添加4个部门        INSERT INTO dept(id,dname,loc) VALUES         (10,&#39;教研部&#39;,&#39;北京&#39;),        (20,&#39;学工部&#39;,&#39;上海&#39;),        (30,&#39;销售部&#39;,&#39;广州&#39;),        (40,&#39;财务部&#39;,&#39;深圳&#39;);</code></pre><p>​            </p><pre class=" language-mysql"><code class="language-mysql">                    -- 职务表，职务名称，职务描述        CREATE TABLE job (          id INT PRIMARY KEY,          jname VARCHAR(20),          description VARCHAR(50)        );        -- 添加4个职务        INSERT INTO job (id, jname, description) VALUES        (1, '董事长', '管理整个公司，接单'),        (2, '经理', '管理部门员工'),        (3, '销售员', '向客人推销产品'),        (4, '文员', '使用办公软件');        -- 员工表        CREATE TABLE emp (          id INT PRIMARY KEY, -- 员工id          ename VARCHAR(50), -- 员工姓名          job_id INT, -- 职务id          mgr INT , -- 上级领导          joindate DATE, -- 入职日期          salary DECIMAL(7,2), -- 工资          bonus DECIMAL(7,2), -- 奖金          dept_id INT, -- 所在部门编号          CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),          CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)        );        -- 添加员工        INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES         (1001,'孙悟空',4,1004,'2000-12-17','8000.00',NULL,20),        (1002,'卢俊义',3,1006,'2001-02-20','16000.00','3000.00',30),        (1003,'林冲',3,1006,'2001-02-22','12500.00','5000.00',30),        (1004,'唐僧',2,1009,'2001-04-02','29750.00',NULL,20),        (1005,'李逵',4,1006,'2001-09-28','12500.00','14000.00',30),        (1006,'宋江',2,1009,'2001-05-01','28500.00',NULL,30),        (1007,'刘备',2,1009,'2001-09-01','24500.00',NULL,10),        (1008,'猪八戒',4,1004,'2007-04-19','30000.00',NULL,20),        (1009,'罗贯中',1,NULL,'2001-11-17','50000.00',NULL,10),        (1010,'吴用',3,1006,'2001-09-08','15000.00','0.00',30),        (1011,'沙僧',4,1004,'2007-05-23','11000.00',NULL,20),        (1012,'李逵',4,1006,'2001-12-03','9500.00',NULL,30),        (1013,'小白龙',4,1004,'2001-12-03','30000.00',NULL,20),        (1014,'关羽',4,1007,'2002-01-23','13000.00',NULL,10);        -- 工资等级表        CREATE TABLE salarygrade (          grade INT PRIMARY KEY,   -- 级别          losalary INT,  -- 最低工资          hisalary INT -- 最高工资        );        -- 添加5个工资等级        INSERT INTO salarygrade(grade,losalary,hisalary) VALUES         (1,7000,12000),        (2,12010,14000),        (3,14010,20000),        (4,20010,30000),        (5,30010,99990);        -- 需求：        -- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述        /*            分析：                1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表                2.查询条件 emp.job_id = job.id        */        SELECT             t1.`id`, -- 员工编号            t1.`ename`, -- 员工姓名            t1.`salary`,-- 工资            t2.`jname`, -- 职务名称            t2.`description` -- 职务描述        FROM             emp t1, job t2        WHERE             t1.`job_id` = t2.`id`;        -- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置        /*            分析：                1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept                2. 条件： emp.job_id = job.id and emp.dept_id = dept.id        */        SELECT             t1.`id`, -- 员工编号            t1.`ename`, -- 员工姓名            t1.`salary`,-- 工资            t2.`jname`, -- 职务名称            t2.`description`, -- 职务描述            t3.`dname`, -- 部门名称            t3.`loc` -- 部门位置        FROM             emp t1, job t2,dept t3        WHERE             t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;        -- 3.查询员工姓名，工资，工资等级        /*            分析：                1.员工姓名，工资 emp  工资等级 salarygrade                2.条件 emp.salary >= salarygrade.losalary and emp.salary <= salarygrade.hisalary                emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary        */        SELECT             t1.ename ,            t1.`salary`,            t2.*        FROM emp t1, salarygrade t2        WHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;        -- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级        /*            分析：                1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade                2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary        */        SELECT             t1.`ename`,            t1.`salary`,            t2.`jname`,            t2.`description`,            t3.`dname`,            t3.`loc`,            t4.`grade`        FROM             emp t1,job t2,dept t3,salarygrade t4        WHERE             t1.`job_id` = t2.`id`             AND t1.`dept_id` = t3.`id`            AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;        -- 5.查询出部门编号、部门名称、部门位置、部门人数        /*            分析：                1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表                2.使用分组查询。按照emp.dept_id完成分组，查询count(id)                3.使用子查询将第2步的查询结果和dept表进行关联查询        */        SELECT             t1.`id`,t1.`dname`,t1.`loc` , t2.total        FROM             dept t1,            (SELECT                dept_id,COUNT(id) total            FROM                 emp            GROUP BY dept_id) t2        WHERE t1.`id` = t2.dept_id;        -- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询        /*            分析：                1.姓名 emp， 直接上级的姓名 emp                    * emp表的id 和 mgr 是自关联                2.条件 emp.id = emp.mgr                3.查询左表的所有数据，和 交集数据                    * 使用左外连接查询        */        /*        select            t1.ename,            t1.mgr,            t2.`id`,            t2.ename        from emp t1, emp t2        where t1.mgr = t2.`id`;        */        SELECT             t1.ename,            t1.mgr,            t2.`id`,            t2.`ename`        FROM emp t1        LEFT JOIN emp t2        ON t1.`mgr` = t2.`id`;</code></pre><h3 id="二-事务"><a href="#二-事务" class="headerlink" title="(二) 事务"></a>(二) 事务</h3><h4 id="1-事务的基本介绍"><a href="#1-事务的基本介绍" class="headerlink" title="(1) 事务的基本介绍"></a>(1) 事务的基本介绍</h4><pre class=" language-mysql"><code class="language-mysql">1. 事务的基本介绍    1. 概念：        *  如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。    2. 操作：        1. 开启事务： start transaction;        2. 回滚：rollback;        3. 提交：commit;    3. 例子：        CREATE TABLE account (            id INT PRIMARY KEY AUTO_INCREMENT,            NAME VARCHAR(10),            balance DOUBLE        );        -- 添加数据        INSERT INTO account (NAME, balance) VALUES ('zhangsan', 1000), ('lisi', 1000);                SELECT * FROM account;        UPDATE account SET balance = 1000;        -- 张三给李四转账 500 元        -- 0. 开启事务        START TRANSACTION;        -- 1. 张三账户 -500        UPDATE account SET balance = balance - 500 WHERE NAME = 'zhangsan';        -- 2. 李四账户 +500        -- 出错了...        UPDATE account SET balance = balance + 500 WHERE NAME = 'lisi';        -- 发现执行没有问题，提交事务        COMMIT;        -- 发现出问题了，回滚事务        ROLLBACK;    4. MySQL数据库中事务默认自动提交        * 事务提交的两种方式：            * 自动提交：                * mysql就是自动提交的                * 一条DML(增删改)语句会自动提交一次事务。            * 手动提交：                * Oracle 数据库默认是手动提交事务                * 需要先开启事务，再提交        * 修改事务的默认提交方式：            * 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交            * 修改默认提交方式： set @@autocommit = 0;</code></pre><h4 id="2-事务的四大分类"><a href="#2-事务的四大分类" class="headerlink" title="(2) 事务的四大分类"></a>(2) 事务的四大分类</h4><pre class=" language-mysql"><code class="language-mysql">2. 事务的四大特征：    1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。    2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。    3. 隔离性：多个事务之间。相互独立。    4. 一致性：事务操作前后，数据总量不变3. 事务的隔离级别（了解）    * 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。    * 存在问题：        1. 脏读：一个事务，读取到另一个事务中没有提交的数据        2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。        3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。    * 隔离级别：        1. read uncommitted：读未提交            * 产生的问题：脏读、不可重复读、幻读        2. read committed：读已提交 （Oracle）            * 产生的问题：不可重复读、幻读        3. repeatable read：可重复读 （MySQL默认）            * 产生的问题：幻读        4. serializable：串行化            * 可以解决所有的问题        * 注意：隔离级别从小到大安全性越来越高，但是效率越来越低        * 数据库查询隔离级别：            * select @@tx_isolation;        * 数据库设置隔离级别：            * set global transaction isolation level  级别字符串;    * 演示：        set global transaction isolation level read uncommitted;        start transaction;        -- 转账操作        update account set balance = balance - 500 where id = 1;        update account set balance = balance + 500 where id = 2;</code></pre><h3 id="三-DCL"><a href="#三-DCL" class="headerlink" title="(三) DCL"></a>(三) DCL</h3><pre class=" language-mysql"><code class="language-mysql">* SQL分类：    1. DDL：操作数据库和表    2. DML：增删改表中数据    3. DQL：查询表中数据    4. DCL：管理用户，授权* DBA：数据库管理员* DCL：管理用户，授权    1. 管理用户        1. 添加用户：            * 语法：CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';        2. 删除用户：            * 语法：DROP USER '用户名'@'主机名';        3. 修改用户密码：            UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';            UPDATE USER SET PASSWORD = PASSWORD('abc') WHERE USER = 'lisi';            SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');            SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123');            * mysql中忘记了root用户的密码？                1. cmd -- > net stop mysql 停止mysql服务                    * 需要管理员运行该cmd                2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables                3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功                4. use mysql;                5. update user set password = password('你的新密码') where user = 'root';                6. 关闭两个窗口                7. 打开任务管理器，手动结束mysqld.exe 的进程                8. 启动mysql服务                9. 使用新密码登录。        4. 查询用户：            -- 1. 切换到mysql数据库            USE myql;            -- 2. 查询user表            SELECT * FROM USER;            * 通配符： % 表示可以在任意主机使用用户登录数据库    2. 权限管理：        1. 查询权限：            -- 查询权限            SHOW GRANTS FOR '用户名'@'主机名';            SHOW GRANTS FOR 'lisi'@'%';        2. 授予权限：            -- 授予权限            grant 权限列表 on 数据库名.表名 to '用户名'@'主机名';            -- 给张三用户授予所有权限，在任意数据库任意表上            GRANT ALL ON *.* TO 'zhangsan'@'localhost';        3. 撤销权限：            -- 撤销权限：            revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';            REVOKE UPDATE ON db3.`account` FROM 'lisi'@'%';</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/7/6/16bc64e5e727d294?w=258&h=258&f=jpeg&s=27413" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.1-MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> 多表查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-MySQL约束</title>
      <link href="/2019/09/17/3.1-mysql/002-mysql-yue-shu/"/>
      <url>/2019/09/17/3.1-mysql/002-mysql-yue-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL约束"><a href="#MySQL约束" class="headerlink" title="MySQL约束"></a>MySQL约束</h1><h3 id="一-概念"><a href="#一-概念" class="headerlink" title="(一) 概念"></a>(一) 概念</h3><p><strong>约束</strong>：对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p><p><strong>分类</strong>：</p><pre class=" language-mysql"><code class="language-mysql">1. 主键约束：primary KEY2. 非空约束：not NULL3. 唯一约束：unique4. 外键约束：foreign KEY</code></pre><h3 id="二-约束详解"><a href="#二-约束详解" class="headerlink" title="(二) 约束详解"></a>(二) 约束详解</h3><h4 id="1-非空约束"><a href="#1-非空约束" class="headerlink" title="(1) 非空约束"></a>(1) 非空约束</h4><pre class=" language-mysql"><code class="language-mysql">-- 语法    not null，值不能为null    -- 1. 创建表时添加约束    CREATE TABLE stu(        id INT,        NAME VARCHAR(20) NOT NULL -- name为非空    );-- 2. 创建表完后，添加非空约束    ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;-- 3. 删除name的非空约束    ALTER TABLE stu MODIFY NAME VARCHAR(20);</code></pre><h4 id="2-唯一约束"><a href="#2-唯一约束" class="headerlink" title="(2) 唯一约束"></a>(2) 唯一约束</h4><pre class=" language-mysql"><code class="language-mysql">-- 语法    UNIQUE，值不能重复-- 1. 创建表时，添加唯一约束    CREATE TABLE stu(        id INT,        phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束    );    -- 注意mysql中，唯一约束限定的列的值可以有多个null-- 2. 删除唯一约束    ALTER TABLE stu DROP INDEX phone_number;-- 3. 在创建表后，添加唯一约束    ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</code></pre><h4 id="3-主键约束"><a href="#3-主键约束" class="headerlink" title="(3) 主键约束"></a>(3) 主键约束</h4><pre class=" language-mysql"><code class="language-mysql">-- 语法    PRIMARY key，非空且唯一-- 注意    一张表只能有一个字段为主键    键就是表中记录的唯一标识-- 1. 在创建表时，添加主键约束    create table stu(            id int primary key,-- 给id添加主键约束            name varchar(20)        );-- 2. 删除主键    ALTER TABLE stu MODIFY id INT ; (×)    ALTER TABLE stu DROP PRIMARY KEY; (√)-- 3. 创建完表后，添加主键    ALTER TABLE stu MODIFY id INT PRIMARY KEY;-- 4. 自动增长    A：概念：如果某一列是数值类型的，使用 AUTO_INCREMENT 可以来完成值得自动增长    B：在创建表时，添加主键约束，并且完成主键自增长    create table stu(            id int primary key auto_increment,-- 给id添加主键约束            name varchar(20)        );    C：删除自动增长        ALTER TABLE stu MODIFY id INT;    D：添加自动增长        ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></pre><h4 id="4-外键约束"><a href="#4-外键约束" class="headerlink" title="(4) 外键约束"></a>(4) 外键约束</h4><pre class=" language-mysql"><code class="language-mysql">-- 语法    foreign KEY,让表于表产生关系，从而保证数据的正确性-- 1. 在创建表时，可以添加外键    CREATE TABLE 表名(        ....        外键列        CONSTRAINT 外键名称 FOREIGN KEY (外键列名称) REFERENCES 主表名称(主表列名称)    );-- 2. 删除外键        ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;-- 3. 创建表之后，添加外键        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</code></pre><h4 id="三-级联操作"><a href="#三-级联操作" class="headerlink" title="(三) 级联操作"></a>(三) 级联操作</h4><pre class=" language-mysql"><code class="language-mysql">-- 1. 添加级联操作    ALTER TABLE 表名 ADD CONSTRAINT 外键名称         FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE;-- 2. 分类：    A: 级联更新：ON UPDATE CASCADE     B: 级联删除：ON DELETE CASCADE </code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.1-MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-MySQL数据库</title>
      <link href="/2019/09/17/3.1-mysql/001-mysql-ji-chu/"/>
      <url>/2019/09/17/3.1-mysql/001-mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><blockquote><p>开发学习中，想满足一些需求，无疑需要经常与数据打交道，例如，我们在使用IO的一些技术的时候，常常需要将一些数据存储到外部文件，可能大家会问，我们初学的时候常常会简单的保存一些数据到 .txt 文件中，为什么还需要数据库呢？</p></blockquote><h3 id="一-为什么使用数据库？"><a href="#一-为什么使用数据库？" class="headerlink" title="(一) 为什么使用数据库？"></a>(一) 为什么使用数据库？</h3><h4 id="1-查询速度"><a href="#1-查询速度" class="headerlink" title="(1) 查询速度"></a>(1) 查询速度</h4><p>假定我们将数据全部存储在一个普通文件中(data.txt)_(以逗号间隔)</p><pre class=" language-mysql"><code class="language-mysql">......"Eminem",male,1972,"USA""Rihanna",female,1988,"Barbados""Taylor Swift",1989,female,"USA""Aavril Lavigne",1984,female,"Canada"......</code></pre><p>如果在我们的数据极为庞大的情况下，我们需要查询其中的一些数据，例如，查询Eminem的国籍，我们一般会使用遍历，但是毫无疑问，这个响应时间会变得极其缓慢，但是使用数据库后，它所提供的一些索<strong>引技术</strong>等就可以解决这样的问题</p><h4 id="2-保证数据完整有效"><a href="#2-保证数据完整有效" class="headerlink" title="(2) 保证数据完整有效"></a>(2) 保证数据完整有效</h4><pre class=" language-mysql"><code class="language-mysql">"Rihanna",female,1988,"Barbados""Rihanna",female,1995,"USA"</code></pre><p>如果数据中出现了重名的情况，又如何判断是不是同一个人呢？</p><p>如果data.txt文件中的数据被错误的修改，例如出生年份被修改为其他类型字符串这种无效表达怎么办？</p><p>或许你可以在程序中写一些逻辑判断语句进而筛选处理这些问题，但是仍旧在数据较为庞大的情况下，会出现各种各样的问题，增加了开发者的开发难度，而数据库本身就制定了一些<strong>约束</strong>，从而保证了数据的完整且，有效，从而<strong>使开发者只需要更加注重于程序本身的设计，而不用花费过多的时间去处理数据上的一些细节问题</strong></p><h4 id="3-数据共享"><a href="#3-数据共享" class="headerlink" title="(3) 数据共享"></a>(3) 数据共享</h4><p>常用来简单存储数据的 txt/excel 等均属于<strong>单一文件</strong>，并且都是<strong>无法共享</strong>的，只支持当前用户使用并且修改</p><p>而<strong>数据库</strong>则<strong>允许用户共享</strong>，不同的用户可以同时存取数据库中的数据，用户也可以用各种方式通过接口使用数据库，并提供数据共享</p><h4 id="4-数据的安全性"><a href="#4-数据的安全性" class="headerlink" title="(4) 数据的安全性"></a>(4) 数据的安全性</h4><p>在我们前者中，数据的修改是很随意的<br>但是在实际开发中，我们有时候需要面临，多个用户检索、修改同一文件中的数据，或者在并发情况下，写同一文件或者记录，而数据库基于锁等的一些技术便可以帮助我们解决这些问题</p><h4 id="5-故障恢复"><a href="#5-故障恢复" class="headerlink" title="(5) 故障恢复"></a>(5) 故障恢复</h4><p>由于逻辑或者物理上的错误，导致了系统的错误操作，从而使得数据被皮怀，如何快速恢复数据，我们上面的单一文件系统显然无法帮助我们解决问题，而数据库却有相关机制去弥补、处理相关问题</p><p>上面我们仅仅从几个常见的点分析了为什么使用数据库，当然远远不止这些，所以总的来说就是<strong>数据库其特殊的存储以及管理方式</strong>，既提高了<strong>效率</strong>，也极大的减少了开发人员的负担</p><h3 id="二-数据库的基本概念"><a href="#二-数据库的基本概念" class="headerlink" title="(二) 数据库的基本概念"></a>(二) 数据库的基本概念</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><p>数据库（DateBase，简称DB）是一种用于存储和管理数据的仓库，简单的说就是一个容器内，内部按照一定方式存储着一些数据</p><h4 id="2-特点"><a href="#2-特点" class="headerlink" title="(2) 特点"></a>(2) 特点</h4><ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>数据独立存储，且集中控制，方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li><li>实现数据共享</li><li>数据一致性和可维护性，保证数据安全可靠</li></ol><h3 id="三-MySQL数据库的基本操作"><a href="#三-MySQL数据库的基本操作" class="headerlink" title="(三) MySQL数据库的基本操作"></a>(三) MySQL数据库的基本操作</h3><pre class=" language-mysql"><code class="language-mysql">MySQL服务启动(两种方式)    1. cmd--> services.msc 打开服务的窗口    2. 使用管理员打开cmd            A: net start mysql : 启动mysql的服务            B: net stop mysql : 关闭mysql服务MySQL登录        1. 点击 MySQL 5.7 Command Line Client，输入密码即可        2. 命令行登录(配置好环境变量)            A: mysql -uroot -p密码 //root为用户名            B: mysql -hip -uroot -p连接目标的密码            C: mysql --host=ip --user=root --password=连接目标的密码MySQL退出        1. exit        2. quit</code></pre><h3 id="四-SQL简单认识"><a href="#四-SQL简单认识" class="headerlink" title="(四) SQL简单认识"></a>(四) SQL简单认识</h3><h4 id="1-什么是SQL？"><a href="#1-什么是SQL？" class="headerlink" title="(1) 什么是SQL？"></a>(1) 什么是SQL？</h4><p><strong>Structured Query Language：结构化查询语言</strong></p><p>SQL就是<strong>访问和处理关系数据库</strong>的计算机标准语言，它定义了操作所有<strong>关系型数据库</strong>的规则</p><p>大部分数据库在SQL的标准上进行了扩展。而每一种数据库操作的方式存在不一样的地方，称为<strong>“方言”</strong>。</p><p>但凡涉及到关系型数据库就离不开SQL，例如在电商网站中存入商品信息，游戏中存储装备道具信息等</p><p><strong>补充</strong>：</p><p><strong>常见的关系型数据库</strong>：<strong>Oracle</strong>、DB2、Microsoft SQL Server、<strong>Microsoft Access</strong>、<strong>MySQL</strong>  </p><p>商用：Oracle、DB2、Microsoft SQL Server</p><p>开源：MySQL</p><p>桌面：Microsoft Access</p><p><strong>常见的非关系型数据库</strong>：NoSql、Cloudant、MongoDb、<strong>redis</strong>、HBase  </p><h4 id="2-SQL通用语法"><a href="#2-SQL通用语法" class="headerlink" title="(2) SQL通用语法"></a>(2) SQL通用语法</h4><pre class=" language-mysql"><code class="language-mysql">1. SQL语句 单行或多行书写，以分号结尾,并且可以使用空格和缩进来增强语句的可读性2. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写3. 3 种注释        A: 单行注释: -- 注释内容 或 # 注释内容(mysql 特有)         B: 多行注释: /* 注释 */</code></pre><h3 id="五-SQL分类"><a href="#五-SQL分类" class="headerlink" title="(五) SQL分类"></a>(五) SQL分类</h3><p><strong>数据定义语言——DDL(Data Definition Language)</strong><br>        允许用户定义 (创建) 数据库对象：数据库，表，列等<br><strong>数据操作语言——DML(Data Manipulation Language)</strong><br>        允许用户对数据库中表的数据进行增删改<br><strong>数据查询语言——DQL(Data Query Language)</strong><br>        允许用户查询数据库中表的记录(数据)<br><strong>数据控制语言——DCL(Data Control Language)</strong><br>        用来定义数据库的访问权限和安全级别，及创建用户</p><h4 id="1-DDL：操作数据库、表"><a href="#1-DDL：操作数据库、表" class="headerlink" title="(1) DDL：操作数据库、表"></a>(1) DDL：操作数据库、表</h4><h5 id="1-操作数据库-——-CRUE"><a href="#1-操作数据库-——-CRUE" class="headerlink" title="1. 操作数据库 —— CRUE"></a>1. 操作数据库 —— CRUE</h5><pre class=" language-mysql"><code class="language-mysql">-- CURE --->  C(Create):创建 + R(Retrieve):查询 + U(Update):修改 + D(Delete)：删除1. C(Create):创建    -- 创建数据库        CREATE DATABASE 数据库名称;    -- 创建数据库，判断不存在，再创建        CREATE DATABASE IF NOT EXISTS 数据库名称;    -- 创建数据库，并且制定字符集        CREATE DATABASE 数据库名称 CHARACTER SET 字符集名;2. R(Retrieve):查询    -- 查询所有数据库名称        SHOW DATABASES    -- 查询某个数据库的字符集 : 查询某个数据库的创建语句        SHOW CREATE DATABASE 数据库名称;3. U(Update):修改    -- 修改数据库的字符集        ALTER DATABASE 数据库名称 CHARACTER SET 字符集名称;4. D(Delete)：删除        -- 删除数据库        DROP DATABASE 数据库名称;    -- 判断数据库存在，存在再删除        DROP DATABASE IF EXISTS 数据库名称；5. 使用数据库    -- 查询当前正在使用的数据库名称        SELECT DATABASE();    -- 使用数据库        USE 数据库名称;</code></pre><h5 id="2-操作表"><a href="#2-操作表" class="headerlink" title="2. 操作表"></a>2. 操作表</h5><pre class=" language-mysql"><code class="language-mysql">1. C(Create):创建    -- 语法 * 注意最后一行不需要加逗号(,)        CREATE TABLE 表名（            列名1 数据类型1,            列名2 数据类型2,            ......            列名n 数据类型n        );    -- 数据类型        1. INT：整数类型        2. DOUBLE:小数类型        3. DATE:日期，只包含年月日，yyyy-MM-dd        4. DATETIME:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss        5. TIMESTAMP:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss            6. VARCHAR：字符串    -- 注意：time如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间来自动赋值    -- DOUBLE(6,3) 代表共保留6位数字，小数点后保留3位    -- 复制表        CREATE TABLE 表名 LIKE 被复制的表名;2. R(Retrieve):查询    -- 查询某个数据库中所有的表名        SHOW TABLES;    -- 查询表结构        DESC 表名;3. U(Update):修改    -- 修改表名        ALTER TABLE 表名 RENAME TO 新表名    -- 修改表的字符集        ALTER TABLE 表名 CHARACTER SET 字符集名称;    -- 添加一列        ALTER TABLE 表名 ADD 列名 数据类型    -- 修改列名称 类型        ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;        ALTER TABLE 表名 MODIFY 列名 新数据类型;    -- 删除列        DROP TABLE 表名;        DROP TABLE IF EXISTS 表名;4. D(Delete)：删除            DROP TABLE 表名;        Drop TABLE IF EXISTS 表名;</code></pre><h4 id="2-DML：增删改表中的数据"><a href="#2-DML：增删改表中的数据" class="headerlink" title="(2) DML：增删改表中的数据"></a>(2) DML：增删改表中的数据</h4><pre class=" language-mysql"><code class="language-mysql">1. 表中添加数据    -- 语法：        INSERT INTO 表名(列名1,列名2,...列名n) VALUES(值1,值2,...值n);    -- 注意：        A: 列名和值要一一对应。        B: 如果表名后，不定义列名，则默认给所有列添加值            Eg:INSERT INTO 表名 Values(值1,值2,...值n);        C: 除了数字类型，其他类型需要使用引号(单双都可以)引起来2. 删除表中数据    -- 语法：        DELETE FROM 表名 [WHERE 条件]    -- 注意：        若不加条件，则删除表中所有记录    -- 删除所有记录的两种方式        A: DELETE FROM 表名; -- 不推荐使用，有多少条记录就会执行多少次删除操作        B: TRUNCATE TABLE 表名； -- 推荐使用，先删除表，然后再创建一张一样的表，效率更高3. 修改表中数据    -- 语法：        UPDATE 表名 SET 列名1 = 值1, 列名2 = 值2,... [WHERE 条件];    -- 注意：        若不限定条件，则会修改表中的所有记录</code></pre><h4 id="3-DQL：查询表中的记录"><a href="#3-DQL：查询表中的记录" class="headerlink" title="(3) DQL：查询表中的记录"></a>(3) DQL：查询表中的记录</h4><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM 表名;1. 语法：    SELECT        字段列表    FROM        表名列表    WHERE        条件列表    GROUP BY        分组字段    HAVING        分组之后的条件    ORDER BY        排序    LIMIT        分页限定</code></pre><pre class=" language-mysql"><code class="language-mysql">2. 基础查询    -- 多个字段的查询        SELECT 字段名1，字段名2... FROM 表名；        注意：            如果查询所有字段，则可以使用*来替代字段列表。    -- 去除重复：        DISTINCT    -- 计算列        一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）        IFNULL(表达式1,表达式2)：null参与的运算，计算结果都为null            表达式1：哪个字段需要判断是否为null            如果该字段为null后的替换值。    -- 起别名：        as：as也可以省略</code></pre><pre class=" language-mysql"><code class="language-mysql">3. 条件查询    1. where子句后跟条件    2. 运算符        > 、< 、<= 、>= 、= 、<>        BETWEEN...AND          IN( 集合)         LIKE：模糊查询            占位符：                _:单个任意字符                %：多个任意字符        IS NULL          AND  或 &&        OR  或 ||         NOT  或 !            -- 查询年龄不等于20岁            SELECT * FROM student WHERE age != 20;            SELECT * FROM student WHERE age <> 20;            -- 查询年龄大于等于20 小于等于30(三种方式)            SELECT * FROM student WHERE age >= 20 &&  age <=30;            SELECT * FROM student WHERE age >= 20 AND  age <=30;            SELECT * FROM student WHERE age BETWEEN 20 AND 30;            -- 查询年龄22岁，18岁，25岁的信息            SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25            SELECT * FROM student WHERE age IN (22,18,25);            -- 查询英语成绩为null            -- 下面第一句是错误的，null值不能使用 = 和（!=） 判断            SELECT * FROM student WHERE english = NULL; （×）            SELECT * FROM student WHERE english IS NULL; （√）            -- 查询英语成绩不为null            SELECT * FROM student WHERE english IS NOT NULL;            -- 查询姓张的有哪些？ like            SELECT * FROM student WHERE NAME LIKE '张%';            -- 查询姓名第二个是杰的人            SELECT * FROM student WHERE NAME LIKE "_杰%";            -- 查询姓名是3个字的人            SELECT * FROM student WHERE NAME LIKE '___';            -- 查询姓名中包含文的人            SELECT * FROM student WHERE NAME LIKE '%文%';</code></pre><p><strong>DQL:查询语句</strong></p><pre class=" language-mysql"><code class="language-mysql">1. 排序查询    -- 语法：        ORDER BY 子句        * ORDER BY 排序字段1 排序方式1 ，排序字段2 排序方式2...    -- 排序方式：        ASC：升序，默认的。        DESC：降序    -- 注意：如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</code></pre><pre class=" language-mysql"><code class="language-mysql">2. 聚合函数：将一列数据作为一个整体，进行纵向的计算。    COUNT：计算个数        -- 一般选择非空的列：主键        -- count(*)    MAX：计算最大值    MIN：计算最小值    SUM：计算和    AVG：计算平均值    -- 注意：聚合函数的计算，排除null值。        解决方案：            1. 选择不包含非空的列进行计算            2. IFNULL函数</code></pre><pre class=" language-mysql"><code class="language-mysql">3. 分组查询:    -- 语法：        group BY 分组字段；    -- WHERE 和 HAVING 的区别？        WHERE 在分组之前进行限定，不满足则不分组        HAVING在分组之后进行限定，不满足则查不到        WHERE 后不可以跟聚合函数，having可以进行聚合函数的判断    -- 常见举例，巩固一下语法    -- 按照性别分组，分别查询男、女同学的平均分        SELECT sex , AVG(math) FROM student GROUP BY sex;    -- 按照性别分组，分别查询男、女同学的平均分，人数        SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;    -- 按照性别分组，分别查询男、女同学的平均分，人数 要求：分数低于60分的人，不参与分组        SELECT sex , AVG(math),COUNT(id) FROM student WHERE math > 60 GROUP BY sex;    --  按照性别分组，分别查询男、女同学的平均分，人数     --  要求：分数低于60分的人，不参与分组或分组之后，人数要大于2个人        SELECT sex , AVG(math),COUNT(id) FROM student WHERE math > 60 GROUP BY sex HAVING COUNT(id) > 2;        SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math > 60 GROUP BY sex HAVING 人数 > 2;</code></pre><pre class=" language-mysql"><code class="language-mysql">4. 分页查询    -- 语法：        limit 开始的索引,每页查询的条数;    -- 公式：        开始的索引 = （当前的页码 - 1） * 每页显示的条数        每页显示5条记录         SELECT * FROM student LIMIT 0,5; -- 第1页        SELECT * FROM student LIMIT 5,5; -- 第2页        SELECT * FROM student LIMIT 10,5;-- 第3页    -- LIMIT 是一个MySQL"方言"</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 3.1-MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-注解</title>
      <link href="/2019/09/17/2.1-java-guo-du-zhi-shi/003-zhu-jie/"/>
      <url>/2019/09/17/2.1-java-guo-du-zhi-shi/003-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h3><ul><li><p>概念：说明程序的。给计算机看的</p></li><li><p>注释：用文字描述程序的。给程序员看的</p></li><li><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p></li><li><p>概念描述：</p><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></li></ul><h3 id="二-作用分类"><a href="#二-作用分类" class="headerlink" title="(二) 作用分类"></a>(二) 作用分类</h3><p><strong>编写文档</strong>：通过代码里标识的注解生成文档【生成文档doc文档】<br><strong>代码分析</strong>：通过代码里标识的注解对代码进行分析【使用反射】<br><strong>编译检查</strong>：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p><h3 id="三-JDK中预定义的注解"><a href="#三-JDK中预定义的注解" class="headerlink" title="(三) JDK中预定义的注解"></a>(三) JDK中预定义的注解</h3><ul><li>@Override    ：检测被该注解标注的方法是否是继承自父类(接口)的<ul><li>@Deprecated：该注解标注的内容，表示已过时</li><li>@SuppressWarnings：压制警告<ul><li>一般传递参数all  @SuppressWarnings(“all”)</li></ul></li></ul></li></ul><h3 id="四-自定义注解"><a href="#四-自定义注解" class="headerlink" title="(四) 自定义注解"></a>(四) 自定义注解</h3><h4 id="1-格式"><a href="#1-格式" class="headerlink" title="(1) 格式"></a>(1) 格式</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> 注解名称<span class="token punctuation">{</span>        属性列表<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-本质"><a href="#2-本质" class="headerlink" title="(2) 本质"></a>(2) 本质</h4><p> 注解本质上就是一个接口，该接口默认继承Annotation接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyAnno</span> <span class="token keyword">extends</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="3-属性"><a href="#3-属性" class="headerlink" title="(3) 属性"></a>(3) 属性</h4><p>要求：</p><ol><li><p>属性的返回值类型有下列取值</p><ul><li>基本数据类型</li></ul><ul><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li><p>定义了属性，在使用时需要给属性赋值</p><ul><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ul></li></ol><h4 id="4-元注解"><a href="#4-元注解" class="headerlink" title="(4) 元注解"></a>(4) 元注解</h4><ul><li><p>@Target：描述注解能够作用的位置</p><ul><li><p>ElementType取值：</p><ul><li><p>TYPE：可以作用于类上</p></li><li><p>METHOD：可以作用于方法上</p></li><li><p>FIELD：可以作用于成员变量上</p></li></ul></li></ul></li><li><p>@Retention：描述注解被保留的阶段</p></li><li><p>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</p></li><li><p>@Documented：描述注解是否被抽取到api文档中</p></li><li><p>@Inherited：描述注解是否被子类继承</p></li></ul><h3 id="五-注解的应用和案例"><a href="#五-注解的应用和案例" class="headerlink" title="(五) 注解的应用和案例"></a>(五) 注解的应用和案例</h3><p><strong>(1) 在程序使用(解析)注解：获取注解中定义的属性值</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Demo1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Demo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 描述需要执行的类名和方法名 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Pro</span> <span class="token punctuation">{</span>    String <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token annotation punctuation">@Pro</span><span class="token punctuation">(</span>className <span class="token operator">=</span> <span class="token string">"cn.ideal.annotation.Demo1"</span><span class="token punctuation">,</span> methodName <span class="token operator">=</span> <span class="token string">"show"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            不改变该类的任何代码，可以创建任意类的对象，可以执行任意方法         */</span>        <span class="token comment" spellcheck="true">//解析注解</span>        <span class="token comment" spellcheck="true">//获取该类的字节码文件对象</span>        Class<span class="token operator">&lt;</span>ReflectTest<span class="token operator">></span> reflectTestClass <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取上面的注解对象</span>        <span class="token comment" spellcheck="true">//其实就是在内存中生成了一个该注解接口的子类实现对象</span>        <span class="token comment" spellcheck="true">/*            public class ProImpl implements Pro{                public String className(){                    return "cn.itcast.annotation.Demo1";                }                public String methodName(){                    return "show";                }            }         */</span>        Pro an <span class="token operator">=</span> reflectTestClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Pro<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用注解对象中定义的抽象方法，获取返回值</span>        String className <span class="token operator">=</span> an<span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> an<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>(2) 自定义注解，检测并且输出异常到外部文件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自己定义的计算器类，存在一些错误 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加法</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> null<span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 + 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//减法</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 - 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//乘法</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 * 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//除法</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 / 0 ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"永无bug..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCheck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建计算器对象</span>        Calculator c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取字节码文件对象</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出现异常的次数</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"bug.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断方法上是否有Check注解</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Check<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//有，执行</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//捕获异常</span>                    <span class="token comment" spellcheck="true">//记录到文件中</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法出异常了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的名称:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"异常的原因:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"本次测试一共出现 "</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">" 次异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 2.1-Java过渡知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-Junit单元测试</title>
      <link href="/2019/09/17/2.1-java-guo-du-zhi-shi/002-junit-dan-yuan-ce-shi/"/>
      <url>/2019/09/17/2.1-java-guo-du-zhi-shi/002-junit-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h1><blockquote><p>一个完整的程序内容无疑是庞大的，如果能将整个程序的源代码，以最小可测试单位而隔离，保证每一个单元都正确，则整个程序也能保证正确。一般来说这是开发者自行进行的测试工作，它可以帮助开发者判断是否程序达到了想要的结果</p></blockquote><h3 id="一-测试分类"><a href="#一-测试分类" class="headerlink" title="(一) 测试分类"></a>(一) 测试分类</h3><h4 id="1-黑盒测试"><a href="#1-黑盒测试" class="headerlink" title="(1) 黑盒测试"></a>(1) 黑盒测试</h4><p><strong>不需要编写代码，只需要给输出值，看程序是否能输出所期望的值</strong></p><blockquote><p>黑盒测试也称功能测试，它是通过测试来检测每个功能是否都能正常使用。在测试中，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。黑盒测试着眼于程序外部结构，不考虑内部逻辑结构，主要针对软件界面和软件功能进行测试。 </p></blockquote><h4 id="2-白盒测试"><a href="#2-白盒测试" class="headerlink" title="(2) 白盒测试"></a>(2) 白盒测试</h4><p><strong>需要写代码的，并且关注程序的具体内部实现以及执行流程</strong></p><blockquote><p>白盒测试又称结构测试、透明盒测试、逻辑驱动测试或基于代码的测试。白盒测试是一种测试用例设计方法，盒子指的是被测试的软件，白盒指的是盒子是可视的，你清楚盒子内部的东西以及里面是如何运作的。”白盒”法全面了解程序内部逻辑结构、对所有逻辑路径进行测试。”白盒”法是穷举路径测试。在使用这一方案时，测试者必须检查程序的内部结构，从检查程序的逻辑着手，得出测试数据。贯穿程序的独立路径数是天文数字。 </p></blockquote><h3 id="二-使用方法"><a href="#二-使用方法" class="headerlink" title="(二) 使用方法"></a>(二) 使用方法</h3><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="(1) 步骤"></a>(1) 步骤</h4><ul><li><strong>定义一个测试类</strong><ul><li>建议：<ul><li><strong>测试类名</strong>：被测试的类名Test —— CalculatorTest</li><li><strong>包名</strong>：xxx.xxx.xx.test —— cn.ideal.test</li></ul></li></ul></li><li><strong>定义测试方法</strong><ul><li>建议：<ul><li><strong>方法名</strong>：test测试的方法名 —— testAdd()  </li><li><strong>返回值</strong>：void</li><li><strong>参数列表</strong>：空参</li></ul></li></ul></li><li><strong>方法上方加 @Test</strong></li><li><strong>导入junit依赖环境</strong></li></ul><h4 id="2-判定结果"><a href="#2-判定结果" class="headerlink" title="(2) 判定结果"></a>(2) 判定结果</h4><ul><li>绿色 —— 成功</li><li>红色 —— 失败</li><li>一般我们会使用断言操作来处理结果</li></ul><pre class=" language-java"><code class="language-java">Assert<span class="token punctuation">.</span>assertE、<span class="token function">quals</span><span class="token punctuation">(</span>期望的结果<span class="token punctuation">,</span> 运算的结果<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-补充"><a href="#3-补充" class="headerlink" title="(3) 补充"></a>(3) 补充</h4><ul><li><p><strong>@Before</strong>:</p><ul><li>修饰的方法会在测试方法之前被自动执行</li></ul></li><li><p><strong>@After</strong>:</p><ul><li>修饰的方法会在测试方法执行之后自动被执行</li></ul></li></ul><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/7/6/16bc64e5e727d294?w=258&h=258&f=jpeg&s=27413" alt></p>]]></content>
      
      
      <categories>
          
          <category> 2.1-Java过渡知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Junit </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-反射</title>
      <link href="/2019/09/17/2.1-java-guo-du-zhi-shi/001-fan-she/"/>
      <url>/2019/09/17/2.1-java-guo-du-zhi-shi/001-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反射：Web学习的灵魂"><a href="#Java反射：Web学习的灵魂" class="headerlink" title="Java反射：Web学习的灵魂"></a>Java反射：Web学习的灵魂</h1><blockquote><p>我们从最初的 javac -HelloWorld.java，到面向对象部分，我们可以将Java代码在计算机中经历的阶段分为三部分：<strong>Scource源代码阶段</strong> —— <strong>Class类对象阶段</strong> —— <strong>Runtime运行时阶段</strong> 而我们知道，Java中一个类在源代码阶段，是存储在硬盘中的，而编译后，就已经被加载到内存中区，那么有没有一种方法可以在这种情况下，获取或者修改它的方法或者属性呢？这就是我们今天所讲的<strong>Java反射机制</strong></p></blockquote><h3 id="一-概述以及好处"><a href="#一-概述以及好处" class="headerlink" title="(一) 概述以及好处"></a>(一) 概述以及好处</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><blockquote><p>JAVA反射机制是在<strong>运行状态</strong>中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种<strong>动态获取的信息</strong>以及<strong>动态调用对象</strong>的方法的功能称为<strong>java语言的反射机制</strong>。——百度百科</p></blockquote><p><img src="http://image.ideal-20.cn/basic/2.1-01-001.png" alt></p><p>我们将类分为三部分，成员变量，构造方法，成员方法，代码编译后，变成了字节码文件（.class文件）而万物皆对象，所以在字节码文件中，又将这三部分分别整合成对象，所以我们得出结论：</p><p><strong>反射：将类的各个组成部分封装成对象，并通过这个Class类型的对象，去使用该文件中的成员变量，构造方法，成员方法</strong></p><h4 id="2-好处"><a href="#2-好处" class="headerlink" title="(2) 好处"></a>(2) 好处</h4><ol><li>可以在程序“<strong>运行时</strong>”，对 <strong>.class</strong>文件进行操作，并且由此获取以及操作 类中的各个部分</li><li>可以解耦，提高程序的扩展性</li><li>增加程序的灵活性 （最后案例中体现）</li></ol><h3 id="二-获取Class对象的方式"><a href="#二-获取Class对象的方式" class="headerlink" title="(二) 获取Class对象的方式"></a>(二) 获取Class对象的方式</h3><p><strong>（1）将字节码文件加载进内存，返回Class对象</strong><br>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</p><pre class=" language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"全类名"</span><span class="token punctuation">)</span></code></pre><p><strong>（2）多用于参数的传递</strong></p><pre class=" language-java"><code class="language-java">类名<span class="token punctuation">.</span><span class="token keyword">class</span></code></pre><p><strong>（3）getClass()方法在Object类中定义着</strong><br>多用于对象的获取字节码的方式</p><pre class=" language-java"><code class="language-java">对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：</code></pre><p><strong>三种方式的代码实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.Class.forName("全类名")</span>        Class <span class="token class-name">cls1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"cn.ideal.domain.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.类名.class</span>        Class <span class="token class-name">cls2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.对象.getClass()</span>        Student p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">cls3</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用 == 比较</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1 <span class="token operator">==</span> cls2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2 <span class="token operator">==</span> cls3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token keyword">class</span> <span class="token class-name">cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student</span><span class="token keyword">class</span> <span class="token class-name">cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student</span><span class="token keyword">class</span> <span class="token class-name">cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student</span><span class="token boolean">true</span><span class="token boolean">true</span></code></pre><p>通过上面的案例我们可以得出：</p><p><strong>同一个字节码文件(*.class)在一次程序运行过程中，只加载一次，不论通过哪一种方式获取的Class对象都是同一个</strong></p><h3 id="三-Class对象功能"><a href="#三-Class对象功能" class="headerlink" title="(三) Class对象功能"></a>(三) Class对象功能</h3><h4 id="1-获取功能："><a href="#1-获取功能：" class="headerlink" title="(1) 获取功能："></a>(1) 获取功能：</h4><h5 id="获取成员变量们"><a href="#获取成员变量们" class="headerlink" title="获取成员变量们"></a>获取成员变量们</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取所有public修饰的成员变量</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取指定名称的public修饰的成员变量</span>Field <span class="token function">getField</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//获取所有的成员变量，不考虑修饰符</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Field <span class="token function">getDeclaredField</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>  </code></pre><h5 id="获取构造方法们"><a href="#获取构造方法们" class="headerlink" title="获取构造方法们"></a>获取构造方法们</h5><pre class=" language-java"><code class="language-java">Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Constructor<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  Constructor<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><p><strong>获取成员方法们</strong></p><pre class=" language-java"><code class="language-java">Method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Method <span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  Method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Method <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>  </code></pre><p><strong>获取全类名</strong></p><pre class=" language-java"><code class="language-java">String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Field：成员变量</strong></p><pre class=" language-java"><code class="language-java">操作：<span class="token comment" spellcheck="true">//设置值</span><span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取值</span><span class="token function">get</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//忽略访问权限修饰符的安全检查</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">:</span>暴力反射</code></pre><p><strong>Constructor:构造方法</strong></p><pre class=" language-java"><code class="language-java">创建对象：T <span class="token function">newInstance</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initargs<span class="token punctuation">)</span>  如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</code></pre><p><strong>Method：方法对象</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//执行方法</span>Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取方法名称</span>String getName<span class="token operator">:</span>获取方法名</code></pre><p>我们来具体使用一下上面的一些方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Student的Class对象</span>        Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            1. 获取成员变量们                * Field[] getFields()                * Field getField(String name)                * Field[] getDeclaredFields()                  Field getDeclaredField(String name)        */</span>        <span class="token comment" spellcheck="true">//Field[] getFields() 获取所有public修饰的成员变量</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Field getField(String name)</span>        Field a <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取成员变量a的值</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object value <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置a的值</span>        a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Field[] getDeclaredFields() 获取所有的成员变量</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Field getDeclaredField(String name)</span>        Field d <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//忽略访问权限修饰符</span>        d<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        Object value2 <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>a<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>nullStudent<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">private</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>name<span class="token keyword">private</span> <span class="token keyword">int</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>age<span class="token keyword">public</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>a<span class="token keyword">protected</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>bjava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>c<span class="token keyword">private</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>d<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>null</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Student的Class对象</span>        Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            2. 获取构造方法们                * Constructor&lt;?>[] getConstructors()                * Constructor&lt;T> getConstructor(类&lt;?>... parameterTypes)                * Constructor&lt;T> getDeclaredConstructor(类&lt;?>... parameterTypes)                * Constructor&lt;?>[] getDeclaredConstructors()        */</span>        <span class="token comment" spellcheck="true">//Constructor&lt;T> getConstructor(类&lt;?>... parameterTypes)</span>        Constructor constructor <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象 带参</span>        Object student <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor1 <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象 不带参</span>        Object student1 <span class="token operator">=</span> constructor1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建对象 不带参 （推荐方法）</span>        Object o <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取Student的Class对象</span>        Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            3. 获取成员方法们：                * Method[] getMethods()                * Method getMethod(String name, 类&lt;?>... parameterTypes)                * Method[] getDeclaredMethods()                * Method getDeclaredMethod(String name, 类&lt;?>... parameterTypes)        */</span>        <span class="token comment" spellcheck="true">//获取指定名称的方法</span>        Method study_method <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行方法</span>        study_method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        Method study_method2 <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"study"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行方法</span>        study_method2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"英语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有public修饰的方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取类名</span>        String className <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四-反射案例"><a href="#四-反射案例" class="headerlink" title="(四) 反射案例"></a>(四) 反射案例</h3><p>通过修改配置文件，达到不改变该类的任何代码，可以创建任意类的对象，可以执行任意方法，避免了每一次都修改类文件的缺点，同时提高了程序的扩展性</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> 实现：    <span class="token number">1</span><span class="token punctuation">.</span> 配置文件    <span class="token number">2</span><span class="token punctuation">.</span> 反射<span class="token operator">*</span> 步骤：    <span class="token number">1</span><span class="token punctuation">.</span> 将需要创建的对象的全类名和需要执行的方法定义在配置文件中    <span class="token number">2</span><span class="token punctuation">.</span> 在程序中加载读取配置文件    <span class="token number">3</span><span class="token punctuation">.</span> 使用反射技术来加载类文件进内存    <span class="token number">4</span><span class="token punctuation">.</span> 创建对象    <span class="token number">5</span><span class="token punctuation">.</span> 执行方法</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//pro.properties 自定义配置文件</span>className<span class="token operator">=</span>cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>StudentmethodName<span class="token operator">=</span>study</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>ideal<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            不改变该类的任何代码，可以创建任意类的对象，可以执行任意方法         */</span>        <span class="token comment" spellcheck="true">//1.加载配置文件</span>        <span class="token comment" spellcheck="true">//创建Properties对象</span>        Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加载配置文件，转换为一个集合</span>        <span class="token comment" spellcheck="true">//获取class目录下的配置文件</span>        ClassLoader classLoader <span class="token operator">=</span> ReflectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"pro.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取配置文件中定义的数据</span>        String className <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.加载该类进内存</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.创建对象</span>        Object obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.获取方法对象</span>        Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.执行方法</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我仅仅浅薄的谈了一下反射的基本知识，一些比较深入的理解由于篇幅问题，放在后面专篇讲解，感谢支持。确实有很多不足之处，也希望能与大家交流。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 2.1-Java过渡知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>006-网络编程</title>
      <link href="/2019/09/17/1.6-wang-luo-bian-cheng/001-wang-luo-bian-cheng/"/>
      <url>/2019/09/17/1.6-wang-luo-bian-cheng/001-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第六阶段-网络编程"><a href="#第六阶段-网络编程" class="headerlink" title="第六阶段 网络编程"></a>第六阶段 网络编程</h1><blockquote><p>每一台计算机通过网络连接起来，达到了数据互动的效果，而网络编程所解决的问题就是如何让程序与程序之间实现数据的通讯与互动</p><p>在吗？你是GG还是MM？</p></blockquote><h3 id="一-网络模型概述"><a href="#一-网络模型概述" class="headerlink" title="(一) 网络模型概述"></a>(一) 网络模型概述</h3><h4 id="1-两大模型"><a href="#1-两大模型" class="headerlink" title="(1) 两大模型"></a>(1) 两大模型</h4><p>网络模型一般是指:</p><ul><li>OSI（Open System Interconnection开放系统互连）参考模型</li><li>TCP/IP参考模型</li></ul><h4 id="2-网络模型七层概述"><a href="#2-网络模型七层概述" class="headerlink" title="(2) 网络模型七层概述"></a>(2) 网络模型七层概述</h4><ol><li><p><strong>物理层</strong>：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的<strong>主要作用是传输比特流</strong>（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。<strong>这一层的数据叫做比特</strong>。</p></li><li><p><strong>数据链路层</strong>：主要将从物理层接收的数据进行<strong>MAC地址（网卡的地址）的封装与解封装</strong>。常把<strong>这一层的数据叫做帧</strong>。在这一层工作的设备是交换机，数据通过交换机来传输。</p></li><li><p><strong>网络层</strong>：主要<strong>将从下层接收到的数据进行IP地址</strong>（例192.168.0.1)的封装与解封装。在这一层工作的设备是路由器，常把<strong>这一层的数据叫做数据包</strong>。</p></li><li><p><strong>传输层</strong>：定义了一些传输数据的协议和端口号（WWW端口80等），如：<strong>TCP</strong>（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），<strong>UDP</strong>（用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ微信聊天数据就是通过这种方式传输的）。 主要是<strong>将从下层接收的数据进行分段和传输</strong>，<strong>到达目的地址后再进行重组</strong>。常常把<strong>这一层数据叫做段</strong>。</p></li><li><p><strong>会话层</strong>：通过传输层（端口号：传输端口与接收端口）建立数据传输的通路。主要<strong>在你的系统之间发起会话或者接受会话请求</strong>（设备之间需要互相认识可以是IP也可以是MAC或者是主机名）</p></li><li><p><strong>表示层</strong>：主要是<strong>进行对接收的数据进行解释、加密与解密、压缩与解压缩</strong>等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等）。</p></li><li><p><strong>应用层</strong>： 主要是一些终端的应用，比如说FTP（各种文件下载），WEB（IE浏览），QQ之类的（可以把它理解成我们在电脑屏幕上可以看到的东西．就是终端应用）。</p></li></ol><h3 id="二-网络编程三要素"><a href="#二-网络编程三要素" class="headerlink" title="(二) 网络编程三要素"></a>(二) 网络编程三要素</h3><h4 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="(1) IP地址"></a>(1) IP地址</h4><h5 id="A：IP地址概述：IP地址是网络中计算机的唯一标识"><a href="#A：IP地址概述：IP地址是网络中计算机的唯一标识" class="headerlink" title="A：IP地址概述：IP地址是网络中计算机的唯一标识**"></a>A：IP地址概述：IP地址是网络中计算机的唯一标识**</h5><p>我们应该或多或少都有见过IP地址的格式 xxx.xxx.xxx.xxx大致应该是类似这样的，但是计算机不是只能识别二进制的数据，但是很显然，我们的IP地址确实不是二进制的，这是什么原因呢？</p><p>我们先随便拿一个IP地址举个例子看看</p><p>IP：192.168.1.100</p><p>换算：11000000 10101000 00000001 01100100</p><p>但是如果我们日后需要用到这个IP地址的时候，<strong>记忆起来就比较麻烦</strong>，所以，为了方便表示IP地址，我们就<strong>把IP地址的每一个字节上的数据换算成十进制</strong>，然后用 ‘ . ‘ 分开来表示：”点分十进制”</p><h5 id="B：IP地址的组成：网络号段-主机号段"><a href="#B：IP地址的组成：网络号段-主机号段" class="headerlink" title="B：IP地址的组成：网络号段+主机号段"></a>B：IP地址的组成：网络号段+主机号段</h5><p>A类：第一号段为网络号段+后三段的主机号段，一个网络号：256<em>256</em>256 = 16777216</p><p>B类：前二号段为网络号段+后二段的主机号段，一个网络号：256*256 = 65536</p><p>C类：前三号段为网络号段+后一段的主机号段，一个网络号：256</p><p><strong>C：IP地址的分类</strong></p><p><strong>A类</strong>    </p><pre class=" language-java"><code class="language-java"><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">127.255</span><span class="token punctuation">.</span><span class="token number">255</span><span class="token punctuation">.</span><span class="token function">254</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token punctuation">.</span>X<span class="token punctuation">.</span>X<span class="token punctuation">.</span>X是私有地址<span class="token punctuation">(</span>私有地址就是在互联网上不使用，而被用在局域网络中的地址<span class="token punctuation">)</span>               <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">127</span><span class="token punctuation">.</span>X<span class="token punctuation">.</span>X<span class="token punctuation">.</span>X是保留地址，用做循环测试用的</code></pre><p><strong>B类</strong>    </p><pre class=" language-java"><code class="language-java"><span class="token number">128.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">191.255</span><span class="token punctuation">.</span><span class="token number">255.254</span>    <span class="token number">172.16</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">172.31</span><span class="token punctuation">.</span><span class="token number">255.255</span>是私有地址<span class="token number">169.254</span><span class="token punctuation">.</span>X<span class="token punctuation">.</span>X是保留地址</code></pre><p><strong>C类</strong>    </p><pre class=" language-java"><code class="language-java"><span class="token number">192.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">223.255</span><span class="token punctuation">.</span><span class="token number">255.254</span>    <span class="token number">192.168</span><span class="token punctuation">.</span>X<span class="token punctuation">.</span>X是私有地址</code></pre><p><strong>D类</strong>    </p><pre><code>224.0.0.1---239.255.255.254</code></pre><p><strong>E类</strong>    </p><pre class=" language-java"><code class="language-java"><span class="token number">240.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">247.255</span><span class="token punctuation">.</span><span class="token number">255.254</span></code></pre><p><strong>两个DOS命令</strong></p><p>ipconfig 查看本机ip地址</p><p>ping 后面跟ip地址, 测试本机与指定的ip地址间的通信是否有问题</p><p> <strong>特殊IP地址</strong></p><p>127.0.0.1 回环地址(表示本机)//也就是说，ping本机的IP地址相当于ping 127.0.0.1</p><p>x.x.x.255 广播地址</p><p>x.x.x.0 网络地址</p><p><strong>InetAddress的成员方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据主机名或者IP地址的字符串表示得到IP地址对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> InetAddress <span class="token function">getByName</span><span class="token punctuation">(</span>String host<span class="token punctuation">)</span><span class="token operator">:</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InetAddressDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        InetAddress address <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.24.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取两个东西：主机名，IP地址</span>        String name <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>LAPTOP<span class="token operator">-</span>5T03DV1G<span class="token operator">--</span><span class="token operator">-</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">24.1</span></code></pre><h4 id="2-端口"><a href="#2-端口" class="headerlink" title="(2) 端口"></a>(2) 端口</h4><ul><li><p><strong>物理端口</strong> 网卡口</p></li><li><p><strong>逻辑端口 我们指的就是逻辑端口</strong></p><ul><li><p>每个网络程序都会至少有一个逻辑端口</p></li><li><p>用于标识进程的逻辑地址，不同进程的标识</p></li><li><p>有效端口：0<del>65535，其中0</del>1024系统使用或保留端口。</p></li></ul></li></ul><h4 id="3-协议"><a href="#3-协议" class="headerlink" title="(3) 协议"></a>(3) 协议</h4><p><strong>TCP</strong>：传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据</p><p><strong>UDP</strong>：用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ微信聊天数据就是通过这种方式传输的</p><p><strong>简单总结</strong>：</p><p><strong>TCP：建立数据通道,无限制,效率低,可靠</strong></p><p><strong>UDP：数据打包,有限制,不连接,效率高,不可靠</strong></p><h3 id="三-控制台简单聊天案例"><a href="#三-控制台简单聊天案例" class="headerlink" title="(三) 控制台简单聊天案例"></a>(三) 控制台简单聊天案例</h3><h4 id="1-UDP版本-V1-0"><a href="#1-UDP版本-V1-0" class="headerlink" title="(1) UDP版本 V1.0"></a>(1) UDP版本 V1.0</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  UDP协议发送数据： *     A:创建发送端Socket对象 *     B:创建数据，并把数据打包 *     C:调用Socket对象的发送方法发送数据包 *     D:释放资源 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建socket对象</span>        DatagramSocket ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建数据，并把数据打包</span>        <span class="token comment" spellcheck="true">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token string">"Hello,BWH!"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把字符串转换成字符数组</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        InetAddress address <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.24.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">10086</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自拟</span>        DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> length<span class="token punctuation">,</span> address<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用Socket对象的方法发送数据包</span>        <span class="token comment" spellcheck="true">//public void send(DatagramPacket p)</span>        ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//底层依赖IO流，所以要释放资源</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  UDP协议接收数据： *      A:创建接收端Socket对象 *      B:创建一个数据包(接收容器) *      C:调用Socket对象的接收方法接收数据 *      D:解析数据包，并显示在控制台 *      E:释放资源 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建接收端Socket对象</span>        <span class="token comment" spellcheck="true">// DatagramSocket(int port)</span>        DatagramSocket ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个数据包(接收容器)</span>        <span class="token comment" spellcheck="true">// DatagramPacket(byte[] buf, int length)</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Socket对象的接收方法接收数据</span>        <span class="token comment" spellcheck="true">// public void receive(DatagramPacket p)</span>        ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析数据包，并显示在控制台</span>        <span class="token comment" spellcheck="true">// 获取对方的ip</span>        <span class="token comment" spellcheck="true">// public InetAddress getAddress()</span>        InetAddress address <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ip <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// public byte[] getData():获取数据缓冲区</span>        <span class="token comment" spellcheck="true">// public int getLength():获取数据的实际长度</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys2 <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-UDP-版本V2-0"><a href="#2-UDP-版本V2-0" class="headerlink" title="(2) UDP 版本V2.0"></a>(2) UDP 版本V2.0</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建发送端的Socket对象</span>        DatagramSocket ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"886"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//创建数据并打包</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.24.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发送数据</span>            ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建接受端的Socket对象</span>        DatagramSocket ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建一个包裹</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接收数据</span>            ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析数据</span>            String ip <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ip <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放资源,但是接收端是服务器应该一直开启</span>        <span class="token comment" spellcheck="true">//ds.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-UDP-版本V3-0"><a href="#3-UDP-版本V3-0" class="headerlink" title="(3) UDP 版本V3.0"></a>(3) UDP 版本V3.0</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DatagramSocket ds<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SendThread</span><span class="token punctuation">(</span>DatagramSocket ds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ds <span class="token operator">=</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"886"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 创建数据并打包</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.24.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 发送数据</span>                ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            ds<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DatagramSocket ds<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReceiveThread</span><span class="token punctuation">(</span>DatagramSocket ds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ds <span class="token operator">=</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//创建一个包裹</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                DatagramPacket dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> bys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//接收数据</span>                ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//解析数据</span>                String ip <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"from "</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">" data is : "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>DatagramSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatRoom</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SocketException <span class="token punctuation">{</span>        DatagramSocket dsSend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DatagramSocket dsReceive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SendThread st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendThread</span><span class="token punctuation">(</span>dsSend<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReceiveThread rt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReceiveThread</span><span class="token punctuation">(</span>dsReceive<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-TCP版本"><a href="#4-TCP版本" class="headerlink" title="(4) TCP版本"></a>(4) TCP版本</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_06_TCP2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clietn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"192.168.24.1"</span><span class="token punctuation">,</span> <span class="token number">22222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//键盘录入对象</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把通道内的流包装一下</span>        BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"886"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">22222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三-其他功能"><a href="#三-其他功能" class="headerlink" title="(三) 其他功能"></a>(三) 其他功能</h3><h4 id="1-客户端键盘录入服务器写到文本文件"><a href="#1-客户端键盘录入服务器写到文本文件" class="headerlink" title="(1) 客户端键盘录入服务器写到文本文件"></a>(1) 客户端键盘录入服务器写到文本文件</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//封装通道内的数据</span>BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//封装文本文件</span>BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-客户端读取文本文件服务器控制台输出"><a href="#2-客户端读取文本文件服务器控制台输出" class="headerlink" title="(2) 客户端读取文本文件服务器控制台输出"></a>(2) 客户端读取文本文件服务器控制台输出</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//封装文本文件</span>BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"Demo.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//封装通道内的数据</span>BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.6-网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-多线程</title>
      <link href="/2019/09/17/1.5-duo-xian-cheng/001-duo-xian-cheng/"/>
      <url>/2019/09/17/1.5-duo-xian-cheng/001-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第五阶段-多线程"><a href="#第五阶段-多线程" class="headerlink" title="第五阶段 多线程"></a>第五阶段 多线程</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><blockquote><p>一个场景：周末，带着并不存在的女票去看电影，无论是现场买票也好，又或是手机买票也好，上一秒还有位置，迟钝了一下以后，就显示该座位已经无法选中，一不留神就没有座位了，影院的票是一定的，但是究竟是如何做到，多个窗口或者用户同时出票而又不重复的呢？ 这就是我们今天所要讲解的多线程问题</p></blockquote><h3 id="一-线程和进程的概述"><a href="#一-线程和进程的概述" class="headerlink" title="(一) 线程和进程的概述"></a>(一) 线程和进程的概述</h3><h4 id="1-进程"><a href="#1-进程" class="headerlink" title="(1) 进程"></a>(1) 进程</h4><ul><li><strong>进程</strong>：进程是系统进行资源分配和调用的独立单位。每一个进程都有它自己的内存空间和系统资源</li><li><strong>多线程</strong>：在同一个时间段内可以执行多个任务，提高了CPU的使用率</li></ul><h4 id="2-线程"><a href="#2-线程" class="headerlink" title="(2) 线程"></a>(2) 线程</h4><ul><li><p><strong>线程</strong>：进程的执行单元，执行路径</p></li><li><p><strong>单线程</strong>：一个应用程序只有一条执行路径</p></li><li><p><strong>多线程</strong>：一个应用程序有多条执行路径</p></li></ul><ul><li><p><strong>多进程的意义？</strong>—— 提高CPU的使用率</p></li><li><p><strong>多线程的意义？</strong> —— 提高应用程序的使用率</p></li></ul><h4 id="3-补充"><a href="#3-补充" class="headerlink" title="(3) 补充"></a>(3) 补充</h4><p><strong>并行和并发</strong></p><ul><li><strong>并行</strong>是逻辑上同时发生，指在某一个时间段内同时运行多个程序</li><li><strong>并发</strong>是物理上同时发生，指在某一个时间点同时运行多个程序</li></ul><p><strong>Java程序运行原理和JVM的启动是否是多线程的 ？</strong></p><ul><li><strong>Java程序的运行原理：</strong><ul><li>由java命令启动JVM，JVM启动就相当于启动了一个进程</li><li>接着有该进程创建了一个主线程去调用main方法</li></ul></li><li><strong>JVM虚拟机的启动是单线程的还是多线程的 ?</strong><ul><li>垃圾回收线程也要先启动，否则很容易会出现内存溢出</li><li>现在的垃圾回收线程加上前面的主线程，最低启动了两个线程，所以，jvm的启动其实是多线程的</li><li>JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的</li></ul></li></ul><h3 id="二-多线程代码实现"><a href="#二-多线程代码实现" class="headerlink" title="(二) 多线程代码实现"></a>(二) 多线程代码实现</h3><p>需求：我们要实现多线程的程序。</p><p><strong>如何实现呢?</strong></p><p>由于线程是依赖进程而存在的，所以我们应该先创建一个进程出来。</p><p>而进程是由系统创建的，所以我们应该去调用系统功能创建一个进程。</p><p>Java是<strong>不能直接调用系统功能</strong>的，所以，我们<strong>没有办法直接实现多线程</strong>程序。</p><p>但是呢?Java可以去调用C/C++写好的程序来实现多线程程序。</p><p>由C/C++去调用系统功能创建进程，然后由Java去调用这样的东西，</p><p>然后提供一些类供我们使用。我们就可以实现多线程程序了。</p><p>通过查看API，我们知道了有<strong>2种</strong>方式实现多线程程序。</p><h4 id="方式1：继承Thread类"><a href="#方式1：继承Thread类" class="headerlink" title="方式1：继承Thread类"></a>方式1：继承Thread类</h4><p>步骤：</p><ul><li><p>自定义MyThread（自定义类名）继承Thread类</p></li><li><p>MyThread类中重写run()</p></li><li><p>创建对象</p></li><li><p>启动线程</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建线程对象</span>        MyThread my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程，run()相当于普通方法的调用，单线程效果</span>        <span class="token comment" spellcheck="true">//my.run();</span>        <span class="token comment" spellcheck="true">//首先启动了线程，然后再由jvm调用该线程的run()方法，多线程效果</span>        my<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//两个线程演示，多线程效果需要创建多个对象而不是一个对象多次调用start()方法</span>        MyThread my1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread my2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        my1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        my2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Thread<span class="token operator">-</span><span class="token number">1</span>：<span class="token number">0</span>Thread<span class="token operator">-</span><span class="token number">1</span>：<span class="token number">1</span>Thread<span class="token operator">-</span><span class="token number">1</span>：<span class="token number">2</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">0</span>Thread<span class="token operator">-</span><span class="token number">1</span>：<span class="token number">3</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">1</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">95</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">96</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">97</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">98</span>Thread<span class="token operator">-</span><span class="token number">0</span>：<span class="token number">99</span></code></pre><h4 id="方式2：实现Runnable接口-推荐"><a href="#方式2：实现Runnable接口-推荐" class="headerlink" title="方式2：实现Runnable接口 (推荐)"></a>方式2：实现Runnable接口 (推荐)</h4><p>步骤：</p><ul><li>自定义类MyuRunnable实现Runnable接口</li><li>重写run()方法</li><li>创建MyRunable类的对象</li><li>创建Thread类的对象，并把C步骤的对象作为构造参数传递</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//由于实现接口的方式不能直接使用Thread类的方法了，但是可以间接的使用</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建MyRunnable类的对象</span>        MyRunnable my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Thread类的对象，并把C步骤的对象作为构造参数传递</span><span class="token comment" spellcheck="true">//        Thread t1 = new Thread(my);</span><span class="token comment" spellcheck="true">//        Thread t2 = new Thread(my);</span>        <span class="token comment" spellcheck="true">//下面具体讲解如何设置线程对象名称</span><span class="token comment" spellcheck="true">//        t1.setName("User1");</span><span class="token comment" spellcheck="true">//        t1.setName("User2");</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"User1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"User2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>实现接口方式的好处</strong></p><p>可以避免由于Java单继承带来的局限性</p><p>适合多个相同程序的代码去处理同一个资源的情况，把线程同程序的代码，数据有效分离，较好的体现了面向对象的设计思想</p><p><strong>如何理解——可以避免由于Java单继承带来的局限性</strong></p><p>比如说，某个类已经有父类了，而这个类想实现多线程，但是这个时候它已经不能直接继承Thread类了 </p><p>(接口可以多实现implements，但是继承extends只能单继承) ，它的父类也不想继承Thread因为不需要实现多线程</p><h3 id="三-获取和设置线程对象"><a href="#三-获取和设置线程对象" class="headerlink" title="(三) 获取和设置线程对象"></a>(三) 获取和设置线程对象</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取线程的名称</span><span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置线程的名称</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span></code></pre><h4 id="设置线程的名称-如果不设置名称的话，默认是Thread-编号"><a href="#设置线程的名称-如果不设置名称的话，默认是Thread-编号" class="headerlink" title="设置线程的名称 (如果不设置名称的话，默认是Thread-? (编号) )"></a>设置线程的名称 (如果不设置名称的话，默认是Thread-? (编号) )</h4><p><strong>方法一：无参构造 + setXxx (推荐)</strong> </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建MyRunnable类的对象</span>MyRunnable my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建Thread类的对象，并把C步骤的对象作为构造参数传递</span>Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"User1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"User2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与上面代码等价</span>Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"User1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"User2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>方法二：(稍微麻烦，要手动写MyThread的带参构造方法，方法一不用)</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//MyThread类中</span><span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接调用父类的就好</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//MyThreadTest类中</span>MyThread my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="获取线程名称"><a href="#获取线程名称" class="headerlink" title="获取线程名称"></a>获取线程名称</h4><p>注意：重写run方法内获取线程名称的方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Thread</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Runnable</span><span class="token comment" spellcheck="true">//由于实现接口的方式不能直接使用Thread类的方法了，但是可以间接的使用</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用实现Runnable接口方法的时候注意：main方法所在的测试类并不继承Thread类，因此并不能直接使用getName()方法来获取名称。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这种情况Thread类提供了一个方法:</span><span class="token comment" spellcheck="true">//public static Thread currentThread():</span><span class="token comment" spellcheck="true">//返回当前正在执行的线程对象,返回值是Thread,而Thread恰巧可以调用getName()方法</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四-线程调度及获取和设置线程优先级"><a href="#四-线程调度及获取和设置线程优先级" class="headerlink" title="(四) 线程调度及获取和设置线程优先级"></a>(四) 线程调度及获取和设置线程优先级</h3><blockquote><p>假如我们的计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到 CPU时间片，也就是使用权，才可以执行指令。那么Java是如何对线程进行调用的呢？</p><p>线程有两种调度模型：</p><p><strong>分时调度模型</strong> ：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</p><p><strong>抢占式调度模型</strong> ：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些。 </p></blockquote><p><strong>Java使用的是抢占式调度模型</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//演示如何设置和获取线程优先级</span><span class="token comment" spellcheck="true">//返回线程对象的优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更改线程的优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span></code></pre><p>线程默认优先级是5。</p><p>线程优先级的范围是：1-10。</p><p>线程优先级高仅仅表示线程获取的 CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到比较好的效果。</p><h3 id="五-线程控制"><a href="#五-线程控制" class="headerlink" title="(五) 线程控制"></a>(五) 线程控制</h3><p>在后面的案例中会用到一些，这些控制功能不是很难，可以自行测试。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程休眠</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//线程加入(等待该线程终止，主线程结束后，其余线程开始抢占资源)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//线程礼让(暂停当前正在执行的线程对象，并且执行其他线程让多个线程的执行更加和谐，但是不能保证一人一次)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//后台线程（某线程结束后，其他线程也结束）</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> on<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//（过时了但还可以用）</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//中断线程</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="六-线程的生命周期"><a href="#六-线程的生命周期" class="headerlink" title="(六) 线程的生命周期"></a>(六) 线程的生命周期</h3><p><strong>新建</strong> —— 创建线程对象</p><p><strong>就绪</strong> —— 线程对象已经启动，但是还没有获取到CPU的执行权</p><p><strong>运行</strong> —— 获取到了CPU的执行权</p><ul><li><strong>阻塞</strong> —— 没有CPU的执权，回到就绪</li></ul><p><strong>死亡</strong> —— 代码运行完毕，线程消亡</p><h3 id="七-多线程电影院出票案例"><a href="#七-多线程电影院出票案例" class="headerlink" title="(七) 多线程电影院出票案例"></a>(七) 多线程电影院出票案例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token operator">+</span> <span class="token string">"正在出售第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>tickets<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTicketsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建资源对象</span>        SellTickets st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SellTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建线程对象</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在SellTicket类中添加sleep方法，延迟一下线程，拖慢一下执行的速度</p><p>通过加入延迟后，就产生了连个问题：</p><p><strong>A:相同的票卖了多次</strong></p><p>CPU的一次操作必须是原子性（最简单的）的 (在读取tickets–的原来的数值和减1之后的中间挤进了两个线程而出现重复)</p><p><strong>B:出现了负数票</strong></p><p>随机性和延迟导致的 (三个线程同时挤进一个循环里，tickets–的减法操作有可能在同一个循环中被执行了多次而出现越界的情况，比如说  tickets要大于0却越界到了-1)</p><p>也就是说，线程1执行的同时线程2也可能在执行，而不是线程1执行的时候线程2不能执行。</p><p><strong>我们先要知道一下哪些问题会导致出问题：</strong></p><p>而且这些原因也是以后我们<strong>判断一个程序是否会有线程安全问题的标准</strong></p><p>A:是否是多线程环境</p><p>B:是否有共享数据</p><p>C:是否有多条语句操作共享数据</p><p>我们对照起来，我们的程序确实存在上面的问题，因为它满足上面的条件</p><p>那我们怎么来解决这个问题呢？</p><p>把多条语句操作共享数据的代码给包成一个整体，让某个线程在执行的时候，别人不能来执行</p><p>Java给我们提供了：<strong>同步机制</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//同步代码块：</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    需要同步的代码<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>同步的好处</strong> </p><p>同步的出现解决了多线程的安全问题</p><p><strong>同步的弊端</strong></p><p>当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</p><p><strong>概述：</strong></p><p><strong>A:同步代码块的锁对象是谁呢?</strong></p><p>任意对象</p><p><strong>B:同步方法的格式及锁对象问题?</strong></p><p>把同步关键字加在方法上</p><p>同步方法的锁对象是谁呢?</p><p>this    </p><p><strong>C:静态方法及锁对象问题?</strong></p><p>静态方法的锁对象是谁呢?</p><p>类的字节码文件对象。</p><p>我们使用 synchronized 改进我们上面的程序，前面线程安全的问题，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建锁对象</span>    <span class="token comment" spellcheck="true">//把这个关键的锁对象定义到run()方法(独立于线程之外)，造成同一把锁</span>    <span class="token keyword">private</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token operator">+</span> <span class="token string">"正在出售第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>tickets<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="八-lock锁的概述和使用"><a href="#八-lock锁的概述和使用" class="headerlink" title="(八) lock锁的概述和使用"></a>(八) lock锁的概述和使用</h3><p>为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock</p><p>（可以更清晰的看到在哪里加上了锁，在哪里释放了锁，）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 加锁<span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 释放锁</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTickets2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在出售第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>tickets<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="九-死锁问题-简单认识"><a href="#九-死锁问题-简单认识" class="headerlink" title="(九) 死锁问题 (简单认识)"></a>(九) 死锁问题 (简单认识)</h3><p><strong>同步弊端</strong></p><p>效率低</p><p>如果出现了同步嵌套，就容易产生死锁问题</p><p><strong>死锁问题</strong></p><p>是指两个或者两个以上的线程在执行的过程中，因争夺资源产生的一种互相等待现象</p><h3 id="十-等待唤醒机制"><a href="#十-等待唤醒机制" class="headerlink" title="(十) 等待唤醒机制"></a>(十) 等待唤醒机制</h3><p>我们前面假定的电影院场景，其实还是有一定局限的，我们所假定的票数是一定的，但是实际生活中，往往是一种供需共存的状态，例如去买早点，当消费者买走一些后，而作为生产者的店家就会补充一些商品，为了研究这一种场景，我们所要学习的就是Java的等待唤醒机制</p><blockquote><p><strong>生产者消费者问题</strong>（英语：Producer-consumer problem），也称<strong>有限缓冲问题</strong>（英语：Bounded-buffer problem），是一个多进程同步问题的经典案例。该问题描述了共享固定大小缓冲区的两个进程——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。 </p></blockquote><p>我们用通俗一点的话来解释一下这个问题</p><p><strong>Java使用的是抢占式调度模型</strong></p><ul><li>A：如果消费者先抢到了CPU的执行权，它就会去消费数据，但是现在的数据是默认值，如果没有意义，应该等数据有意义再消费。就好比买家进了店铺早点却还没有做出来，只能等早点做出来了再消费</li><li>B：如果生产者先抢到CPU的执行权，它就回去生产数据，但是，当它产生完数据后，还继续拥有执行权，它还能继续产生数据，这是不合理的，你应该等待消费者将数据消费掉，再进行生产。 这又好比，店铺不能无止境的做早点，卖一些，再做，避免亏本</li></ul><p><strong>梳理思路</strong>：</p><ul><li>A：生产者 —— 先看是否有数据，有就等待，没有就生产，生产完之后通知消费者来消费数据</li><li>B：消费者 —— 先看是否有数据，有就消费，没有就等待，通知生产者生产数据</li></ul><p><strong>解释</strong>：<strong>唤醒——让线程池中的线程具备执行资格</strong></p><p>Object类提供了三个方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等待</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//唤醒单个线程</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//唤醒所有线程</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>注意</strong>：这三个方法都必须在同步代码块中执行 (例如synchronized块)，同时在使用时必须标明所属锁，这样才可以得出这些方法操作的到底是哪个锁上的线程</p><p><strong>为什么这些方法不定义在Thread类中呢 ?</strong></p><p>这些方法的调用必须通过锁对象调用，而我们刚才使用的锁对象是任意锁对象。</p><p>所以，这些方法必须定义在Object类中。</p><p>我们来写一段简单的代码<strong>实现等待唤醒机制</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认情况是没有数据(false)，如果是true，说明有数据</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Student s<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SetThread</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断有没有数据</span>                <span class="token comment" spellcheck="true">//如果有数据，就wait</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        s<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//t1等待，释放锁</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//没有数据，就生产数据</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>                    s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"User"</span><span class="token punctuation">;</span>                    s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                x<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//现在数据就已经存在了，修改标记</span>                s<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//唤醒线程</span>                <span class="token comment" spellcheck="true">//唤醒t2,唤醒并不表示你立马可以执行，必须还得抢CPU的执行权。</span>                s<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_05_Notify<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Student s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GetThread</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果没有数据，就等待</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        s<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改标记</span>                s<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//唤醒线程t1</span>                s<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_05_Notify<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置和获取的类</span>        SetThread st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        GetThread gt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程类</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>gt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果依次交替出现</span></code></pre><p><strong>生产者消费者之等待唤醒机制代码优化</strong></p><p><strong>最终版代码(在Student类中有大改动，然后GetThread类和SetThread类简洁很多)</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Student s<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SetThread</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Student s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GetThread</span><span class="token punctuation">(</span>Student s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置和获取的类</span>        SetThread st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        GetThread gt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetThread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>gt<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>最终版代码特点：</strong></p><ul><li><strong>把Student的成员变量给私有的了。</strong></li><li><strong>把设置和获取的操作给封装成了功能，并加了同步。</strong></li><li><strong>设置或者获取的线程里面只需要调用方法即可</strong></li></ul><h3 id="十一-线程池"><a href="#十一-线程池" class="headerlink" title="(十一) 线程池"></a>(十一) 线程池</h3><p>程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池</p><p>线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用</p><p>在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池</p><pre class=" language-java"><code class="language-java">JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法<span class="token comment" spellcheck="true">//创建一个具有缓存功能的线程池</span><span class="token comment" spellcheck="true">//缓存：百度浏览过的信息再次访问</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建一个可重用的，具有固定线程数的线程池</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>intnThreads<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建一个只有单线程的线程池，相当于上个方法的参数是1 </span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutorDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个线程池对象，控制要创建几个线程对象</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以执行Runnalble对象或者Callable对象代表的线程</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结束线程池</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="十二-匿名内部类的方式实现多线程程序"><a href="#十二-匿名内部类的方式实现多线程程序" class="headerlink" title="(十二) 匿名内部类的方式实现多线程程序"></a>(十二) 匿名内部类的方式实现多线程程序</h3><p>匿名内部类的格式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 类名或者接口名<span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>              重写方法<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>本质：是该类或者接口的子类对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="十三-定时器"><a href="#十三-定时器" class="headerlink" title="(十三) 定时器"></a>(十三) 定时器</h3><p>定时器是一个应用十分广泛的线程工具，可用于调度多个定时任务以后台线程的方式执行。在Java中，可以通过Timer和TimerTask类来实现定义调度的功能</p><p><strong>Timer</strong></p><pre class=" language-java"><code class="language-java">·<span class="token keyword">public</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span>TimerTask task<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span>TimerTask task<span class="token punctuation">,</span><span class="token keyword">long</span> delay<span class="token punctuation">,</span><span class="token keyword">long</span> period<span class="token punctuation">)</span></code></pre><p><strong>TimerTask</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>开发中</strong></p><p>Quartz是一个完全由java编写的开源调度框架</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.5-多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004-IO流补充知识</title>
      <link href="/2019/09/17/1.4-io/004-io-liu-bu-chong-nei-rong/"/>
      <url>/2019/09/17/1.4-io/004-io-liu-bu-chong-nei-rong/</url>
      
        <content type="html"><![CDATA[<h1 id="第四阶段-IO"><a href="#第四阶段-IO" class="headerlink" title="第四阶段 IO"></a>第四阶段 IO</h1><h2 id="常见流简单补充"><a href="#常见流简单补充" class="headerlink" title="常见流简单补充"></a>常见流简单补充</h2><h3 id="一-数据操作流-操作基本类型数据的流-简单认识"><a href="#一-数据操作流-操作基本类型数据的流-简单认识" class="headerlink" title="(一) 数据操作流 (操作基本类型数据的流) (简单认识)"></a>(一) 数据操作流 (操作基本类型数据的流) (简单认识)</h3><p>(1)可以操作基本类型的数据</p><p>(2)流对象名称    </p><pre class=" language-java"><code class="language-java">DataInputStreamDataOutputStream</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DataOutputStream dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写数据</span>        dos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span><span class="token number">5200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token number">13.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">5.20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        DataInputStream dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Byte b <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Double d <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> bb <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数据操作流写入到外部文件的数据，不是我们可读的，可以通过对应的流读入。</p><h3 id="二-内存操作流-简单认识"><a href="#二-内存操作流-简单认识" class="headerlink" title="(二) 内存操作流 (简单认识)"></a>(二) 内存操作流 (简单认识)</h3><p>(1)有些时候我们操作完毕后，未必需要产生一个文件，就可以使用内存操作流。</p><p>(2)三种</p><pre class=" language-java"><code class="language-java">A<span class="token operator">:</span>ByteArrayInputStream，ByteArrayOutputStreamB<span class="token operator">:</span>CharArrayReader，CharArrayWriterC<span class="token operator">:</span>StringReader，StringWriter</code></pre><p>查看源码可见，不需要close</p><h3 id="三-打印流-掌握"><a href="#三-打印流-掌握" class="headerlink" title="(三) 打印流 (掌握)"></a>(三) 打印流 (掌握)</h3><p>(1)字节打印流，字符打印流</p><p>(2)特点：</p><p>A:只操作目的地,不操作数据源</p><p>B:可以操作任意类型的数据</p><p>C:如果启用了自动刷新，在调用println()方法的时候，能够换行并刷新</p><p>D:可以直接操作文件</p><p><strong>问题：哪些流可以直接操作文件呢?</strong></p><p>看API，如果其构造方法能够同时接收File和String类型的参数，一般都是可以直接操作文件的</p><p>(3)复制文本文件</p><pre class=" language-java"><code class="language-java">    BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrintWriter pw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String line <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pw<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四-标准输入输流-简单认识"><a href="#四-标准输入输流-简单认识" class="headerlink" title="(四) 标准输入输流 (简单认识)"></a>(四) 标准输入输流 (简单认识)</h3><p>(1)System类下面有这样的两个字段</p><ul><li>in 标准输入流</li><li>out 标准输出流</li></ul><p>(2)三种键盘录入方式</p><ul><li>A:main方法的args接收参数</li><li>B:System.in通过BufferedReader进行包装</li></ul><pre class=" language-java"><code class="language-java">BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            </code></pre><ul><li>C:Scanner</li></ul><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>(3)输出语句的原理和如何使用字符流输出数据</p><p>A:原理</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrintStream ps <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>B:把System.out用字符缓冲流包装一下使用</p><pre class=" language-java"><code class="language-java">BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="五-随机访问流-简单认识"><a href="#五-随机访问流-简单认识" class="headerlink" title="(五) 随机访问流 (简单认识)"></a>(五) 随机访问流 (简单认识)</h3><p>可以按照文件指针的位置写数据和读数据。</p><p>RandomAccessFile类不属于流，是Object类的子类</p><p>但是它融合了InputSream和OutputStream的功能</p><p>支持对文件的随机访问读取和写入</p><pre class=" language-java"><code class="language-java">Public <span class="token function">RandomAccessFeile</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String mode<span class="token punctuation">)</span></code></pre><p>第一个参数是<strong>文件路径</strong>，第二个参数是<strong>操作文件的模式</strong></p><p>模式有四种，我们最常用的一种叫做 “rw”</p><p>这种方式即可以写数据也可以读数据</p><h3 id="六-合并流-简单认识"><a href="#六-合并流-简单认识" class="headerlink" title="(六) 合并流 (简单认识)"></a>(六) 合并流 (简单认识)</h3><p>(1)可以把对象写入文本文件或者在网络中传输</p><p><strong>(2)如何实现序列化呢?</strong></p><p>让被序列化的对象所属类实现序列化接口。</p><p>(java.io.Serializable)</p><p>该接口是一个标记接口。没有功能需要实现。</p><p><strong>(3)注意问题：</strong></p><p>把数据写到文件后，在去修改类会产生一个问题。</p><p>如何解决该问题呢?</p><p>在类文件中，自动给出一个固定的序列化id值。</p><p>而且，这样也可以解决黄色警告线问题</p><p><strong>(4)如何让部分对象的成员变量不被序列化</strong></p><p>使用transient关键字声明不需要序列化的成员变量</p><h3 id="七-Properties-简单认识"><a href="#七-Properties-简单认识" class="headerlink" title="(七) Properties (简单认识)"></a>(七) Properties (简单认识)</h3><p><strong>(1)是一个集合类，Hashtable的子类</strong></p><p><strong>(2)特有功能</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果键值都是字符串的情况下只能使用特殊功能</span><span class="token comment" spellcheck="true">//添加元素</span><span class="token keyword">public</span> Object <span class="token function">setProperty</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取元素</span><span class="token keyword">public</span> String <span class="token function">getProperty</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取所有的键的集合</span><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">stringPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>(3)和IO流结合的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//把键值对形式的文本文件内容加载到集合中</span><span class="token comment" spellcheck="true">//把文件中的数据读取到集合中</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>Reader reader<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把集合中的数据存储到文件</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>InputStream inStream<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把集合中的数据存储到文本文件中</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span>Writer writer<span class="token punctuation">,</span>String comments<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">,</span>String comments<span class="token punctuation">)</span></code></pre><p>(4)案例：</p><p>A:根据给定的文件判断是否有键为”lisi”的，如果有就修改其值为100</p><p>B:写一个程序实现控制猜数字小游戏程序不能玩超过5次</p><h3 id="七-NIO-简单认识"><a href="#七-NIO-简单认识" class="headerlink" title="(七) NIO (简单认识)"></a>(七) NIO (简单认识)</h3><p>(1)JDK4出现的NIO，对以前的IO操作进行了优化，提供了效率。但是大部分我们看到的还是以前的IO</p><p>(2)JDK7的NIO的使用    </p><p>​    Path:路径</p><p>​    Paths:通过静态方法返回一个路径</p><p>​    Files:提供了常见的功能</p><pre><code> 复制文本文件</code></pre><p>​    把集合中的数据写到文本文件</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.4-IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> io流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-IO流</title>
      <link href="/2019/09/17/1.4-io/003-io-liu/"/>
      <url>/2019/09/17/1.4-io/003-io-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="第四阶段-IO"><a href="#第四阶段-IO" class="headerlink" title="第四阶段 IO"></a>第四阶段 IO</h1><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><blockquote><p>前面的学习我们只能够在已有的一定封闭范围内进行一些操作，但是这显然是无趣的，也是不支持我们实现一些复杂的需求，所以Java提供IO流这样一种概念，方便我们对数据进行操作</p></blockquote><p>而使用IO流我们可以实现一些强大的功能，例如针对文件的移动复制等操作，又或者程序与外部文件之间的数据存储或者读取，又或者实现一个实时的聊天程序（网络编程），其中数据的传输也用到了我们的IO流，这些内容我们都会在后面设计，下面我就开始IO流的正式学习</p><h3 id="一-IO流的概述及分类"><a href="#一-IO流的概述及分类" class="headerlink" title="(一) IO流的概述及分类"></a>(一) IO流的概述及分类</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h4><p>IO 即 input/output（输入/输出），流的概念还是有一些陌生的</p><p>“流”从字面看来就是类似水流的概念，其具有方向性，流动性，连续性、并且可以承载一些事物，而在我们计算机中，“流”是对一种有序连续具有方向性的数据的抽象描述。其本质就是数据的传输，而根据其特点将其抽象封装为各种类，更加方便了用户的操作</p><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="(2) 分类"></a>(2) 分类</h4><p><strong>A:流向</strong></p><ul><li>输入流——读取数据</li><li>输出流——写出数据</li></ul><p><strong>B:数据类型</strong></p><ul><li>字节流    <ul><li>字节输入流——InputStream</li><li>字节输出流——OutputStream</li></ul></li><li>字符流<ul><li>字符输入流——Reader</li><li>字符输出流——Writer</li></ul></li></ul><p>注意：</p><p>a: 如果我们没有明确说明按照什么分，默认按照数据类型分。</p><p>b: 除非文件用windows自带的记事本打开我们能够读懂，才采用字符流，否则建议使用字节流。</p><h3 id="二-字节流"><a href="#二-字节流" class="headerlink" title="(二) 字节流"></a>(二) 字节流</h3><h4 id="1-FileOutputStream-写出数据"><a href="#1-FileOutputStream-写出数据" class="headerlink" title="(1) FileOutputStream 写出数据"></a>(1) FileOutputStream 写出数据</h4><p><strong>A：操作步骤</strong></p><ul><li>创建字节输出流对象</li><li>调用writer()方法</li><li>释放资源</li></ul><p><strong>B：代码体现</strong></p><pre class=" language-java"><code class="language-java">FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span>close<span class="token punctuation">;</span></code></pre><p><strong>换行操作</strong></p><p>因为不同的系统针对不同的换行符号识别是不一样的</p><p>windows：<strong>\r\n</strong>        linux：<strong>\n</strong>        Mac：<strong>\r</strong></p><p>而一些常见的高级记事本是可以识别任意换行符号的</p><p><strong>如何实现数据的追加写入 ？</strong></p><p>用构造方法带第二个参数是true的情况即可</p><pre class=" language-java"><code class="language-java">FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-FileInputStream-读取数据"><a href="#2-FileInputStream-读取数据" class="headerlink" title="(2) FileInputStream 读取数据"></a>(2) FileInputStream 读取数据</h4><p><strong>A：操作步骤</strong></p><ul><li>创建字节输入流对象</li><li>调用writer()方法</li><li>释放资源</li></ul><p><strong>B：代码体现</strong></p><pre class=" language-java"><code class="language-java">FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用FileInputStream对指定路径下内容进行读取，可以结合FileOutputStream实现对文件的操作</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一</span>        <span class="token keyword">int</span> by <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>by <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//方式二（这种方式更加快，推荐）</span>        <span class="token comment" spellcheck="true">//数组长度一般是1024或者1024的整数倍</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放资源</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-字节缓冲流"><a href="#3-字节缓冲流" class="headerlink" title="(3) 字节缓冲流"></a>(3) 字节缓冲流</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//统计这段程序运行时间</span><span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//受测试代码</span><span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多，这是加入了数组这样的缓冲区效果，java本身在设计的时候，也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了字节缓冲区流</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字节缓冲输出流</span>BuffereOutputStream<span class="token comment" spellcheck="true">//字节缓冲输入流</span>BufferedInputStream</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedOutputStreamDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        FileOutputStream fos = new FileOutputStream("F:\\fos.txt");</span><span class="token comment" spellcheck="true">//        BufferedOutputStream bos = new BufferedOutputStream(fos);</span>        <span class="token comment" spellcheck="true">//简单写法</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\fos.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写数据</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源，注意不需要fos.close</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>为什么不传递一个具体的文件或者文件路径，而是传递一个OutputStream对象呢?</strong></p><p>原因很简单，字节缓冲区流仅仅提供缓冲区，为高效而设计的。但是呢，真正的读写操作还得靠基本的流对象实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token string">"E:\\夜曲.mp3"</span><span class="token punctuation">,</span> <span class="token string">"F:\\Test1.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token string">"E:\\夜曲.mp3"</span><span class="token punctuation">,</span> <span class="token string">"F:\\Test2.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method3</span><span class="token punctuation">(</span><span class="token string">"E:\\夜曲.mp3"</span><span class="token punctuation">,</span> <span class="token string">"F:\\Test3.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method4</span><span class="token punctuation">(</span><span class="token string">"E:\\夜曲.mp3"</span><span class="token punctuation">,</span> <span class="token string">"F:\\Test4.mp3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//基本字节流一次读写一个字符</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span>String srcString<span class="token punctuation">,</span> String deskString<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcString<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>deskString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> by <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>by <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//基本字节流一次读写一个字节数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span>String srcString<span class="token punctuation">,</span> String deskString<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcString<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>deskString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//高效字节流一次读写一个字节</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span>String srcString<span class="token punctuation">,</span> String deskString<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span>             <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>deskString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> by <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>by <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//高效字节流一次读写一个字节数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span>String srcString<span class="token punctuation">,</span> String deskString<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span>             <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>deskString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>共耗时<span class="token number">125961</span>毫秒共耗时<span class="token number">143</span>毫秒共耗时<span class="token number">1356</span>毫秒共耗时<span class="token number">29</span>毫秒</code></pre><p>由此可见在上述四种方式中，效率最高的还是最后一种——高效字节流一次读写一个字节数组！</p><h3 id="三-字符流"><a href="#三-字符流" class="headerlink" title="(三) 字符流"></a>(三) 字符流</h3><blockquote><p>我们在开发中，如果想要对我们所能识别的文本内容进行数据的传输，如果我们继续使用我们上面所学习的字节流，我们就会发现显示出来的内容是乱码，这是因为编码出现了问题，而这个时候我们就会用到我们的字符流，我们可以先简单的认识  字符流 = 字节流 + 编码</p></blockquote><h4 id="1-编码解码"><a href="#1-编码解码" class="headerlink" title="(1) 编码解码"></a>(1) 编码解码</h4><table><thead><tr><th>编码</th><th>说明</th></tr></thead><tbody><tr><td><strong>ASCII</strong></td><td>美国标准信息交换码，用一个字节的7位可以表示。</td></tr><tr><td><strong>ISO8859-1</strong></td><td>拉丁码表。欧洲码表，用一个字节的8位表示。</td></tr><tr><td><strong>GB2312</strong></td><td>中国的中文编码表。</td></tr><tr><td><strong>GBK</strong></td><td>中国的中文编码表升级，融合了更多的中文文字符号。</td></tr><tr><td><strong>GB18030</strong></td><td>GBK的取代版本</td></tr><tr><td><strong>BIG-5码</strong></td><td>行于台湾、香港地区的一个繁体字编码方案，俗称“大五码”。</td></tr><tr><td><strong>Unicode</strong></td><td>国际标准码，融合了多种文字， 有文字都用两个字节来表示,Java语言使用的就是unicode</td></tr><tr><td><strong>UTF-8</strong></td><td>最多用三个字节来表示一个字符。UTF-8不同，它定义了一种“区间规则”，这种规则可以和ASCII编码保持最大程度的兼容：它将Unicode编码为00000000-0000007F的字符，用单个字节来表示它将Unicode编码为00000080-000007FF的字符用两个字节表示 它将Unicode编码为00000800-0000FFFF的字符用3字节表示</td></tr></tbody></table><p>字节流我们前面已经有了一定的认识，那么什么是编码和解码呢？</p><p><strong>编码</strong>是信息从一种形式或格式转换为另一种形式的过程；<strong>解码</strong>则是编码的逆过程。 </p><p>我们先通过一个例子来了解一下它的流程</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过指定的字符集解码字节数组</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> String charsetName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用指定的字符集合把字符串编码为字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span>String charsetName<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncodingDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"理想"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String - byte[] - 编码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[-25, -112, -122, -26, -125, -77]</span><span class="token comment" spellcheck="true">//        byte[] bys = s.getBytes("UTF-8");   //[-25, -112, -122, -26, -125, -77]</span><span class="token comment" spellcheck="true">//        byte[] bys = s.getBytes("GBK"); //[-64, -19, -49, -21]</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//byte[] - String - 解码</span>        String string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//理想</span><span class="token comment" spellcheck="true">//        String string = new String(bys,"UTF-8");    //理想</span><span class="token comment" spellcheck="true">//        String string = new String(bys,"GBK");    //鐞嗘兂</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发送过程：“理想” —— 数字 —— 二进制 —— 发送</p><p>接收过程：接收 —— 二进制 —— 十进制 —— 数值 —— 字符 —— “理想”</p><p>其实简单的总结就是：</p><p><strong>编码：</strong>把看得懂的变成看不懂的</p><p><strong>解码：</strong>把看不懂的变成看得懂的</p><h4 id="2-字符输入输出流"><a href="#2-字符输入输出流" class="headerlink" title="(2) 字符输入输出流"></a>(2) 字符输入输出流</h4><p><strong>OutputStreamWriter 字符输出流（写出）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">OutputStreamWriter</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">OutputStreamWriter</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">,</span>String charsetName<span class="token punctuation">)</span></code></pre><p><strong>InputStreamReader 字符输入流（读取）</strong></p><pre><code>public InputStreamReader(InputStream in)public InputStreamReader(InputStream in,String charsetName)</code></pre><p><strong>OutputStreamWriter写数据方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写一个字符</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写一个字符数组</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写一个字符数组的一部分</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写一个字符串</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//写一个字符串的一部分</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span></code></pre><p><strong>OutputStreamWriter读数据方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//读一个字符</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个字符数组</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf<span class="token punctuation">)</span></code></pre><p><strong>字符流操作要注意的问题</strong></p><p><strong>flush()和close()的区别 ？</strong></p><p><strong>close</strong>：关闭流对象，但是先刷新一次缓冲区，关闭之后，流对象就不能继续使用了</p><p><strong>flush</strong>：仅仅刷新缓冲区，刷新之后，流对象还可以继续使用</p><h4 id="2-字符流的简单写法"><a href="#2-字符流的简单写法" class="headerlink" title="(2) 字符流的简单写法"></a>(2) 字符流的简单写法</h4><p>转换流的名字比较长，而我们常见的操作都是按照本地默认编码实现的，所以，为了简化我们的书写，转换流提供了对应的子类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//输出流</span>FileWriter<span class="token comment" spellcheck="true">//输入流</span>FileReader</code></pre><pre class=" language-java"><code class="language-java">OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等价</span>FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> （写出）InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//等价 </span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> （读取）</code></pre><h4 id="3-字符缓冲流"><a href="#3-字符缓冲流" class="headerlink" title="(3) 字符缓冲流"></a>(3) 字符缓冲流</h4><p> <strong>BufferedWriter：字符缓冲输出流</strong></p><p>将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的<strong>高效写入</strong>。 </p><p>可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。</p><p><strong>BufferedReader：字符缓冲输入流</strong></p><p>从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的<strong>高效读取</strong>。 </p><p>可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。</p><p><strong>特殊功能</strong></p><p>BufferedWriter:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据系统来决定换行符</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> BufferedReader:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一次读取一行数据,包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null</span><span class="token keyword">public</span> String <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="四-IO流案例"><a href="#四-IO流案例" class="headerlink" title="(四) IO流案例"></a>(四) IO流案例</h3><h4 id="字节流案例"><a href="#字节流案例" class="headerlink" title="字节流案例"></a>字节流案例</h4><p><strong>案例一：复制单级文件夹</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 需求：复制单级文件夹 * * 数据源：f:\\demo * 目的地：f:\\test * * 分析： *         A:封装目录 *         B:获取该目录下的所有文本的File数组 *         C:遍历该File数组，得到每一个File对象 *         D:把该File进行复制 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFolderDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File srcFloder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File deskFloder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deskFloder<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            deskFloder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArray <span class="token operator">=</span> srcFloder<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> fileArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拼凑出每一个文件的路径</span>            File newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>deskFloder<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">copyFloder</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFloder</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> File newFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例二：复制指定目录下的指定文件，并修改后缀名</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 需求：复制指定目录下的指定文件，并修改后缀名。 * 指定的文件是：.txt文件。 * 指定的后缀名是：.bat * 指定的目录是：test * * 数据源：f:\\demo\\A.txt * 目的地：f:\test\\A.bat * * 分析： *         A:封装目录 *         B:获取该目录下的java文件的File数组 *         C:遍历该File数组，得到每一个File对象 *         D:把该File进行复制 *         E:在目的地目录下改名 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFolderDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File srcFloder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File destFloder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destFloder<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            destFloder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArray <span class="token operator">=</span> srcFloder<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> fileArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFloder<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">copyFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> deskFileArray <span class="token operator">=</span> destFloder<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File destFile <span class="token operator">:</span> deskFileArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> destFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String newName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">,</span> <span class="token string">".bat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFloder<span class="token punctuation">,</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span>            destFile<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> File newFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例三：复制多级文件夹</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 需求：复制多极文件夹 * * 数据源：F:\\admin * 目的地：E:\\ * * 分析： *         A:封装数据源File *         B:封装目的地File *         C:判断该File是文件夹还是文件 *             a:是文件夹 *                 就在目的地目录下创建该文件夹 *                 获取该File对象下的所有文件或者文件夹File对象 *                 遍历得到每一个File对象 *                 回到C *             b:是文件 *                 就复制(字节流) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFloderDemo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        File srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copyFolder</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFolder</span><span class="token punctuation">(</span>File srcFile<span class="token punctuation">,</span> File destFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            File newFolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFile<span class="token punctuation">,</span> srcFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newFolder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取该File对象下的所有文件或者文件夹File对象</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> fileArray <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> fileArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//递归，继续判断</span>                <span class="token function">copyFolder</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> newFolder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            File newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFile<span class="token punctuation">,</span> srcFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">copyFile</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>File srcFile<span class="token punctuation">,</span> File newFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="字符流案例"><a href="#字符流案例" class="headerlink" title="字符流案例"></a>字符流案例</h4><p><strong>案例一：随机获取文本文件中的姓名案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 随机获取文本文件中的姓名案例 *      需求：我有一个文本文件中存储了几个名称 *      请大家写一个程序实现随机获取一个人的名字。 * * 分析： *        A:把文本文件中的数据存储到集合中 *        B:随机产生一个索引 *        C:根据该索引获取一个值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetRandName</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"F:\\test.txt"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        BufferedReader br = new BufferedReader(new FileReader(path));</span>        <span class="token comment" spellcheck="true">//默认记事本以ansi编码保存，但是使用FileReader默认使用UTF-8输出，所以使用上面语句会乱码</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gb2312"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该幸运儿是："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例二：键盘录入学生信息按照总分排序并写入文本文件案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Student类自行补充</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        TreeSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Student s1<span class="token punctuation">,</span> Student s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s1<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> s1<span class="token punctuation">.</span><span class="token function">getChinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getChinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> num<span class="token punctuation">;</span>                <span class="token keyword">int</span> num3 <span class="token operator">=</span> num2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> s1<span class="token punctuation">.</span><span class="token function">getMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> num2<span class="token punctuation">;</span>                <span class="token keyword">int</span> num4 <span class="token operator">=</span> num3 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> s1<span class="token punctuation">.</span><span class="token function">getEnglish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getEnglish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> num3<span class="token punctuation">;</span>                <span class="token keyword">int</span> num5 <span class="token operator">=</span> num4 <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> num4<span class="token punctuation">;</span>                <span class="token keyword">return</span> num5<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入第"</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"个学生成绩信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"语文成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> chinese <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数学成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> math <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"英语成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> english <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">setChinese</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">setMath</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">setEnglish</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span><span class="token punctuation">;</span>            ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"F:\\students.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"学生成绩信息如下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"姓名-语文成绩-数学成绩-英语成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Student stu <span class="token operator">:</span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>                StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getChinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getEnglish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生成绩信息录入完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例三：登陆注册案例（使用IO）</strong></p><p>在前几篇中集合实现的基础上，其余文件不变，只需要对 UserDaoImpl.java 文件进行重写</p><p>由于篇幅较长，其余dao、pojo、test层代码请翻阅前几篇中 集合框架——List篇</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_05_LoginDemo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>bwh_05_LoginDemo<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>bwh_05_LoginDemo<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 这是用户操作的具体实现类 (IO) * * @author BWH_Steven * @version v1.1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"User.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLogin</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>        String path <span class="token operator">=</span> <span class="token string">"user.txt"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//用户名--密码</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> datas <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> datas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找不到登录所需要的信息文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户登录释放资源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         *  为注册的数据定义一个规则： 用户名--密码         */</span>        BufferedWriter bw <span class="token operator">=</span> null<span class="token punctuation">;</span>        String path <span class="token operator">=</span> <span class="token string">"user.txt"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为了保证数据是追加写入，所以必须加true</span>            bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path,true),"gb2312"));</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户注册失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户注册释放资源失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.4-IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
            <tag> 字符流 </tag>
            
            <tag> 字节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-File</title>
      <link href="/2019/09/17/1.4-io/002-file-lei/"/>
      <url>/2019/09/17/1.4-io/002-file-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第四阶段-IO"><a href="#第四阶段-IO" class="headerlink" title="第四阶段 IO"></a>第四阶段 IO</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><blockquote><p>我们想要实现IO的操作，就必须知道硬盘上文件的表现形式</p></blockquote><h3 id="一-概述及构造方法"><a href="#一-概述及构造方法" class="headerlink" title="(一) 概述及构造方法"></a>(一) 概述及构造方法</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><p>File：文件和目录(文件夹)路径名的抽象表示形式,并不代表一定存在</p><h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="(2) 构造方法"></a>(2) 构造方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据一个路径得到File对象(一般用这个)</span><span class="token function">File</span><span class="token punctuation">(</span>String pathname<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据一个目录和一个子文件/目录得到File对象(也就是说，parent是文件夹，child代表这个文件夹里面的文件或者子文件夹)</span><span class="token function">File</span><span class="token punctuation">(</span>String parent<span class="token punctuation">,</span> String child<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据一个父File对象和一个子文件/目录得到File对象</span><span class="token function">File</span><span class="token punctuation">(</span>File parent<span class="token punctuation">,</span> String child<span class="token punctuation">)</span></code></pre><h3 id="二-功能"><a href="#二-功能" class="headerlink" title="(二) 功能"></a>(二) 功能</h3><h4 id="1-创建功能"><a href="#1-创建功能" class="headerlink" title="(1) 创建功能"></a>(1) 创建功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建文件，如果存在这样的文件，就不创建</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建文件夹，如果存在这样的文件夹，就不创建了</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建多级文件夹</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-删除功能"><a href="#2-删除功能" class="headerlink" title="(2) 删除功能"></a>(2) 删除功能</h4><pre class=" language-java"><code class="language-java">Public <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意：</p><p>A：如果你创建文件或者文件夹忘了写盘符路径，那么，默认在项目路径下。</p><p>B：Java中的删除经过回收站</p><p>C：要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹</p><h4 id="3-重命名功能"><a href="#3-重命名功能" class="headerlink" title="(3) 重命名功能"></a>(3) 重命名功能</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">renameTo</span><span class="token punctuation">(</span>File dest<span class="token punctuation">)</span></code></pre><p>注意；</p><p>A：如果路径名相同，就是改名</p><p>B：如果路径名不相同，就是改名并剪切</p><h4 id="4-判断功能"><a href="#4-判断功能" class="headerlink" title="(4) 判断功能"></a>(4) 判断功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断是否是目录</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否是文件</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否存在</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否可读</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否可写</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否隐藏</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="5-获取功能"><a href="#5-获取功能" class="headerlink" title="(5) 获取功能"></a>(5) 获取功能</h4><h5 id="基本获取功能"><a href="#基本获取功能" class="headerlink" title="基本获取功能"></a>基本获取功能</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取绝对路径</span><span class="token keyword">public</span> String <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取相对路径</span><span class="token keyword">public</span> String <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取名称</span><span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取长度，字节数</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取最后一次修改时间，毫秒值</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="高级获取功能"><a href="#高级获取功能" class="headerlink" title="高级获取功能"></a>高级获取功能</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取指定目录下的所有文件或者文件夹的名称数组</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取指定目录下的所有文件或者文件夹的file数组</span><span class="token keyword">public</span> File<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="三-经典案例"><a href="#三-经典案例" class="headerlink" title="(三) 经典案例"></a>(三) 经典案例</h3><p><strong>案例 (一) 输出指定目录下指定后缀名的文件名称案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  判断F盘目录下有没有后缀名为.txt的文件 如果有则输出 *  分析： *      A: 封装 F 判断目录 *      B：获取该目录下的所有文件或文件夹 File数组 *      C：遍历该File数组，获取每一个File对象，然后判断 *      D：是否是文件 *            是：是否是.txt文件 *                  是：输出文件名称 *                  否：不做处理 *            否：不做处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> fillArray <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> fillArray<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例（二）文件过滤器改进输出指定目录下指定后缀名的文件名称案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FilenameFilter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  案例 (二) 文件过滤器改进输出指定目录下指定后缀名的文件名称案例 *  判断F盘目录下有没有后缀名为.txt的文件 如果有则输出 *      A：先获取所有的，然后遍历的时候依次判断 ，如果满足条件就输出 *      B：获取的时候已经是满足条件的了，然后输出即可 * *  接口：文件名称过滤器 *      public String[] list(FilenameFilter filter) *      public File[] listFiles(FilenameFilter filter) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"f:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File dir<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flag <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> flag2 <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> flag <span class="token operator">&amp;&amp;</span> flag2<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//是否将内容添加到数组中取决于这里的返回值</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> strArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>重写方法中可以优化为：<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.4-IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> File类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-异常</title>
      <link href="/2019/09/17/1.4-io/001-yi-chang/"/>
      <url>/2019/09/17/1.4-io/001-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="第四阶段-IO"><a href="#第四阶段-IO" class="headerlink" title="第四阶段 IO"></a>第四阶段 IO</h1><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote><p>没有完美的程序，所以我们需要不断地完善，考虑各种可能性，我们要将除了自己以外的任何用户或者操作者都当成傻子来考虑问题</p><p>在我们开发过程中 我们运行时常常会遇到 这样java.lang.XxxException的信息，这代表程序发生了一些错误，也叫作异常 </p></blockquote><h3 id="一-概述及体系"><a href="#一-概述及体系" class="headerlink" title="(一) 概述及体系"></a>(一) 概述及体系</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><blockquote><p>异常情形是指阻止当前方法或者作用域继续执行的问题    ——《Think in Java》 </p></blockquote><p>简单概括：程序出现不正常情况后，程序将会跳出当前环境，并且抛出异常。</p><h4 id="2-体系"><a href="#2-体系" class="headerlink" title="(2) 体系"></a>(2) 体系</h4><p><strong>(1) Error</strong> —— <strong>错误</strong>：程序无法处理的严重错误，我们不作处理</p><ul><li>这种错误一般来说与操作者无关，并且开发者与应用程序没有能力去解决这一问题，通常情况下，JVM会做出终止线程的动作</li></ul><p><strong>(2) Exception</strong> —— <strong>异常</strong>：异常可以分为运行时异常和编译期异常</p><ul><li><p><strong>RuntimeException</strong>：即<strong>运行时异常</strong>，我们必须修正代码</p><ul><li><p>这些异常通常是由于一些逻辑错误产生的</p><p>   这类异常在代码编写的时候不会被编译器所检测出来，是可以不需要被捕获，但是程序员                 也可以根据需要行捕获抛出，（不受检查异常）这类异常通常是可以被程序员避免的。<br>   常见的RUNtimeException有：NullpointException（空指针异常），ClassCastException                （类型转    换异常），IndexOutOfBoundsException（数组越界异常）等。</p></li></ul></li><li><p><strong>非RuntimeException</strong>：<strong>编译期异常</strong>，必须处理，否则程序编译无法通过</p><ul><li>这类异常在编译时编译器会提示需要捕获，如果不进行捕获则编译错误。</li><li>常见编译异常有：IOException（流传输异常），SQLException（数据库操作异常）等。</li></ul></li></ul><p><img src="http://image.ideal-20.cn/basic/1.4-01-001.png" alt></p><h4 id="Java内置异常类"><a href="#Java内置异常类" class="headerlink" title="Java内置异常类"></a>Java内置异常类</h4><p><strong>A：Java 的非检查性异常</strong></p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>ArithmeticException</td><td>当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td></tr><tr><td>ClassCastException</td><td>抛出表示代码尝试将对象转换为不属于实例的子类。 例如：将Integer型对象转换为String类</td></tr><tr><td>IllegalArgumentException</td><td>抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td>NumberFormatException</td><td>抛出以表示应用程序已尝试将字符串转换为其中一个数字类型，但该字符串不具有相应的格式。</td></tr><tr><td>IllegalStateException</td><td>表示在非法或不适当的时间调用了一种方法。  换句话说，Java环境或Java应用程序对于请求的操作并不处于适当的状态。</td></tr><tr><td>IndexOutOfBoundsException</td><td>指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。   应用程序可以将此类子类化以指示类似的异常。</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td>NoSuchElementException</td><td>被各种访问器方法抛出，表示被请求的元素不存在。</td></tr><tr><td>InputMismatchException</td><td>输入类型不匹配异常，一般出现此类异常的原因就是定义的接受输入值的变量的类型与输入的数值的类型不匹配导致的异常。</td></tr><tr><td>NullPointerException</td><td>空指针异常</td></tr></tbody></table><p><strong>B：Java的检查性异常</strong></p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>ClassNotFoundException</td><td>应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td>CloneNotSupportedException</td><td>当调用 Object 类中的 clone 方法克隆对象，但该对象的类无法实现 Cloneable 接口时，抛出该异常。</td></tr><tr><td>InstantiationException</td><td>当试图使用 Class 类中的 newInstance 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr></tbody></table><h3 id="二-异常处理语句"><a href="#二-异常处理语句" class="headerlink" title="(二) 异常处理语句"></a>(二) 异常处理语句</h3><h4 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="(1) try-catch"></a>(1) try-catch</h4><p>A：捕获单个异常</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionName</span> e1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Catch块</span><span class="token punctuation">}</span></code></pre><p>B：多重捕获块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//程序代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型<span class="token number">3</span> 异常的变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>try</strong>：用于监听异常</p><p><strong>catch</strong>：用于捕获处理异常</p><p><strong>try</strong> 后面的一对大括号内的内容即受到监控的程序，也就是说这一段代码是可能存在异常的，而<strong>Catch</strong>中由开发者，根据自身推断可能存在的异常，书写对应异常类型以及处理方式，当程序发生异常时，会创建异常对象，并且将异常抛出到此环境外，Java运行时系统会寻找与发生异常所匹配的<strong>catch</strong>子句，当找到一个对应语句后则不再寻找其他catch块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个被除数为0的式子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>这是一个被除数为<span class="token number">0</span>的式子除数不能为<span class="token number">0</span></code></pre><p>通过上例可以看到，被监控的语句中先依次正常执行，当遇到存在问题的语句时，找到匹配异常，并且执行catch块中的语句</p><p>而一般来说我们会在catch语句块中通过异常对象执行异常方法</p><table><thead><tr><th align="left">方法方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">public String getMessage()</td><td>回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了</td></tr><tr><td align="left">public Throwable getCause()</td><td>返回一个Throwable 对象代表异常原因</td></tr><tr><td align="left">public String toString()</td><td>使用getMessage()的结果返回类的串级名字</td></tr><tr><td align="left">public void printStackTrace()</td><td>打印toString()结果和栈层次到System.err，即错误输出流</td></tr></tbody></table><p>我们还是用上面的例子给出异常方法的测试</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span> by zero</code></pre><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>null</code></pre><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArithmeticException<span class="token operator">:</span> <span class="token operator">/</span> by zero</code></pre><pre class=" language-java"><code class="language-java">e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArithmeticException<span class="token operator">:</span> <span class="token operator">/</span> by zero    at cn<span class="token punctuation">.</span>bwh_01_Throwable<span class="token punctuation">.</span>Demo<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Demo<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h4 id="2-try-catch-finally"><a href="#2-try-catch-finally" class="headerlink" title="(2) try-catch-finally"></a>(2) try-catch-finally</h4><p>我们在 try-catch的基础上再补充一个finally的知识</p><p>finally 关键字用来创建在 try 代码块后面执行的代码块无论是否发生异常，finally 代码块中的代码总会被执行，在 finally 代码块中，可以运行清理类型等收尾善后性质的语句，finally 代码块出现在 catch 代码块最后，语法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>无论是否发生异常，fianlly始终都是会运行的</p><p>这里就不得不提一个非常重要的注意点，那就是当<strong>return遇到finally</strong>！</p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="A：return遇到finally"><a href="#A：return遇到finally" class="headerlink" title="A：return遇到finally"></a>A：return遇到finally</h5><p>我们来看下面一个例程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"This is try"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"This is catch 1"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"This is catch 2"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return "This is finally's return";</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArrayIndexOutOfBoundsException<span class="token operator">:</span> <span class="token number">3</span>This is <span class="token keyword">finally</span>This is <span class="token keyword">catch</span> <span class="token number">1</span></code></pre><p>由此我们得出一个结论：在catch中遇到return时，仍然会先执行finally语句，再回来执行对应catch语句中的return语句</p><p>但是我们如果将finally中return行中的注释去掉，运行结果就会变成下面这样子</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运行结果</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArrayIndexOutOfBoundsException<span class="token operator">:</span> <span class="token number">3</span>This is <span class="token keyword">finally</span>This is <span class="token keyword">finally</span>'s <span class="token keyword">return</span></code></pre><p>结果就是返回值会被finally中的return语句重新覆盖</p><h5 id="B：catch-顺序问题"><a href="#B：catch-顺序问题" class="headerlink" title="B：catch 顺序问题"></a>B：catch 顺序问题</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Error<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> java<span class="token operator">:</span> 已捕获到异常错误java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArrayIndexOutOfBoundsException</code></pre><p>对于多个catch的情况，当try中程序发生异常，会按照从上往下的顺序与catch进行匹配，一旦与其中一个匹配后就不会再与后面的catch进行匹配了，所以，<strong>在书写catch语句的时候，一定要把范围小的放在前面，范围大的放在后面！</strong></p><h4 id="3-throw-throws"><a href="#3-throw-throws" class="headerlink" title="(3) throw/throws"></a>(3) throw/throws</h4><p>将自己处理不了的，在方法或者语句上声明，告诉调用者，这里有问题</p><p>如果一个方法没有捕获到检查性异常，那么该方法就必须使用throws关键字声明（声明抛出多个异常，之间使用逗号隔开），也可以在语句中使用throw关键字抛出一个异常。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//演示throw</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ArithmeticException</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//演示throws</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception</code></pre><h5 id="throws和throw的区别"><a href="#throws和throw的区别" class="headerlink" title="throws和throw的区别"></a>throws和throw的区别</h5><p>A：throws</p><ul><li>用在方法声明后，跟的是异常类名</li><li>可以跟多个异常类名，用逗号隔开</li><li>表示抛出异常，由该方法的调用者来处理</li><li>throws表示出现异常的一种可能性，不一定会发生这些异常</li></ul><p>B：throw</p><ul><li><p>用在方法体内，跟的是异常对象名</p></li><li><p>只能抛出一个异常对象名</p></li><li><p>表示抛出异常，由方法体内的语句处理</p></li><li><p>执行throw则一定抛出了某种异常</p></li></ul><h3 id="三-自定义异常"><a href="#三-自定义异常" class="headerlink" title="(三) 自定义异常"></a>(三) 自定义异常</h3><p>Java内置的异常类，基本可以满足我们在编程中遇到的大部分异常情况，此外我们还可以自定义异常类，只需要继承Exception类即可</p><p>基本步骤：</p><ul><li><p>创建自定义异常类</p></li><li><p>在方法中通过throw抛出异常对象</p><ul><li>在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获处理</li><li>也可以在方法声明处使用throws将异常抛给方法调用者</li></ul></li><li><p>在出现异常方法的调用者中捕获并且处理异常</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 自定义的类</span>    <span class="token function">MyException</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MyException <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出自定义的类</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>MyException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Wrong</code></pre><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="(三) 总结"></a>(三) 总结</h3><p>异常就是在程序发生异常时，强制终止程序运行，并且将异常信息返回，由开发者决定是否处理异常</p><p>简单说一下这个异常机制的过程：</p><p>当程序无法运行后，它会从当前环境中跳出，并且抛出异常，之后，它会先new一个异常对象，然后在异常位置终止程序，并且将异常对象的引用从当前环境中返回，这时候异常处理机制接管程序，并且开始寻找可以继续执行程序的恰当位置。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.4-IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>011-Date、DateFormat和Calendar类的简单认识</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/011-date-dateformat-he-calendar-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/011-date-dateformat-he-calendar-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="Date、DateFormat和Calendar类的简单认识"><a href="#Date、DateFormat和Calendar类的简单认识" class="headerlink" title="Date、DateFormat和Calendar类的简单认识"></a>Date、DateFormat和Calendar类的简单认识</h2><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>Date:表示特定的瞬间，精确到毫秒。</p><h4 id="一-构造方法："><a href="#一-构造方法：" class="headerlink" title="(一) 构造方法："></a>(一) 构造方法：</h4><pre class=" language-java"><code class="language-java"><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>根据当前的默认毫秒值创建日期对象<span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span>：根据给定的毫秒值创建日期对象</code></pre><h4 id="二-成员方法："><a href="#二-成员方法：" class="headerlink" title="(二) 成员方法："></a>(二) 成员方法：</h4><pre class=" language-java"><code class="language-java"><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d1："</span> <span class="token operator">+</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d2："</span> <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>d1：Mon Jun <span class="token number">10</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">00</span> CST <span class="token number">2019</span>d2：Mon Jun <span class="token number">10</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">00</span> CST <span class="token number">2019</span></code></pre><h3 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h3><p><img src="http://image.ideal-20.cn/basic/1.3-11-001.jpg" alt></p><p><strong>Date → String(格式化)</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//(这个是具体子类SimpleDateFormat的父类DateForamt中的一个方法)</span>Public <span class="token keyword">final</span> String <span class="token function">format</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span></code></pre><p><strong>String→ Date(解析) parse ()</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span></code></pre><p><strong>DateFormat:</strong></p><p>可以进行日期和字符串的格式化和解析，但是由于是抽象类，所以使用具体子类SimpleDateFormat。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。  *  注意:有的格式大写，有的格式小写 *    例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12小时制。 */</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_02_DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"E yyyy.MM.dd 'at' hh:mm:ss a zzz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current Date："</span> <span class="token operator">+</span> ft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Current Date：星期一 <span class="token number">2019.06</span><span class="token punctuation">.</span><span class="token number">10</span> at <span class="token number">10</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">43</span> 下午 CST</code></pre><p><strong>案例：计算某一时间到现在的天数</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  计算某一时间到现在的天数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入过去的一个时间点(以“ - ”分隔)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把字符串转换为一个日期</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date d <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过该日期获取一个毫秒值</span>        <span class="token keyword">long</span> oldTime <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前时间毫秒值</span>        <span class="token keyword">long</span> nowTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> nowTime <span class="token operator">-</span> oldTime<span class="token punctuation">;</span>        <span class="token keyword">long</span> day <span class="token operator">=</span> time<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个时间过去："</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>请输入过去的一个时间点<span class="token punctuation">(</span>以“ <span class="token operator">-</span> ”分隔<span class="token punctuation">)</span>：<span class="token number">2019</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">20</span>这个时间过去：<span class="token number">21</span>天</code></pre><h3 id="Calendar-类"><a href="#Calendar-类" class="headerlink" title="Calendar 类"></a>Calendar 类</h3><p>Calendar类是一个抽象类，常用语操作日历字段如 YEAR，MONTH，DAY_OF_MONTH，HOUR等</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回给定字段的值</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//根据给定的日历字段和对应的时间，来对当前的日历进行操作。</span><span class="token comment" spellcheck="true">//（amount可以是负的）</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置当前日历的年月日</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> date<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalendarDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Calendar rightNow <span class="token operator">=</span> Canlendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类对象</span>        <span class="token comment" spellcheck="true">//获取年月日</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> rightNow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> rightNow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> date <span class="token operator">=</span> rightNow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>month <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>案例：输出指定年份的日历</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalendarDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年份："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span> <span class="token operator">==</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> weekday <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> monthday <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>monthday <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n日\t一\t二\t三\t四\t五\t六\t第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"月"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weekday <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>monthday <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>weekday <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Date类 </tag>
            
            <tag> DateFormat类 </tag>
            
            <tag> Calendar类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>010-BigInteger和BigDecimal类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/010-biginteger-he-bigdecimal-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/010-biginteger-he-bigdecimal-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="BigInteger和BigDecimal类"><a href="#BigInteger和BigDecimal类" class="headerlink" title="BigInteger和BigDecimal类"></a>BigInteger和BigDecimal类</h2><h3 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h3><h4 id="一-构造方法："><a href="#一-构造方法：" class="headerlink" title="(一) 构造方法："></a>(一) 构造方法：</h4><pre><code>//针对超过整数范围的运算(整数最大值：2147483647)BigInteger(String val)  </code></pre><p>####(二) 常用方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加</span><span class="token keyword">public</span> BigInteger <span class="token function">add</span><span class="token punctuation">(</span>BigInteger val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//减</span><span class="token keyword">public</span> BigInteger <span class="token function">subtract</span><span class="token punctuation">(</span>BigInteger val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//乘</span><span class="token keyword">public</span> BigInteger <span class="token function">multiply</span><span class="token punctuation">(</span>BigInteger val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//除</span><span class="token keyword">public</span> BigInteger <span class="token function">divide</span><span class="token punctuation">(</span>BigInteger val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回商和余数的数组</span><span class="token keyword">public</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>BigInteger val<span class="token punctuation">)</span>    </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigIntegerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger bi1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger bi2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> bis <span class="token operator">=</span> bi1<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>bi2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商："</span> <span class="token operator">+</span> bis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余数:"</span> <span class="token operator">+</span> bis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>商：<span class="token number">2</span>余数<span class="token operator">:</span><span class="token number">0</span></code></pre><h3 id="BigInteger类-1"><a href="#BigInteger类-1" class="headerlink" title="BigInteger类"></a>BigInteger类</h3><blockquote><p>由于在运算的时候，float类型和double很容易丢失精度（下例为演示），所以为了能精确的表示、计算浮点数，Java提供了BigDecimal</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.09</span> <span class="token operator">+</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token number">0.32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.026</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.502</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token number">0.17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">0.09999999999999999</span><span class="token number">0.6799999999999999</span><span class="token number">102.60000000000001</span><span class="token number">0.01502</span><span class="token number">0.83</span></code></pre><h4 id="一-构造方法：-1"><a href="#一-构造方法：-1" class="headerlink" title="(一) 构造方法："></a>(一) 构造方法：</h4><p>我们来帖一组说明</p><blockquote><h4 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h4><pre><code>public BigDecimal(double val)</code></pre><p>将double转换为BigDecimal ，这是double的二进制浮点值的精确十进制表示。</p><p>返回的BigDecimal是(10scale ×  val)是一个整数的最小值。</p><p><strong>笔记：</strong> </p><ol><li><strong>这个构造函数的结果可能有些不可预测</strong>。 可以假设在Java中写入new  BigDecimal(0.1)创建一个BigDecimal  ，它完全等于0.1（非标尺值为1，比例为1），但实际上等于0.1000000000000000055511151231257827021181583404541015625。  这是因为0.1不能像double （或者作为任何有限长度的二进制分数）精确地表示。  因此，正在被传递给构造的值不是正好等于0.1，虽然表面上。  </li><li>该String构造，在另一方面，是完全可以预测的：写new  BigDecimal(“0.1”)创建BigDecimal这正好等于0.1，正如人们所期望的那样。  因此， 一<strong>般建议使用String constructor优先于此。</strong>  </li><li>当double必须用作源为BigDecimal  ，注意，此构造提供了一个精确的转换;  它不会将double转换为String使用Double.toString(double)方法，然后使用BigDecimal(String)构造函数相同的结果。  要获得该结果，请使用static valueOf(double)方法。  </li></ol><ul><li><p>参数  </p><p>val - double值转换为 BigDecimal 。  </p></li><li><p>异常  </p><p>NumberFormatException  - 如果 val 是无限或NaN。 </p></li></ul></blockquote><p><strong>构造方法</strong>：建议使用 → <strong>BigDecimal(String s)</strong> </p><h4 id="二-常用方法："><a href="#二-常用方法：" class="headerlink" title="(二) 常用方法："></a>(二) 常用方法：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal bd1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.09"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加："</span> <span class="token operator">+</span> bd1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bd2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"减："</span> <span class="token operator">+</span> bd3<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>bd4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.026"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乘："</span> <span class="token operator">+</span> bd5<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bd6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.502"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bd8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除："</span> <span class="token operator">+</span> bd7<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>加：<span class="token number">0.10</span>减：<span class="token number">0.68</span>乘：<span class="token number">102.600</span>除：<span class="token number">0.01502</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigInteger类 </tag>
            
            <tag> BigDecimal类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>009-Math类和Random类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/009-math-random-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/009-math-random-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="Math类和Random类"><a href="#Math类和Random类" class="headerlink" title="Math类和Random类"></a>Math类和Random类</h2><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><h4 id="一-成员变量："><a href="#一-成员变量：" class="headerlink" title="(一) 成员变量："></a>(一) 成员变量：</h4><pre class=" language-java"><code class="language-java">Public <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PIPublic <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> E</code></pre><h4 id="二-成员方法："><a href="#二-成员方法：" class="headerlink" title="(二) 成员方法："></a>(二) 成员方法：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//绝对值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回大于等于( >= )给定参数的的最小整数。（向上取整）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回小于等于( >= )给定参数的的最大整数。（向下取整）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回两数中最大值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回第一个参数的第二个参数次方</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回一个随机数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示四舍五入</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求参数的算术平方根。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//下例为生成一个1-100之间随机数的代码</span><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h3 id="二-Random类-了解"><a href="#二-Random类-了解" class="headerlink" title="(二) Random类 (了解)"></a>(二) Random类 (了解)</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><p> 用于产生随机数的类</p><h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="(2) 构造方法:"></a>(2) 构造方法:</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认种子，每次产生的随机数不同</span><span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定种子，每次种子相同，随机数就相同</span><span class="token function">Random</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> </code></pre><h4 id="3-成员方法"><a href="#3-成员方法" class="headerlink" title="(3) 成员方法:"></a>(3) 成员方法:</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回int范围内的随机数</span><span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回[0,n)范围内的随机数</span><span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> </code></pre><p>许多应用程序会发现方法<a href="#random--">Math.random()</a>使用<a href="#random--">起来</a>更简单。 </p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Random类 </tag>
            
            <tag> Math类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>008-System类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/008-system-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/008-system-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>System类包含一些有用的字段和方法，他不能被实例化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于垃圾回收</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//终止正在运行的java虚拟机。参数用作状态码，根据惯例，非0表示异常终止</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//System.out.println(System.currentTimeMillis());</span><span class="token comment" spellcheck="true">//返回从1970年1月1日到现在时间的毫秒数（协调时间）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>Object src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcPos<span class="token punctuation">,</span> Object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//src - 源数组。 </span><span class="token comment" spellcheck="true">//srcPos - 源数组中的起始位置。 </span><span class="token comment" spellcheck="true">//dest - 目标数组。 </span><span class="token comment" spellcheck="true">//destPos - 目的地数据中的起始位置。 </span><span class="token comment" spellcheck="true">//length - 要复制的数组元素的数量。 </span></code></pre><p>arraycopy方法的使用案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></code></pre><p>currentTimeMills()使用案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_02_currenTimeMillis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//统计这段程序运行时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>Hello9997Hello9998Hello9999共耗时<span class="token number">79</span>毫秒</code></pre><p>System.gc() 可用于垃圾回收.当使用System.gc() 回收某个对象所占用的内存之前，通过要求程序调用适当的方法来清理资源，在没有明确指定资源清理的情况下，Java提高了默认机制来清理该对象的资源，就是<strong>调用object类的finalize()方法，finalize()方法的作用是释放一个对象占用的内存空间时会被JVM调用.而子类重写该方法, 就可以清理对象占用的资源</strong>，该方法没有链式调用, 所以必须手动实现。</p><p><strong>从程序结果上可以发现执行system.gc() 前系统会自动调用finalize() 方法清除对象占有的资源。通过super.finalize()可以实现从下到上的方法调用，即先释放自己的资源，再释放父类的资源。</strong> </p><p><strong>但是不要在程序中频繁的调用垃圾回收</strong>，因为每一次执行垃圾回收jvm都会强制启动垃圾回收器运行，就会耗费更多的系统资源会与正常的Java程序运行争抢资源，只有在执行大量的对象的释放才调用垃圾回收最好。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_01_gc<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前对象被回收了"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_01_gc<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GcDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让s不再指定堆内存，成为了垃圾</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>cn<span class="token punctuation">.</span>bwh_01_gc<span class="token punctuation">.</span>Student<span class="token annotation punctuation">@1b6d3586</span>当前对象被回收了cn<span class="token punctuation">.</span>bwh_01_gc<span class="token punctuation">.</span>Student<span class="token annotation punctuation">@1b6d3586</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> System类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>007-正则表达式</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/007-zheng-ze-biao-da-shi/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/007-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="一-正则表达式概述"><a href="#一-正则表达式概述" class="headerlink" title="(一) 正则表达式概述"></a>(一) 正则表达式概述</h3><h4 id="1-简单概述"><a href="#1-简单概述" class="headerlink" title="(1) 简单概述"></a>(1) 简单概述</h4><p>就是符合一定规则的字符串</p><h4 id="2-常见规则"><a href="#2-常见规则" class="headerlink" title="(2) 常见规则"></a>(2) 常见规则</h4><pre class=" language-java"><code class="language-java">A<span class="token operator">:</span>字符x 字符 x。举例：<span class="token string">'a'</span>表示字符a\ 反斜线字符。\n 新行（换行）符 <span class="token punctuation">(</span><span class="token string">'\u000A'</span><span class="token punctuation">)</span> \r 回车符 <span class="token punctuation">(</span><span class="token string">'\u000D'</span><span class="token punctuation">)</span>B<span class="token operator">:</span>字符类<span class="token punctuation">[</span>abc<span class="token punctuation">]</span> a、b 或 c（简单类） <span class="token punctuation">[</span><span class="token operator">^</span>abc<span class="token punctuation">]</span> 任何字符，除了 a、b 或 c（否定） <span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span> a到z 或 A到Z，两头的字母包括在内（范围） <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token number">0</span>到<span class="token number">9</span>的字符都包括C<span class="token operator">:</span>预定义字符类<span class="token punctuation">.</span> 任何字符。我的就是<span class="token punctuation">.</span>字符本身，怎么表示呢 \<span class="token punctuation">.</span>\d 数字：<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\w 单词字符：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z_0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>在正则表达式里面组成单词的东西必须有这些东西组成D<span class="token operator">:</span>边界匹配器<span class="token operator">^</span> 行的开头 $ 行的结尾 \b 单词边界就是不是单词字符的地方。举例：hello world<span class="token operator">?</span>haha<span class="token punctuation">;</span>xixiE<span class="token operator">:</span>Greedy 数量词 X<span class="token operator">?</span> X，一次或一次也没有X<span class="token operator">*</span> X，零次或多次X<span class="token operator">+</span> X，一次或多次X<span class="token punctuation">{</span>n<span class="token punctuation">}</span> X，恰好 n 次 X<span class="token punctuation">{</span>n<span class="token punctuation">,</span><span class="token punctuation">}</span> X，至少 n 次 X<span class="token punctuation">{</span>n<span class="token punctuation">,</span>m<span class="token punctuation">}</span> X，至少 n 次，但是不超过 m 次 </code></pre><h4 id="3-常见功能"><a href="#3-常见功能" class="headerlink" title="(3) 常见功能"></a>(3) 常见功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断功能</span>String类的<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分割功能</span>String类的<span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span>String regex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//替换功能</span>String类的<span class="token keyword">public</span> String <span class="token function">replaceAll</span><span class="token punctuation">(</span>String regex<span class="token punctuation">,</span>String replacement<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取功能</span>Pattern和MatcherPattern p <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"a*b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Matcher m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"aaaaab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>查找存不存在<span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>获取刚才查找过的数据</code></pre><p>正则表达式是非常强大的，我们通过几个简单的例子来看一下正则表达式的应用</p><h3 id="二-正则表达式的应用"><a href="#二-正则表达式的应用" class="headerlink" title="(二) 正则表达式的应用"></a>(二) 正则表达式的应用</h3><h4 id="1-判断功能以及正则表达式——验证邮箱格式案例"><a href="#1-判断功能以及正则表达式——验证邮箱格式案例" class="headerlink" title="(1) 判断功能以及正则表达式——验证邮箱格式案例"></a>(1) 判断功能以及正则表达式——验证邮箱格式案例</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String email <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义邮箱规则</span>        <span class="token comment" spellcheck="true">//"[a-zA-Z_0-9]+@[a-zA-Z_0-9]{2,6}(\\.[a-zA-Z_0-9]{2,3})+"</span>        <span class="token comment" spellcheck="true">//简化后</span>        String regex <span class="token operator">=</span> <span class="token string">"\\w+@\\w{2,6}(\\.\\w{2,3}+)"</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-拆分功能——好友年龄范围限制"><a href="#2-拆分功能——好友年龄范围限制" class="headerlink" title="(2) 拆分功能——好友年龄范围限制"></a>(2) 拆分功能——好友年龄范围限制</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  分割功能 *          String类的 public String[] split(String regex) *          根据正则表达式的匹配拆分此字符串 *  举例： *          社交软件中 *          搜索好友： *              性别：女 *              年龄：18-24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ages <span class="token operator">=</span> <span class="token string">"18-24"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义规则</span>        String regex <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> ages<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到int类型</span>        <span class="token keyword">int</span> StartAge <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> EndAge <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> StartAge <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> EndAge<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"确认过眼神，我遇上对的人！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可惜不是你，陪我到最后！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-把字符串中的数字排序"><a href="#3-把字符串中的数字排序" class="headerlink" title="(3) 把字符串中的数字排序"></a>(3) 把字符串中的数字排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"22 33 55 88 66 11"</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArray <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把字符串数字转换成int数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>strArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strArray<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把排序后的int数组再组装成一个字符串</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>result<span class="token operator">:</span> <span class="token number">11</span> <span class="token number">22</span> <span class="token number">33</span> <span class="token number">55</span> <span class="token number">66</span> <span class="token number">88</span></code></pre><h4 id="4-替换功能"><a href="#4-替换功能" class="headerlink" title="(4) 替换功能"></a>(4) 替换功能</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_03_RegexReplaceAll<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"hello123456world"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//所有数字用*给替换</span>        String regex <span class="token operator">=</span> <span class="token string">"\\d"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>hello<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>world</code></pre><h4 id="5-获取字符串中由3个字符组成的单词"><a href="#5-获取字符串中由3个字符组成的单词" class="headerlink" title="(5) 获取字符串中由3个字符组成的单词"></a>(5) 获取字符串中由3个字符组成的单词</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"hao hao xue xi tian tian xiang shang"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//规则</span>        String regex <span class="token operator">=</span> <span class="token string">"\\b\\w{3}\\b"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把规则编译成模式对象</span>        Pattern p <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过模式对象得到匹配器对象</span>        Matcher m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>haohaoxue</code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>006-基本类型包装类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/006-ji-ben-lei-xing-bao-zhuang-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/006-ji-ben-lei-xing-bao-zhuang-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><blockquote><p>我们提出一个需求，将520的二进制、八进制、十六进制算出来，对于这种基本类型的一些操作，包装类就可以很好地解决这些问题。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> love <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转换为二进制</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转换为八进制</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转换为十六进制</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">1000001000</span><span class="token number">1010</span><span class="token number">208</span></code></pre><p>将基本数据类型封装成对象的的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>常用的操作之一：用于基本数据类型与字符串之间的转换</p><p>例如：常见进制的转换</p><p>Public Static String toBinaryString(int i)</p><p>为了对基本数据类型进行更多的操作，更方便的操作，Java针对每一种数据类型都提供了对应的类类型，包装类类型。</p><pre class=" language-java"><code class="language-java">· <span class="token keyword">byte</span>            Byte· <span class="token keyword">short</span>            Short· <span class="token keyword">int</span>             Integer· <span class="token keyword">long</span>            Long· <span class="token keyword">float</span>            Float· <span class="token keyword">double</span>         Double· <span class="token keyword">char</span>            Character· <span class="token keyword">boolean</span>        Boolean</code></pre><p>下面的内容我们使用常见的Integer类型来讲解</p><h3 id="一-Integet类"><a href="#一-Integet类" class="headerlink" title="(一) Integet类"></a>(一) Integet类</h3><h4 id="Integer类的构造方法"><a href="#Integer类的构造方法" class="headerlink" title="Integer类的构造方法"></a>Integer类的构造方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> love <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>        Integer love2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>love<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>love2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由数字组成的字符串也可以被转换为Integer</span>        String love3 <span class="token operator">=</span> <span class="token string">"520"</span><span class="token punctuation">;</span>        Integer love4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>love3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>love4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过包装类的一些方法可以很便捷的解决很多实际问题，比如String和int类型的相互转换</p><h3 id="二-String和int的相互转换"><a href="#二-String和int的相互转换" class="headerlink" title="(二)String和int的相互转换"></a>(二)String和int的相互转换</h3><h4 id="1-int-→-String"><a href="#1-int-→-String" class="headerlink" title="(1) int → String"></a>(1) int → String</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_02_IntString<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntStringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一：拼接字符串</span>        String s1 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> number<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式二(推荐方法）任何类型的数据转换成字符串</span>        String s2 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式三（最麻烦）</span>        Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式四</span>        String s4 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-String-→-int-数字组成的字符串"><a href="#2-String-→-int-数字组成的字符串" class="headerlink" title="(2) String → int (数字组成的字符串)"></a>(2) String → int (数字组成的字符串)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_02_IntString<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringIntDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"520"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一</span>        Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式二（推荐方法）</span>        <span class="token keyword">int</span> y  <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三-两个JDK-5-的新特性"><a href="#三-两个JDK-5-的新特性" class="headerlink" title="(三) 两个JDK 5 的新特性"></a>(三) 两个JDK 5 的新特性</h3><h4 id="1-自动装箱和自动拆箱（JDK-5新特性）"><a href="#1-自动装箱和自动拆箱（JDK-5新特性）" class="headerlink" title="(1) 自动装箱和自动拆箱（JDK 5新特性）"></a>(1) 自动装箱和自动拆箱（JDK 5新特性）</h4><blockquote><p>在我想要使用包装类的一些方法的时候，我可以通过基本类型包装类的构造方法将值传入，JDK5后的新特性就为我们大大的简化了一些麻烦的步骤</p></blockquote><pre class=" language-java"><code class="language-java">Integer a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这就是一个自动装箱，如果没有自动装箱的话，需要这样</span>Integer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这就是一个自动拆箱，如果没有自动拆箱的话，需要这样：</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这样就能看出自动装箱和自动拆箱是简化了基本数据类型和相对应对象的转化步骤</code></pre><h4 id="2-缓存池（JDK-5新特性）"><a href="#2-缓存池（JDK-5新特性）" class="headerlink" title="(2) 缓存池（JDK 5新特性）"></a>(2) 缓存池（JDK 5新特性）</h4><p>谈到数值顺便提一提缓存池问题</p><p>在于在Java 5以后，整型对象在内部实现中通过使用相同的对象引用实    现了缓存和重用。Integer类型对于-128-127之间的数字是在缓冲区取的，所以对于在这个范围内的数值用双等号比较是一致的，因为对应的内存地址是相同的。但对于不在这区间的数字是在堆中new出来的，所以地址空间不一样，也就不相等。</p><h3 id="四-Character类"><a href="#四-Character类" class="headerlink" title="(四) Character类"></a>(四) Character类</h3><p>Character类对象中包装一个基本类别char的值<br>此外，该类提供了几种方法，以确定字符的类别（小写字母，数字，等等），并将字符从大写转换成小写，反之亦然。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//判断给定的字符是否是大写字符</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断给定的字符是否是小写字符</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch）<span class="token comment" spellcheck="true">//判断给定的字符是否是数字字符</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把给定的字符串转换为大写字符</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把给定的字符串转换为小写字符</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Integet </tag>
            
            <tag> Character </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>005-Arrays类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/005-arrays-gong-ju-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/005-arrays-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="第一章-常见对象——Arrays类"><a href="#第一章-常见对象——Arrays类" class="headerlink" title="第一章 常见对象——Arrays类"></a>第一章 常见对象——Arrays类</h2><blockquote><p>Arrays：针对数组进行操作的工具类，比如排序和查找</p></blockquote><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//把数组转成字符串</span><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对数组排序（快速排序法）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//二分查找</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key <span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二分查找:"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * 查找： *      基本查找：数组元素无序（从头找到尾） *      二分查找：数组元素有序 * 分析： *      A：定义最大索引，最小索引 *      B：计算出中间索引 *      C：拿中间索引的值和要查找的值做比较 *          相等：就返回当前的中间索引 *          不相等： *                中间值大 ———— 左边找 *                中间值小 ———— 右边找 *      D：重新计算出中间索引 *                 中间值大 ———— 左边找 *                               max = mid - 1 *                 中间值小 ———— 右边找 *                               min = mid + 1 *      B：回到 B */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">binarySearch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义最大索引，最小索引</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算中间索引</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拿中间的索引值和要查找的值进行比较</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Arrays类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004-StringBuffer和StringBuilder类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/004-stringbuffer-he-stringbuilder/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/004-stringbuffer-he-stringbuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="StringBuffer和StringBuilder类"><a href="#StringBuffer和StringBuilder类" class="headerlink" title="StringBuffer和StringBuilder类"></a>StringBuffer和StringBuilder类</h2><h3 id="一-StringBuffer类的概述"><a href="#一-StringBuffer类的概述" class="headerlink" title="(一) StringBuffer类的概述"></a>(一) StringBuffer类的概述</h3><h4 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="(1) 基本概述"></a>(1) 基本概述</h4><p>下文以StringBuffer为例</p><blockquote><p>前面我们用字符串做拼接，比较耗时并且也耗内存（每次都会构造一个新的string对象），而这种拼接操作又是比较常见的，为了解决这个问题，Java就提供了两个字符串缓冲区类。StringBuffer和StringBuilder供我们使用。</p></blockquote><p><strong>简单比较：</strong></p><p>String 长度大小不可变</p><p>StringBuffer 长度可变、线程安全、速度较慢 </p><p>StringBuilder 长度可变、线程不安全、速度最快</p><p>-—————————————————————————————————————-</p><p><strong>解释：</strong></p><ol><li><p>在执行速度方面的比较：StringBuilder &gt; StringBuffer </p></li><li><p>StringBuffer与StringBuilder，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，不像String一样创建一些对象进行操作，所以速度就快了。</p></li><li><p>StringBuilder：线程非安全的</p><p>StringBuffer：线程是安全的（synchronized关键字进行修饰）</p></li></ol><p>当我们在字符串缓冲区被多个线程使用时，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。</p><p><strong>对于三者使用的总结：</strong></p><p>1.如果要操作少量的数据用 = String<br>2.单线程操作字符串缓冲区 下操作大量数据 = StringBuilder<br>3.多线程操作字符串缓冲区 下操作大量数据 = StringBuffer</p><h4 id="2-StringBuffer的构造方法"><a href="#2-StringBuffer的构造方法" class="headerlink" title="(2) StringBuffer的构造方法"></a>(2) StringBuffer的构造方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//无参构造方法</span><span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定容量的字符串缓冲区对象</span><span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定字符串内容的字符串缓冲区对象</span><span class="token function">StringBuffer</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span></code></pre><h3 id="二-StringBuffer-类的功能"><a href="#二-StringBuffer-类的功能" class="headerlink" title="(二) StringBuffer 类的功能"></a>(二) StringBuffer 类的功能</h3><h4 id="1-添加功能"><a href="#1-添加功能" class="headerlink" title="(1) 添加功能"></a>(1) 添加功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以把任意类型添加到字符串缓冲区里，并且返回字符串缓冲区本身（this）</span><span class="token keyword">public</span> StringBuffer <span class="token function">append</span> <span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在offset位置把任意类型的数据插入到字符串缓冲区中,并且返回字符串缓冲区本身（this）</span><span class="token keyword">public</span> StringBuffer <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span>String str<span class="token punctuation">)</span></code></pre><h4 id="2-删除功能"><a href="#2-删除功能" class="headerlink" title="(2) 删除功能"></a>(2) 删除功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//删除指定位置的字符，并且返回本身</span><span class="token keyword">public</span> StringBuffer <span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除从指定位置开始指定位置结束的内容，并且返回本身</span><span class="token keyword">public</span> StringBuffer <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> </code></pre><h4 id="3-替换功能"><a href="#3-替换功能" class="headerlink" title="(3) 替换功能"></a>(3) 替换功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从start到end用str代替</span><span class="token keyword">public</span> StringBuffer <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">,</span>String str<span class="token punctuation">)</span></code></pre><h4 id="4-反转功能"><a href="#4-反转功能" class="headerlink" title="(4) 反转功能"></a>(4) 反转功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Eg: 好你界世 → 世界你好</span><span class="token keyword">public</span> StringBuffer <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="5-截取功能"><a href="#5-截取功能" class="headerlink" title="(5) 截取功能"></a>(5) 截取功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从start位置开始截取,取以后字符串,但不返回本身，原数据不影响</span><span class="token keyword">public</span> String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//截取start到end之间的字符串</span>Publci Stirng <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span></code></pre><h3 id="三-String-和-StringBuffer-类相互转换"><a href="#三-String-和-StringBuffer-类相互转换" class="headerlink" title="(三) String 和 StringBuffer 类相互转换"></a>(三) String 和 StringBuffer 类相互转换</h3><h4 id="1-转换原因："><a href="#1-转换原因：" class="headerlink" title="(1) 转换原因："></a>(1) 转换原因：</h4><p>String → StringBuffer 是为了使用后者的功能</p><p>StringBuffer → String 可能需要后者的类型</p><h4 id="2-转换方式"><a href="#2-转换方式" class="headerlink" title="(2) 转换方式"></a>(2) 转换方式</h4><p><strong>※ String → StringBuffer</strong> </p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> “Hello”<span class="token comment" spellcheck="true">//通过构造方法</span>StringBuffer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法</span>StringBuffer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>※ StringBuffer → String</strong></p><pre class=" language-java"><code class="language-java">StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>“java”<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过构造方法</span>String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过toString()方法</span>String str <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四-“-”-和-StringBuilder-类的爱恨情仇"><a href="#四-“-”-和-StringBuilder-类的爱恨情仇" class="headerlink" title="(四) “+” 和 StringBuilder 类的爱恨情仇"></a>(四) “+” 和 StringBuilder 类的爱恨情仇</h3><p><strong>首先java并不支持运算符重载。</strong></p><p>(String类中的 “+”“+=”是java中仅有的两个重载过的运算符)</p><p>所以我们可以通过“+”符号 将多个字符串进行拼接</p><p>将这段代码利用 javap -c filename 反编译 </p><p>我们可以看到代码被编译器自动优化成使用StringBuilder方式拼接</p><p>运行效率得到了保证</p><p><img src="http://image.ideal-20.cn/basic/1.3-04-001.png" alt></p><p>下面一个案例  <strong>数组拼接成指定格式的字符串</strong>  代码中使用了循环语句</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在循环中通过String拼接字符串</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token string">"!!!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token function">arrayToString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">arrayToString</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        s <span class="token operator">+=</span> <span class="token string">"["</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s <span class="token operator">+=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">+=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                s <span class="token operator">+=</span> <span class="token string">", "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s <span class="token operator">+=</span> <span class="token string">"]"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token punctuation">[</span>Hello<span class="token punctuation">,</span> World<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">]</span></code></pre><p>使用String方式进行拼接，我们反编译可以看到，StringBuilder被创建在循环的内部，这意味着每循环一次就会创建一次StringBuilder对象，这可是一个糟糕的事情。</p><p><img src="http://image.ideal-20.cn/basic/1.3-04-002.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在循环中使用StringBuilder拼接字符串</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token string">"!!!"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token function">arrayToString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">arrayToString</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token punctuation">[</span>Hello<span class="token punctuation">,</span> World<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">]</span></code></pre><p>使用StringBuilder方式进行拼接，反汇编代码，可以看到，不仅循环部分的代码更为简洁，而且它只生成了一个StringBuilder对象。显式的创建StringBuilder对象还允许你预先为其指定大小。可以避免多次重新分配缓冲。</p><p><strong>总结：</strong></p><p>如果字符串操作比较简单，就可以使用“+”运算符操作，编译器会为你合理的构造出最终的字符串结果</p><p>如果使用循环语句 最好自己手动创建一个StringBuilder对象，用它来构最终结果</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> StringBuffer类 </tag>
            
            <tag> StringBuilder类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-String类</title>
      <link href="/2019/09/17/1.3-java-chang-jian-dui-xiang/003-string-lei/"/>
      <url>/2019/09/17/1.3-java-chang-jian-dui-xiang/003-string-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a>第三阶段 JAVA常见对象的学习</h1><h2 id="第一章-常见对象——String类"><a href="#第一章-常见对象——String类" class="headerlink" title="第一章 常见对象——String类"></a>第一章 常见对象——String类</h2><h3 id="一-String-类的概述及其构造方法"><a href="#一-String-类的概述及其构造方法" class="headerlink" title="(一) String 类的概述及其构造方法"></a>(一) String 类的概述及其构造方法</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1) 概述"></a>(1) 概述</h4><p><strong>多个字符</strong>组成的一串数据，例如 “abc” 也可以看成是一个<strong>字符数组。</strong></p><p>而通过 API我们又可以知道</p><p>A：字符串字面值“abc”也可以看成是一个<strong>字符串对象</strong></p><p>B：字符串是常量，一旦被赋值，就不能改变</p><h4 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="(2) 构造方法"></a>(2) 构造方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//空构造</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字节数组转换成字符串</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字节数组的一部分转换成字符串</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符数组转换成字符串</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符数组的一部分转换成字符串</span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符串常量值转换成字符串    </span><span class="token keyword">public</span> <span class="token function">String</span><span class="token punctuation">(</span>String original<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//下面的这一个虽然不是构造方法，但是结果也是一个字符串对象</span>String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span></code></pre><p>简单总结：String类的构造方法可以将 <strong>字节、字符数组、字符串常量</strong>（全部或者部分）转换为字符串类型</p><h4 id="3-字符串方法"><a href="#3-字符串方法" class="headerlink" title="(3)  字符串方法"></a>(3)  字符串方法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回此字符串的长度</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-构造方法和lenght方法的小案例"><a href="#4-构造方法和lenght方法的小案例" class="headerlink" title="(4)构造方法和lenght方法的小案例"></a>(4)构造方法和lenght方法的小案例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//以前三个为例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//public String():空构造</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1:"</span> <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.length:"</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把字节数组转换成字符串：public String(byte[] bytes)</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abcde</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2:"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2.length:"</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把字节数组的一部分转换成字符串:</span>        <span class="token comment" spellcheck="true">//public String(byte[] bytes,int offset,int length)</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3:"</span> <span class="token operator">+</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s3.length:"</span> <span class="token operator">+</span> s3<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果：</span>s1<span class="token operator">:</span>s1<span class="token punctuation">.</span>length<span class="token operator">:</span><span class="token number">0</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>s2<span class="token operator">:</span>abcdes2<span class="token punctuation">.</span>length<span class="token operator">:</span><span class="token number">5</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>s3<span class="token operator">:</span>bcds3<span class="token punctuation">.</span>length<span class="token operator">:</span><span class="token number">3</span></code></pre><p>注：97,98,99,100,101 在ASCII码中代表abcde，不熟悉的朋友请自行查阅</p><h4 id="5-经典例题（必看）"><a href="#5-经典例题（必看）" class="headerlink" title="(5) 经典例题（必看）"></a>(5) 经典例题（必看）</h4><p><strong>例题一：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  字符串特点：一旦被赋值，就不能改变 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        s <span class="token operator">+=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果：</span>s<span class="token operator">:</span>HelloWorld</code></pre><p><strong>解释：</strong>不能改变是指字符串对象本身不能改变，而不是指对象的引用不能改变，上述过程中，字符串本身的内容是没有任何变化的，而是分别创建了三块内存空间，(Hello) (World) (HelloWorld)    s → Hello + World → HelloWorld 。String内容的改变实际上是通过字符串之间的拼接、断开进行的，如上例中拼接后s的引用也就指向了 拼接后的HelloWorld </p><p><strong>总结</strong>：开发中，尽量少使用 + 进行字符串的拼接，尤其是循环内，我们更加推荐使用StringBuild、StringBuffer，此内容下一篇详细讲解。</p><p><strong>例题二:</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//两者的区别</span>String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span></code></pre><p>前者创建了2个 (1个) 对象，后者创建了1个 (0个) 对象</p><p>下面解释中若<strong>存在情况</strong>满足则，分别为创建1个和0个对象</p><p>解释：</p><p><strong>String s = new String(“hello”); 创建实例过程</strong></p><blockquote><ol><li><p>在堆中创建一个对象 “hello” （new出来的），让 s 引用这个对象</p></li><li><p>在字符串常量池中查找是否存在内容为 “hello”的字符串对象</p><p>​    A：<strong>若存在</strong>，将new出的对象与字符串常量池中已存在的相联系</p><p>​    B：<strong>若不存在</strong>，则在字符串常量池中创建一个内容为 “abc” 的字符串对象，并与堆中            的对相联系           </p></li></ol></blockquote><p><strong>String s = “hello”; 创建实例过程</strong></p><blockquote><ol><li><p>在字符串常量中查找是否存在内容为”hello”的字符串对象</p><p>​    A：<strong>若存在</strong>，让s直接引用该对象</p><p>​    B：<strong>若不存在</strong>，则直接让s引用该对象</p></li></ol></blockquote><p><strong>总结</strong>：前者new一个对象，“hello”隐式创建一个对象，后者只有“hello”创建一个对象，在开发中，尽量使用 String s = “hello” 的方式，效率比另一种高。</p><p><strong>例题三:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        String s5 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span></code></pre><p>解释： == 比较地址值是否相同、String中的equals()比较字符串内容是否一致</p><p><strong>例题四：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> <span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span></code></pre><p><strong>总结：</strong></p><ol><li>字符串中如果是变量相加，先开空间，再拼接</li><li>字符串中如果是字符串相加，是先加，然后在常量池中找，如果有就直接返回否则就创建</li></ol><h3 id="二-String类的功能"><a href="#二-String类的功能" class="headerlink" title="(二) String类的功能"></a>(二) String类的功能</h3><h4 id="1-判断功能"><a href="#1-判断功能" class="headerlink" title="(1) 判断功能"></a>(1) 判断功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//比较字符串的内容是否相同，区分大小写</span><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//比较字符串的内容是否相同，不区分大小写</span><span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断大字符串中是否包含小字符串</span><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断某个字符串是否以某个指定的字符串开头</span><span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断某个字符串是否以某个指定的字符串结尾</span><span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断字符串是否为空</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>注意：String s <span class="token operator">=</span> “ ”<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 字符串内容为空</span>String s <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 字符串对象为空</span></code></pre><p><strong>简单模拟登录案例 (String版)</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  模拟登陆案例，给三次机会，并且提示剩余次数 *      A:定义用户名和密码（已经存在的） *      B:键盘录入用户名和密码 *      C:比较用户名和密码 *      D:给三次机会，用循环改进 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token string">"admin888"</span><span class="token punctuation">;</span>            Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String psw <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> psw<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的账号已经被锁定，请与管理员联系"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败，你还有"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"次机会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-获取功能"><a href="#2-获取功能" class="headerlink" title="(2) 获取功能"></a>(2) 获取功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取字符串的长度</span><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取指定索引的字符</span><span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回指定字符在此字符串中第一次出现的索引</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//为什么这里是int而不是char？</span><span class="token comment" spellcheck="true">//原因是：‘a’和‘97’其实都能代表‘a’ int方便</span><span class="token comment" spellcheck="true">//返回指定字符串在此字符串中第一次出现的索引</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回指定字符在此字符串中从指定位置后第一次出现的索引</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回指定字符串在此字符串中从指定位置后第一次出现的索引</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从指定位置开始截取字符串，默认到末尾</span>String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从指定位置开始指定位置结束截取字符串</span>String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span></code></pre><p><strong>字符串中数据统计案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* *  案例：统计一个字符串中大写字母字符，小写字母字符，数字字符出现 * 的次数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要统计的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numberCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> smallCout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bigCout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                smallCout<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bigCout<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                numberCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大写字母："</span> <span class="token operator">+</span> bigCout <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小写字母："</span> <span class="token operator">+</span> smallCout <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字："</span> <span class="token operator">+</span> numberCount <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>请输入需要统计的数据HelloWorld520大写字母：<span class="token number">2</span>个小写字母：<span class="token number">8</span>个数字：<span class="token number">3</span>个</code></pre><h4 id="3-转换功能"><a href="#3-转换功能" class="headerlink" title="(3) 转换功能"></a>(3) 转换功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//把字符串转换为字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符串转换成字符数组</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符数组转换成字符串</span><span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把int类型的数据转换成字符串</span><span class="token keyword">static</span> String <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意：String类的valueOf方法可以把任何类型的数据转换成字符串!</span><span class="token comment" spellcheck="true">//把字符串转换成小写    </span>String <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符串转换成大写</span>String <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把字符串拼接</span>String <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span></code></pre><h4 id="4-其他功能"><a href="#4-其他功能" class="headerlink" title="(4) 其他功能"></a>(4) 其他功能</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//替换功能 </span>String <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> old<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">new</span><span class="token punctuation">)</span>String <span class="token function">replace</span><span class="token punctuation">(</span>String old<span class="token punctuation">,</span>String <span class="token keyword">new</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//去除字符串两端空格</span>String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按字典比较功能</span><span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> </code></pre><p><strong>逆序输出字符串案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* *  键盘输入 "abc" *  输出结果 "cba" */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> chs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">+=</span> chs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reusult："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>请输入：abcreusult：cba</code></pre><p><strong>大串中查询小串案例</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入被统计的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String maxString <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入统计关键词"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String minString <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>maxString<span class="token punctuation">,</span> minString<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span>String maxString<span class="token punctuation">,</span> String minString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个统计变量，初始化为0</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先在大串中查找小串第一次出现的位置</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> maxString<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>minString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//索引不是-1，说明存在，统计变量++</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把刚才的索引 + 小串的长度作为开始位置截取上一次的大串</span>            <span class="token comment" spellcheck="true">//返回一个新的字符串，并把该字符串的值重新赋给大串</span>            <span class="token keyword">int</span> startIndex <span class="token operator">=</span> index <span class="token operator">+</span> minString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxString <span class="token operator">=</span> maxString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> maxString<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>minString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>请输入被统计的数据Hello520World520请输入统计关键词<span class="token number">520</span>count：<span class="token number">2</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-Scanner类</title>
      <link href="/2019/09/16/1.3-java-chang-jian-dui-xiang/002-scanner-lei/"/>
      <url>/2019/09/16/1.3-java-chang-jian-dui-xiang/002-scanner-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a><strong>第三阶段 JAVA常见对象的学习</strong></h1><h2 id="第一章-常见对象——Scanner类"><a href="#第一章-常见对象——Scanner类" class="headerlink" title="第一章 常见对象——Scanner类"></a>第一章 常见对象——Scanner类</h2><p>public boolean hasNextXxx() : 判断是否是某种类型的元素</p><p>public int nextXxx()：获取该元素</p><p>我们先看一个最简单的例子（使用int类型举例）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的数字是："</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>请输入一个整数<span class="token number">520</span>你输入的数字是：<span class="token number">520</span></code></pre><p><strong>常用的两个方法：</strong></p><p>public int nextInt(); 获取一个int类型的值</p><p>Public String nextLine(); 获取一个String类型的数值</p><p>问题：</p><p>先获取一个数值，再获取一个一个字符串时，会出现问题</p><p>原因：</p><p>换行符号的原因</p><p>解决：</p><p>A：先获取一个数值后，再创建一个新的键盘录入对象获取字符串</p><p>B：把所有的数据先按字符串获取，然后要什么，转换为什么。</p><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Scanner类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Object类</title>
      <link href="/2019/09/16/1.3-java-chang-jian-dui-xiang/001-object-lei/"/>
      <url>/2019/09/16/1.3-java-chang-jian-dui-xiang/001-object-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="第三阶段-JAVA常见对象的学习"><a href="#第三阶段-JAVA常见对象的学习" class="headerlink" title="第三阶段 JAVA常见对象的学习"></a><strong>第三阶段 JAVA常见对象的学习</strong></h1><h2 id="第一章-常见对象——Object类"><a href="#第一章-常见对象——Object类" class="headerlink" title="第一章 常见对象——Object类"></a>第一章 常见对象——Object类</h2><h3 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h3><p>在讲解Object类之前，我们不得不简单的提一下什么是API，先贴一组百度百科的解释：</p><blockquote><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p></blockquote><p>简单的说：就是 Java 中有好多现成的类库，其中封装了许多函数，只提供函数名和参数，但隐藏了函数的具体实现，这些可见的部分作为与外界联系的桥梁，也就是我们所称的 API ，不过由于Java是开源的，所以这些隐藏的实现我们也是可以看到的。</p><h3 id="一-Object-类的概述"><a href="#一-Object-类的概述" class="headerlink" title="(一) Object 类的概述"></a>(一) Object 类的概述</h3><p>(1) Object是类层次结构的<strong>根类</strong>，所有的类都隐式的（不用写extends）继承自Object类。</p><p>(2) Java 所有的对象都拥有Object默认方法</p><p>(3) Object类的构造方法有一个，并且是<strong>无参构造</strong></p><p>这就对应了前面学习中的一句话，子类构造方法默认访问父类的构造是无参构造</p><p>我们需要<strong>了解的方法</strong>又有哪些呢？</p><p>A: hashCode()    B: getClass()    C: finalize()    D: clone</p><p>E: notify()        F: notifyAll()</p><p>我们需要<strong>掌握的方法</strong>又有哪些呢？</p><p>A: toString()        B: equals()</p><h4 id="1-hashCode"><a href="#1-hashCode" class="headerlink" title="(1) hashCode"></a>(1) hashCode</h4><p><strong>返回对象的哈希值（散列码）</strong>，不是实际地址值，不过可以理解为地址值。</p><p>它实际上返回一个int型整数，用于<strong>确定该对象在哈希表中的索引位置</strong></p><p>暂时了解即可，学习<strong>集合框架</strong>内容后将会专篇深入学习</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Student类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//StudentDemo类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果：</span><span class="token number">460141958</span><span class="token number">1163157884</span><span class="token number">460141958</span></code></pre><h4 id="2-getClass"><a href="#2-getClass" class="headerlink" title="(2) getClass"></a>(2) getClass</h4><p>返回对象的<strong>字节码文件对象</strong>，在<strong>反射</strong>篇章详细解释, 暂做简单了解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//链式编程</span>        String str2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>cn<span class="token punctuation">.</span>bwh_02_getClass<span class="token punctuation">.</span>Studentcn<span class="token punctuation">.</span>bwh_02_getClass<span class="token punctuation">.</span>Student</code></pre><h4 id="3-finalize"><a href="#3-finalize" class="headerlink" title="(3) finalize()"></a>(3) finalize()</h4><p>在对象将被垃圾回收器清除前调用，但不确定时间，并且对象的finalize()方法只会被调用一次，调用后也不一定马上清除该对象。</p><h4 id="4-clone"><a href="#4-clone" class="headerlink" title="(4) clone()"></a>(4) clone()</h4><p>以实现<strong>对象的克隆</strong>，包括成员变量的数据复制，但是它和<strong>两个引用指向同一个对象</strong>是有区别的。</p><p>我们先来解释一下<strong>后半句话</strong></p><p>如果我们想要复制一个变量，可以这样做 Eg：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span></code></pre><p>那么我们想要复制一个对象，是不是也可以这样做呢？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Student</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//StudentDemo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将引用赋值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生1年龄："</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生2年龄："</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生1年龄："</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生2年龄："</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span>学生<span class="token number">1</span>年龄：<span class="token number">20</span>学生<span class="token number">2</span>年龄：<span class="token number">20</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>学生<span class="token number">1</span>年龄：<span class="token number">25</span>学生<span class="token number">2</span>年龄：<span class="token number">25</span></code></pre><p>很明显，即使将<strong>对象s1</strong>赋值给<strong>对象s2</strong>，但是通过set传值的时候，两者仍然会同时变化，并没有起到克隆（独立）的作用，这是因为赋值时只是将存储在栈中，对对象的引用赋值，因此它们两个的引用指向同一个对象（堆中），所以无论如何赋值，只要堆中的对象属性发生了变化，通过引用显示属性的时候，均是相同的。</p><h5 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h5><blockquote><ol><li>实现Cloneable接口</li><li>重写clone方法</li></ol></blockquote><h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><blockquote><p><strong>浅拷贝</strong>: 仅拷贝对象,不拷贝成员变量,仅复制了变量的引用,拷贝前后变量使用同一块内存,内存销毁后,必须重新定义(两者同生共死)</p><p><strong>深拷贝</strong>: 不仅拷贝对象,也拷贝成员变量(真正意义上的复制, 两者独立无关)</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//浅拷贝</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//深拷贝</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//拷贝对象</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拷贝成员变量</span>        person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> age<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回拷贝对象</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们来利用浅拷贝解决刚开始那个问题</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Person类，写出get、set方法、重写clone方法</span><span class="token comment" spellcheck="true">//PersonDemo类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> p1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个人的年龄："</span><span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个人的年龄："</span><span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一个人的年龄："</span><span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二个人的年龄："</span><span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：第一个人的年龄：<span class="token number">20</span>第二个人的年龄：<span class="token number">20</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>第一个人的年龄：<span class="token number">20</span>第二个人的年龄：<span class="token number">25</span></code></pre><h4 id="5-wait、notify和notifyAll"><a href="#5-wait、notify和notifyAll" class="headerlink" title="(5) wait、notify和notifyAll"></a>(5) wait、notify和notifyAll</h4><p>三者属于线程通信间的Api，此部分放在日后讲</p><h4 id="6-toString-——重要"><a href="#6-toString-——重要" class="headerlink" title="(6) toString()——重要"></a>(6) toString()——重要</h4><p>public static toString()： 返回该对象的字符串表示</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Student类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//StudentDemo类</span><span class="token keyword">package</span> cn<span class="token punctuation">.</span>bwh_04_toString<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接输出s也会默认的调用toString方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过set方法赋值后，直接调用toString()</span>运行结果：cn<span class="token punctuation">.</span>bwh_04_toString<span class="token punctuation">.</span>Student<span class="token annotation punctuation">@1b6d3586</span></code></pre><p>很明显，给我们返回这样的信息意义是不大的，所以我们建议对<strong>所有子类重写该方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在Student类中重写 toString()</span>    <span class="token annotation punctuation">@Override</span>                                                              <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                 <span class="token keyword">return</span> <span class="token string">"Student["</span> <span class="token operator">+</span> <span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行结果：</span>Student<span class="token punctuation">[</span>name<span class="token operator">=</span>admin<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">]</span></code></pre><p>通过重写toString后，结果按照我们所定的规则以字符串的形式输出</p><p>（重写后会优先使用类中的toString方法）</p><h5 id="为什么要用它呢？"><a href="#为什么要用它呢？" class="headerlink" title="为什么要用它呢？"></a>为什么要用它呢？</h5><p>主要目的还是为了简化输出</p><ol><li><p>在类中重写toString()后，输出类对象就变得有了意义（输出s 和 s.toString()是一样的 ，不写也会默认调用），变成了我们实实在在的信息，而不是上面的cn.bwh_04_toString.Student@1b6d3586。</p></li><li><p>如果我们想要多次输出 类中的成员信息，就需要多次书写get方法(每用一次就得写)</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student["</span> <span class="token operator">+</span> <span class="token string">"name="</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token string">"age="</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而调用toString()就简单多了</p></li></ol><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//两者等价</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">'@'</span> <span class="token operator">+</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出结果</span>cn<span class="token punctuation">.</span>bwh_04_toString<span class="token punctuation">.</span>Student<span class="token annotation punctuation">@1b6d3586</span>。</code></pre><h4 id="7-equals-——重要"><a href="#7-equals-——重要" class="headerlink" title="(7) equals()——重要"></a>(7) equals()——重要</h4><p>比较两个对象是否相同</p><p>默认情况下，比较的是地址值是否相同。</p><p>而比较地址值是没有意义的，所以，一般子类也会重写该方法。</p><p>在诸多子类，如String、Integer、Date 等均重写了equals()方法</p><blockquote><p>改进思路：</p><p>我们可以将比较地址值转变为比较成员变量</p><ol><li><p>因为name为String类型，而String类型为引用类型，所以不能够用==比较，应该用equal()</p></li><li><p>String中默认重写过的equal()方法是用来比较字符串内容是否相同</p></li><li><p>我们要使用的是学生类的成员变量，所以父类 Object不能调用子类Student的特有功能</p><p>所以使用向下转型</p></li></ol></blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//重写v1.0</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//重写v2.0 (可作为最终版)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> s<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//idea自动生成版</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="equals-和-的区别"><a href="#equals-和-的区别" class="headerlink" title="equals() 和 == 的区别"></a>equals() 和 == 的区别</h5><p> <strong>== 的作用：</strong> 　　</p><p>基本类型：比较值是否相同 　　</p><p>引用类型：比较的就是堆内存地址是否相同 </p><p><strong>equals 的作用:</strong> </p><p>引用类型：默认情况下，比较的是地址值。 </p><p>注：一般选择重写方法，比较对象的成员变量值是否相同 ，不过一般重写都是自动生成。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.3-Java常见对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Object类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>008-封装的简单概述和好处</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/008-feng-zhuang/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/008-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/basic/1.2-08-001.png" alt></p><h2 id="封装概述："><a href="#封装概述：" class="headerlink" title="封装概述："></a><strong>封装概述：</strong></h2><p>封装是指隐藏对象的属性和实现细节，仅对外提供公共访问方式</p><p><strong>这是什么意思呢？</strong></p><p>简单的来说就是我将不想给别人看的数据，以及别人无需知道的内部细节， “锁起来” ，我们只留下一些入口，使其与外部发生联系。</p><p><strong>我们如何给我们的数据 “上锁” 呢？</strong></p><p>我们使用，public、private、protected 等权限修饰符 在类的内部设定了边界，这些不同程度的 ”锁“ 决定了紧跟其后被定义的东西能够被谁使用。</p><h2 id="封装的好处："><a href="#封装的好处：" class="headerlink" title="封装的好处："></a><strong>封装的好处：</strong></h2><p><strong>·</strong> 隐藏实现细节，提供公共的访问方式</p><p><strong>·</strong> 提高了代码的复用性</p><p><strong>·</strong> 提高安全性</p><h2 id="封装好处的体现方式："><a href="#封装好处的体现方式：" class="headerlink" title="封装好处的体现方式："></a>封装好处的体现方式：</h2><h3 id="一-隐藏实现细节，提供公共的访问方式"><a href="#一-隐藏实现细节，提供公共的访问方式" class="headerlink" title="(一) 隐藏实现细节，提供公共的访问方式"></a><strong>(一) 隐藏实现细节，提供公共的访问方式</strong></h3><p><strong>隐藏实现细节怎么理解呢？</strong></p><p>我们将一些功能封装到类中，而客户端的程序员，不需要知道类中的这个方法的逻辑原理，类程序员只需要给他一个对外的接口，客户端程序员只需要能够调用这个方法即可，</p><p>例如：夏天宿舍很热，我们（用户）只需要操作遥控器即可使用空调，并不需要了解空调内部是如何运行的</p><p><strong>提供公共的访问方式又怎么理解呢？</strong></p><p>我们先来看一段标准案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义成私有成员变量（private）</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//带参构造</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员变量的set和get方法（与外界联系的桥梁）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建学生类对象 s</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">//对象s调用类中的公共方法setName()和setAge()</span>        <span class="token comment" spellcheck="true">//set方法给成员变量赋值</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"BWH_Steven"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//get方法获取成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到在上面的案例中，成员变量都使用private修饰，而下面的get和set方法均使用了public修饰，其实被private修饰的属性就是我们想要<strong>锁起来</strong>的数据，而set、get方法就是我们打开这把锁的钥匙</p><p>被private所修饰的内容是，除<strong>类型创建者和类型的内部方法之外的任何人都不能访问的元素</strong>，所以我们这些数据就被我们通过private “锁” 了起来，而我们外界是可以通过创建对象来调用一个类中的公共方法的，所以被public修饰的 set和get方法外界所能访问的，而这两个方法又可以直接访问我们的私有成员变量，所以set和get方法就成为了私有成员与外界沟通的钥匙。</p><h3 id="二-提高了代码的复用性"><a href="#二-提高了代码的复用性" class="headerlink" title="(二)提高了代码的复用性"></a><strong>(二)提高了代码的复用性</strong></h3><p>功能被封装成了类，通过基类与派生类之间的一些机制（组合和继承），来提高代码的复用性</p><p>Ps：关于代码复用问题，我会专篇讲解，今天还是着重讲解封装带来的主要好处</p><h3 id="三-提高安全性"><a href="#三-提高安全性" class="headerlink" title="(三) 提高安全性"></a><strong>(三) 提高安全性</strong></h3><p>看完上面的代码，可能大家会有一点疑惑，这些属性、方法封装后我都还可以看得到，这哪里体现了安全呢？大家来一起看一看我们下面这个改进版的案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在setAge()方法中加入了校验的内容</span>    <span class="token comment" spellcheck="true">//不合法数据是不允许传递给成员变量的</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//错误的方式！！！</span>        s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"BWH_Steven"</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//正确的方式！！！</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"BWH_Steven"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们用private来修饰我们的成员变量不是没有任何依据的，如果我们的成员变量修饰符改为public，这句意味着外界可以使用对象直接访问，修改这个成员变量，这可能会造成一些重大的问题</p><p><strong>例如：外界通过对象去给成员变量赋值，可以赋值一些非法的数据</strong></p><p>这明显是不合理的。所以在赋值之前应该先对数据进行判断</p><p>StudenDemo是一个测试类，<strong>测试类一般只创建对象，调用方法</strong></p><p>所以这个判断应该定义在Student类中。需要使用逻辑语句</p><p>逻辑语句应该定义在方法中。所以在Student类中提供一个方法来对数据进行校验</p><p>但是如果偏偏不调用方法来赋值，还是直接赋值，这样我们的方法就没有起作用</p><p>所以<strong>我们必须强制要求使用我的方法，而不能直接调用成员变量</strong></p><p>这也正是我们使用private修饰成员变量的原因！</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>007-内部类</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/007-nei-bu-lei/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/007-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a><strong>内部类</strong></h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="(一) 概述"></a>(一) 概述</h3><p>把类定义在另一个类的内部，该类就被称为内部类。</p><p>举例：把类Inner定义在类Outer中，类Inner就被称为内部类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二-内部类的访问规则"><a href="#二-内部类的访问规则" class="headerlink" title="(二) 内部类的访问规则"></a>(二) 内部类的访问规则</h3><p>​    A:可以直接访问外部类的成员，包括私有</p><p>​    B:外部类要想访问内部类成员，必须创建对象</p><h3 id="三-内部类的分类"><a href="#三-内部类的分类" class="headerlink" title="(三) 内部类的分类"></a>(三) 内部类的分类</h3><p>​    A：成员内部类</p><p>​    B：局部内部类</p><p>​    C：静态内部类</p><p>​    D：匿名内部类</p><h4 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="(1) 成员内部类"></a>(1) 成员内部类</h4><blockquote><p>成员内部类——就是位于外部类成员位置的类</p><p>特点：可以使用外部类中所有的成员变量和成员方法（包括private的）</p></blockquote><h5 id="A：格式："><a href="#A：格式：" class="headerlink" title="A：格式："></a>A：<strong>格式</strong>：</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员位置</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//成员内部类是非静态的演示</span>        Outer<span class="token punctuation">.</span>Inner oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oi<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="B：创建对象时："><a href="#B：创建对象时：" class="headerlink" title="B：创建对象时："></a>B：<strong>创建对象时：</strong></h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//成员内部类不是静态的：</span>外部类名<span class="token punctuation">.</span>内部类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类名<span class="token punctuation">.</span><span class="token keyword">new</span> 内部类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员内部类是静态的：</span>外部类名<span class="token punctuation">.</span>内部类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类名<span class="token punctuation">.</span>内部类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><h5 id="C：成员内部类常见修饰符："><a href="#C：成员内部类常见修饰符：" class="headerlink" title="C：成员内部类常见修饰符："></a>C：<strong>成员内部类常见修饰符：</strong></h5><p><strong>A：private</strong></p><p>如果我们的内部类不想轻易被任何人访问，可以选择使用private修饰内部类，这样我们就无法通过创建对象的方法来访问，想要访问只需要在外部类中定义一个public修饰的方法，间接调用。这样做的好处就是，我们可以在这个public方法中增加一些判断语句，起到数据安全的作用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“密码备份文件”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>你是管理员<span class="token punctuation">)</span><span class="token punctuation">{</span>            Inner i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“你没有权限访问”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面我们给出一个更加规范的写法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“密码备份文件”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用getXxx()获取成员内部类，可以增加校验语句（文中省略）</span>    <span class="token keyword">public</span> Inner <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Outer outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Outer<span class="token punctuation">.</span>Inner inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="B：static"><a href="#B：static" class="headerlink" title="B：static"></a>B：static</h5><p>这种被 static 所修饰的内部类，按位置分，属于成员内部类，但也可以称作静态内部类，也常叫做嵌套内部类。具体内容我们在下面详细讲解。</p><p><strong>D：成员内部类经典题(填空)</strong></p><p>请在三个println 后括号中填空使得输出25,20,18</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> viod <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> age  <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空1</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空2</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Outer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空3</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h4 id="2-局部内部类"><a href="#2-局部内部类" class="headerlink" title="(2) 局部内部类"></a>(2) 局部内部类</h4><blockquote><p>局部内部类——就是定义在一个方法或者一个作用域里面的类</p><p>特点：主要是作用域发生了变化，只能在自身所在方法和属性中被使用</p></blockquote><p><strong>A 格式：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>B：访问时：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在局部位置，可以创建内部类对象，通过对象调用和内部类方法</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//从内部类中访问方法内变量age2，需要将变量声明为最终类型。</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Inner i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>C: 为什么局部内部类访问局部变量必须加final修饰呢？</strong></p><p>因为<strong>局部变量是随着方法的调用而调用</strong>，<strong>使用完毕就消失</strong>，<strong>而堆内存的数据并不会立即消失</strong>。</p><p>所以，堆内存还是用该变量，而该变量已经没有了。<strong>为了让该值还存在，就加final修饰。</strong></p><p>原因是，当我们使用final修饰变量后，堆内存直接存储的<strong>是值</strong>，而<strong>不是变量名</strong>。</p><p>（即上例 age2 的位置存储着常量30 而不是 age2 这个变量名）</p><h4 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="(3) 静态内部类"></a>(3) 静态内部类</h4><blockquote><p>我们所知道static是不能用来修饰类的,但是成员内部类可以看做外部类中的一个成员,所以可以用static修饰,这种用static修饰的内部类我们称作静态内部类,也称作嵌套内部类.</p><p>特点：不能使用外部类的非static成员变量和成员方法</p></blockquote><p><strong>解释</strong>：非静态内部类编译后会默认的保存一个指向外部类的引用，而静态类却没有。</p><p><strong>简单理解</strong>：</p><p>即使没有外部类对象，也可以创建静态内部类对象，而外部类的非static成员必须依赖于对象的调用，静态成员则可以直接使用类调用，不必依赖于外部类的对象，所以静态内部类只能访问静态的外部属性和方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outter</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> age2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Outter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        Outter<span class="token punctuation">.</span>Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outter<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="(4) 匿名内部类"></a>(4) 匿名内部类</h4><blockquote><p>一个没有名字的类，是内部类的简化写法</p></blockquote><p><strong>A 格式：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 类名或者接口名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    重写方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>本质：其实是继承该类或者实现接口的子类匿名对象</p><p>这也就是下例中，可以直接使用 new Inner() {}.show(); 的原因 == <strong>子类</strong>对象.show();</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        Outer o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p>如果匿名内部类中有多个方法又该如何调用呢？</p><pre class=" language-java"><code class="language-java">Inter i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//多态，因为new Inner(){}代表的是接口的子类对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>B：匿名内部类在开发中的使用</strong></p><p>我们在开发的时候，会看到抽象类，或者接口作为参数。</p><p>而这个时候，实际需要的是一个子类对象。</p><p>如果该方法仅仅调用一次，我们就可以使用匿名内部类的格式简化。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>006-包</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/006-bao/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/006-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="6-1-包的基本概述"><a href="#6-1-包的基本概述" class="headerlink" title="6.1 包的基本概述"></a>6.1 包的基本概述</h3><h3 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h3><blockquote><p>在我们设计一个程序的时候（尤其是多人合作），会写一些类来实现功能，但是往往会有重名的现象发生，为了解决这个问题，则专门设计了包。（还有其他作用，下述）</p></blockquote><blockquote><p>简单理解：不同的城市之间存在相同名字的小区，用城市名则可以区分这些重名小区，城市名就可以理解为上面的包，小区则可以看做是重名的类，通过这个前缀，解决了重名问题。</p></blockquote><h4 id="1-概念："><a href="#1-概念：" class="headerlink" title="(1) 概念："></a>(1) 概念：</h4><p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p><p>其实可以理解为就是文件夹，并且使用了树形目录的存储方式。</p><h4 id="2-作用："><a href="#2-作用：" class="headerlink" title="(2) 作用："></a>(2) 作用：</h4><p>A:区分同名的类</p><p>B:对类进行分类管理</p><p>​    a:按照功能分——把功能相似或者相关的类或接口组织在同一个包中</p><p>​    b:按照模块分</p><h4 id="3-包的定义"><a href="#3-包的定义" class="headerlink" title="(3) 包的定义:"></a>(3) 包的定义:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> 包名<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多级包用.分开</span></code></pre><h4 id="4-注意"><a href="#4-注意" class="headerlink" title="(4) 注意:"></a>(4) 注意:</h4><p>A:package语句必须在文件中的第一条有效语句</p><p>B:在一个java文件中，只能有一个package</p><h4 id="5-带包的编译和运行"><a href="#5-带包的编译和运行" class="headerlink" title="(5)带包的编译和运行"></a>(5)带包的编译和运行</h4><p>掌握——自动式(Dos中)</p><pre class=" language-java"><code class="language-java">javac <span class="token operator">-</span>d <span class="token punctuation">.</span> xxx<span class="token punctuation">.</span>java<span class="token comment" spellcheck="true">//可以使用 *.java代表当前目录下的所有源文件</span><span class="token comment" spellcheck="true">//运行:</span>java 包名<span class="token punctuation">.</span>HelloWorld</code></pre><p>在ecplise、ideal等IDE中会自动的生成包名的结构</p><h3 id="6-2导包"><a href="#6-2导包" class="headerlink" title="6.2导包"></a><strong>6.2导包</strong></h3><p>当你需要使用一个包中的成员的时候，我们就需要在 java 程序中导入该包</p><p>如果两个类在同一个包中，则不必导包</p><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入单个（推荐）</span><span class="token keyword">import</span> 包名<span class="token punctuation">;</span></code></pre><p>注意：我们用谁就导谁。(尽量少用星号* 如下)</p><h5 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入java.io下的所有类（不推荐）</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*</code></pre><p>注意：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前两句是否能用最后一句代替</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>*；<span class="token comment" spellcheck="true">//无法代替上面两句，只能指向到单层的包中</span></code></pre><p>注意：使用java.lang下的内容是不用导包的，具体可以查看 jdk-api</p><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>使用某一包中对应成员，并且简化书写</p><p>例如我们想使用java.io包下的BufferedReader</p><p>我们可以</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReaderBufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"foo.in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>如果没有使用import导包</p><p>我们在使用java类库的时候，就需要写出该类的全路径名称，明显代码过于冗长 </p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"foo.in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>6.3 权限修饰符</strong></p><p>看完包的基本概念，我们也就理解了当初所讲权限修饰符的问题</p><table><thead><tr><th></th><th align="center">本类</th><th align="center">同一个包下</th><th align="center">不同包下的子类</th><th align="center">不同包下的无关类</th></tr></thead><tbody><tr><td>public</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td>protected</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td></tr><tr><td>默认</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td></tr><tr><td>private</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>这四种权限修饰符在任何情况下只能出现一种</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！（系列文章均会在公众号第一时间更新）</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>005-接口</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/005-jie-kou/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/005-jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="第五章-接口"><a href="#第五章-接口" class="headerlink" title="第五章 接口"></a><strong>第五章 接口</strong></h2><h3 id="5-1-接口概述"><a href="#5-1-接口概述" class="headerlink" title="5.1 接口概述"></a>5.1 接口概述</h3><p>常见的猫狗案例 猫和狗它们仅仅提供一些基本功能。</p><p>但有一些不是动物本身就具备的，比如：猫钻火圈，狗跳高等功能</p><p>是在后面的培养中训练出来的，这种额外的功能，java提供了接口表示。</p><h3 id="5-2-接口特点"><a href="#5-2-接口特点" class="headerlink" title="5.2 接口特点"></a>5.2 接口特点</h3><h4 id="A：接口用关键字interface表示"><a href="#A：接口用关键字interface表示" class="headerlink" title="A：接口用关键字interface表示"></a>A：接口用关键字interface表示</h4><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">public</span><span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ol><li><p>接口中的方法不能具体实现，接口中的方法必须为抽象方法</p></li><li><p>接口中一般不定义变量，因为接口中的变量会被默认指定为 public static final 变量（只能是）</p></li></ol><h4 id="B：类实现接口用implements-表示"><a href="#B：类实现接口用implements-表示" class="headerlink" title="B：类实现接口用implements 表示"></a>B：类实现接口用implements 表示</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口<span class="token number">1</span><span class="token punctuation">,</span>接口<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>1.一个类（非抽象类）可以遵循多个接口，并且需要实现（重写）该接口中所有的方法</p><p>2.子类为抽象类的意义不大</p><h3 id="5-3-接口的成员特点"><a href="#5-3-接口的成员特点" class="headerlink" title="5.3 接口的成员特点"></a><strong>5.3 接口的成员特点</strong></h3><ul><li><p><strong>A: 成员变量</strong></p><ul><li><p>只能是常量</p></li><li><p>默认修饰符：public static final</p></li></ul></li><li><p><strong>B: 构造方法</strong></p><ul><li>没有构造方法</li></ul></li><li><p><strong>C:成员方法</strong></p><ul><li><p>只能是抽象的</p></li><li><p>默认修饰符：public abstract</p></li></ul></li></ul><h3 id="5-4-抽象类和接口的区别（重要）"><a href="#5-4-抽象类和接口的区别（重要）" class="headerlink" title="5.4 抽象类和接口的区别（重要）"></a>5.4 抽象类和接口的区别（重要）</h3><p>我们从我们实际设计场景中来切入这个话题</p><p>先来举一个简单的例子：</p><p>狗都具有 eat() 、sleep() 方法，我们分别通过抽象类和接口定义这个抽象概念</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过抽象类定义</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过接口定义</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是我们现在如果需要让狗拥有一项特殊的技能——钻火圈 DrillFireCircle()，如何增加这个行为呢？</p><p>思考：</p><ol><li><p>将钻火圈方法与前面两个方法一同写入抽象类中，但是这样的话，但凡继承这个抽象类狗都具有了钻火圈技能，明显不合适</p></li><li><p>将钻火圈方法与前面两个方法一同写入接口中，当需要使用钻火圈功能的时候，就必须实现 接口中的eat() 、sleep() 方法（重写该接口中所有的方法）显然也不合适</p></li></ol><p>那么该如何解决呢 ? 我们可以仔细想一想,eat和sleep都是狗本身所应该具有的一种行为,而钻火圈这种行为则是后天训练出来的,只能算是对狗类的一种附加或者延伸, 两者不应该在同一个范畴内,所以我们考虑将这个单独的行为,独立的设计一个接口,其中包含DrillFireCircle()方法, Dog设计为一个抽象类, 其中又包括eat() 、sleep() 方法.</p><p>一个SpecialDog即可继承Dog类并且实现DrillFireCircle()接口</p><p>下面给出代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义接口，含有钻火圈方法</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DrillFireCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drillFireCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义抽象类狗类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承抽象类且实现接口</span><span class="token keyword">class</span> <span class="token class-name">SpecialDog</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">drillFireCircle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//....</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//....</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drillFireCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//....</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如狗是否能钻火圈，能则可以实现这个接口，不能就不实现这个接口。 </p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004-抽象类</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/004-chou-xiang-lei/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/004-chou-xiang-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-抽象类"><a href="#第四章-抽象类" class="headerlink" title="第四章 抽象类"></a>第四章 抽象类</h2><h3 id="4-1-抽象类概述（以下内容可能有点烦-但是通俗易懂-简直舒服）"><a href="#4-1-抽象类概述（以下内容可能有点烦-但是通俗易懂-简直舒服）" class="headerlink" title="4.1 抽象类概述（以下内容可能有点烦 但是通俗易懂 简直舒服）"></a>4.1 抽象类概述（以下内容可能有点烦 但是通俗易懂 简直舒服）</h3><blockquote><p>我们创建一个动物类，并且在这个类中创建动物对象，但是当你提到动物类，你并不知道我说的是什么动物，只有看到了具体的动物，你才知道这是什么动物，所以说动物本身并不是一个具体的事物，而是一个抽象的事物。只有真正的猫，狗才是具体的动物，同理我们也可以推理不同的动物，他们的行为习惯应该是不一样的，所以我们不应该在动物类中给出具体体现，而是给出一个声明即可。</p></blockquote><p><strong>在Java中一个没有方法体的方法应该定义为抽象方法 而类中如果有抽象方法，则必须定义为抽象类</strong></p><h4 id="4-2-1-抽象类的特点"><a href="#4-2-1-抽象类的特点" class="headerlink" title="4.2_1 抽象类的特点"></a>4.2_1 抽象类的特点</h4><ul><li><p>A: 抽象类和抽象方法必须用关键字abstract修饰</p></li><li><p>B: 抽象类中不一定有抽象方法,但是有抽象方法的类一定是抽象类</p></li><li><p>C: 抽象类不能实例化→不加 {}</p></li><li><p>D: 抽象类的子类</p><ul><li><p>a:是一个抽象类</p></li><li><p>b:是一个具体类 这个类必须重写抽象类中的所有抽象方法（多态）</p></li></ul></li></ul><p>我们继续用猫狗案例来解释一下为什么要重写抽象类中的所有抽象方法。</p><p>“猫”和“狗”都是“动物”这个类的实体，比如动物都有eat() 这个方法，但是狗是吃肉的，猫是吃鱼的。所以每个动物关于具体吃的方式是需要在子类中重写的，不然的话，狗和猫不就一样了吗？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Animal类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我趴着睡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Dog类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我实现了父类方法，狗吃肉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Cat类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我实现了父类方法，猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><pre><code>我趴着睡我实现了父类方法，狗吃肉-------------------------我趴着睡我实现了父类方法，猫吃鱼</code></pre><p>通过上面的例子我们可以看到，Dog和Cat两个子类继承Animal，两者sleep()方法是一样的均继承于Animal类，而eat()方法由于特性不同则在Animal类中定义为抽象方法，分别在子类中实现</p><h4 id="4-2-2-抽象类的成员特点："><a href="#4-2-2-抽象类的成员特点：" class="headerlink" title="4.2_2 抽象类的成员特点："></a>4.2_2 抽象类的成员特点：</h4><ul><li><p>A: 成员变量：既有变量，也有常量</p></li><li><p>B: 构造方法：有构造方法</p></li><li><p>C: 成员方法：既有抽象，也有非抽象</p></li></ul><h4 id="4-2-3-抽象类的几个小问题"><a href="#4-2-3-抽象类的几个小问题" class="headerlink" title="4.2_3 抽象类的几个小问题"></a>4.2_3 抽象类的几个小问题</h4><ul><li>A: 抽象类有构造方法，不能实例化，那么构造方法有什么用?</li></ul><p>​    用于子类访问父类数据的初始化</p><ul><li>B: 一个类如果没有抽象方法,却定义为了抽象类，有什么用?</li></ul><p>​    为了不让创建对象</p><ul><li><p>C: abstract不能和哪些关键字共存</p><ul><li><p>a: final 冲突</p></li><li><p>b: private 冲突</p></li><li><p>c: static 无意义</p></li></ul></li></ul><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-Java继承</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/002-ji-cheng/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/002-ji-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/basic/1.1-01-001.png" alt></p><h1 id="第二阶段-JAVA面向对象"><a href="#第二阶段-JAVA面向对象" class="headerlink" title="第二阶段 JAVA面向对象"></a>第二阶段 JAVA面向对象</h1><h2 id="第二章-继承"><a href="#第二章-继承" class="headerlink" title="第二章 继承"></a>第二章 继承</h2><p>其实在我们面向对象这一阶段的学习中，我们就是围绕Java的三大特性（封装、继承、多态）来讲解的，在上一掌内容中我们讲解了一部分封装的有关知识，今天我们来重点学习继承的学习。</p><h3 id="2-1-继承的基本认识"><a href="#2-1-继承的基本认识" class="headerlink" title="2.1 继承的基本认识"></a>2.1 继承的基本认识</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a><strong>概述：</strong></h4><p><strong>继承就是在一个已有类的基础上派生出新类</strong></p><p><img src="http://image.ideal-20.cn/basic/1.2-02-001.png" alt></p><p><strong>子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为</strong></p><p>（父类更通用，子类更具体）</p><p> <strong>功能：</strong>有了继承以后，我们定义一个类的时候，可以在一个已经存在的类的   基础上，还可以定义自己的新成员。</p><p> <strong>格式：</strong>class 子类名 <strong>extends</strong> 父类名 {}</p><h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a><strong>好处：</strong></h4><p>A:提高了代码的复用性</p><p>B:提高了代码的维护性（通过少量的修改，满足不断变化的具体要求）</p><p>C:让类与类产生了一个关系，是多态的前提</p><h4 id="要求："><a href="#要求：" class="headerlink" title="要求："></a><strong>要求：</strong></h4><p>有共同的属性或操作</p><p>有细微的差别</p><h3 id="2-2-继承的弊端"><a href="#2-2-继承的弊端" class="headerlink" title="2.2 继承的弊端"></a>2.2 继承的弊端</h3><p> A:让类的耦合性增强。这样某个类的改变就会影响其他和该类相关的类</p><p>·原则：低耦合，高内聚。</p><p>·耦合：类与类的关系</p><p>·内聚：自己完成某件事情的能力</p><p>B:打破了封装性</p><p><strong>特点：</strong></p><p><strong>A:Java只支持单继承，不支持多继承(C++支持)</strong></p><p><strong>B:Java支持多层继承（继承体系）</strong></p><p><strong>儿子继承爸爸 爸爸继承爷爷 儿子可以通过爸爸继承爷爷</strong></p><p><img src="http://image.ideal-20.cn/basic/1.2-02-002.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.2-02-003.png" alt></p><p><strong>注意：</strong></p><p>A: 子类只能继承父类所有非私有成员（成员方法和成员变量）</p><p>B：子类不能继承父类的构造方法，但是可以通过super关键字去访问方法</p><p>C: 不要为了部分功能而继承（多层继承会使得子类继承多余的方法）</p><h3 id="2-3-Java继承中的成员关系"><a href="#2-3-Java继承中的成员关系" class="headerlink" title="2.3 Java继承中的成员关系"></a>2.3 Java继承中的成员关系</h3><p><strong>A:成员变量</strong></p><p>a:子类的成员变量名称和父类中的成员变量名称不一样，这个太简单</p><p>b:子类的成员变量名称和父类中的成员变量名称一样，这个怎么访问</p><p><strong>子类的方法访问变量的查找顺序：</strong></p><ul><li><p>在子类方法的局部范围找，有就使用</p></li><li><p>在子类的成员范围找，有就使用</p></li><li><p>在父类的成员范围找，有就使用</p></li><li><p>找不到，就报错。</p></li></ul><h3 id="2-4-Super-关键字"><a href="#2-4-Super-关键字" class="headerlink" title="2.4 Super 关键字"></a>2.4 Super 关键字</h3><p><img src="http://image.ideal-20.cn/basic/1.2-02-005.png" alt></p><p>不仅要输出局部范围的num，还要输出本类成员范围的num</p><p>使用super关键字</p><h4 id="this-和super的区别"><a href="#this-和super的区别" class="headerlink" title="this 和super的区别"></a>this 和super的区别</h4><p>this 代表本类对应的引用</p><p>Super 代表父亲存储空间的标识（可以理解为父亲引用）可以操作父亲   的成员</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a><strong>使用方法：</strong></h4><p><strong>A: 调用成员变量</strong></p><ul><li><p>this.成员变量 调用本类的成员变量</p></li><li><p>super.成员变量 调用父类的成员变量</p></li></ul><p><strong>B: 调用构造方法</strong></p><ul><li><p>this（…） 调用本类的成员变量</p></li><li><p>Super（…）调用父类的成员变量</p></li></ul><p><strong>C: 调用成员方法</strong></p><ul><li><p>this.成员方法 调用本类的成员方法</p></li><li><p>super.成员方法 调用父类的成员方法</p></li></ul><h3 id="2-5-继承中构造方法的关系"><a href="#2-5-继承中构造方法的关系" class="headerlink" title="2.5 继承中构造方法的关系"></a>2.5 继承中构造方法的关系</h3><p><strong>A：</strong>子类中所有的构造方法默认都会访问父类中空参数的构造方法</p><p><strong>B：</strong>理由：</p><p>因为子类会继承父类中的数据，可能还会使用父类的数据</p><p>所以，<strong>子类初始化之前，一定要先完成父类数据的初始化</strong></p><p>注意：子类每一个构造方法的第一条语句默认都是：super()</p><p>如果父类没有无参构造方法，那么子类的构造方法会出现什么现象？</p><p>报错</p><p>解决方法：</p><p>A：在父类中加一个无参构造方法</p><p>B：通过使用super关键字去显示的调用父类的带参构造方法</p><p>C：子类通过this去调用本类的其他构造方法</p><p><strong>子类中一定要有一个去访问父类的构造方法，否则父类数据就没</strong> <strong>有初始化。</strong></p><p><strong>注意事项;</strong></p><p>this(…)或者super(…)必须出现在第一条语句上。</p><p>否则就可能对父类的数据进行了多次初始化</p><h3 id="2-6-继承中成员方法的关系"><a href="#2-6-继承中成员方法的关系" class="headerlink" title="2.6 继承中成员方法的关系"></a>2.6 继承中成员方法的关系</h3><p>子类中的方法和父类中的方法声明一样</p><p>通过子类调用方法：</p><p>·先找子类中，看有没有这个方法，有就使用</p><p>·再看父类中，看有没有这个方法，有就是用</p><p>  ·如果没有就报错（不去看父亲的父亲）</p><h3 id="2-7-方法重写（override）"><a href="#2-7-方法重写（override）" class="headerlink" title="2.7 方法重写（override）"></a>2.7 方法重写（override）</h3><p><strong>方法重写：</strong>子类中出现了和父类中方法声明一模一样的方法</p><p>（区别于方法重载，方法重载仅仅是方法名一样）</p><p><strong>子类重写的应用：</strong>当子类需要父类的功能，而功能主体子类又有自己特有的内容时，这样既沿袭了父类的功能，又定义了子类特有的功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数名<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//避免重复代码</span></code></pre><h3 id="2-8-final关键字"><a href="#2-8-final关键字" class="headerlink" title="2.8 final关键字"></a>2.8 final关键字</h3><p><strong>final 关键字</strong>声明类可以把类定义为不能继承的，即最终类；</p><p>或者用于修饰方法，该方法不能被子类重写：</p><p>Final修饰变量的初始化时机</p><p>·被final修饰的变量只能赋值一次</p><p>·在构造方法完毕前（非静态的常量）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明方法</span><span class="token keyword">final</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类体}</span><span class="token comment" spellcheck="true">//声明类</span>修饰符<span class="token punctuation">(</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span><span class="token keyword">protected</span><span class="token punctuation">)</span> <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法体}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-Java多态</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/003-duo-tai/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/003-duo-tai/</url>
      
        <content type="html"><![CDATA[<h3 id="3-1多态的基本认识"><a href="#3-1多态的基本认识" class="headerlink" title="3.1多态的基本认识"></a><strong>3.1多态的基本认识</strong></h3><h4 id="概述-多态是同一个行为具有多个不同表现形式或形态的能力。"><a href="#概述-多态是同一个行为具有多个不同表现形式或形态的能力。" class="headerlink" title="概述:多态是同一个行为具有多个不同表现形式或形态的能力。"></a><strong>概述</strong>:多态是同一个行为具有多个不同表现形式或形态的能力。</h4><p>如下图：黑白打印机和彩色打印机相同的打印行为却有着不同的打印效果</p><p><img src="http://image.ideal-20.cn/basic/1.2-03-001.png" alt> </p><h4 id="前提："><a href="#前提：" class="headerlink" title="前提："></a><strong>前提：</strong></h4><ul><li><p>有继承关系</p></li><li><p>有方法重写（抽象方法）</p></li><li><p>有父类引用指向子类对象</p></li></ul><h4 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h4><pre class=" language-java"><code class="language-java">parent p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>把子的对象赋值给父</p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><p>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p><h3 id="3-2-多态中的成员访问方法"><a href="#3-2-多态中的成员访问方法" class="headerlink" title="3.2 多态中的成员访问方法"></a><strong>3.2 多态中的成员访问方法</strong></h3><pre class=" language-java"><code class="language-java">Fu f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zi</span><span class="token punctuation">;</span></code></pre><p>我们按照上面给出格式来写一段代码（Zi继承Fu类）</p><p><strong>A：成员变量</strong></p><p>编译看左边，运行看左边</p><p><strong>B：构造方法</strong></p><p>创建子类对象的时候，访问父类的构造方法，对父类的数据进行初化</p><p><strong>C；成员方法</strong></p><p>编译看左边，运行看右边</p><p><strong>D；静态方法</strong></p><p>编译看左边，运行看右边</p><p><strong>看左边即在左边即父类中寻找，看右边即在子类中寻找</strong></p><h3 id="3-3-多态的好处和弊端"><a href="#3-3-多态的好处和弊端" class="headerlink" title="3.3  多态的好处和弊端"></a>3.3  <strong>多态的好处和弊端</strong></h3><h4 id="多态的好处："><a href="#多态的好处：" class="headerlink" title="多态的好处："></a><strong>多态的好处：</strong></h4><p>A：提高了代码的维护性（继承保护）</p><p><strong>B：提高了代码的扩展性（由多态保证）</strong></p><p>Eg：例如一个程序中 狗 猫 猪 都继承于动物类（Eg：AnimalTool）</p><p>分别写出对应的行为方法（Eg：eat() ）</p><p>而将调用动物功能的代码 写入动物操作工具类</p><p>但是添加新的动物时，每次都需要修改工具类</p><p>为了优化代码，将工具类中 每一个动物的操作代码名字</p><p>写为动物总称，添加新动物后，只需要在Demo中创建    新动物的对象 然后直接调用这个总的动物操作工具类</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃肉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃肉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnimalTool</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">AnimalTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用猫的功能</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useCat</span><span class="token punctuation">(</span>Cat c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用狗的功能</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useDog</span><span class="token punctuation">(</span>Dog d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//把所有的可能都归为动物类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useAnimal</span><span class="token punctuation">(</span>Animal a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//还可以写其他方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuoTaiDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 直接创对象调用对应方法         */</span>        <span class="token comment" spellcheck="true">//我养了一只狗</span>        Dog d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//我又养了一只狗</span>        Dog d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 创对象、使用动物操作类调用对应方法（）         */</span>        Dog d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dog d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AnimalTool<span class="token punctuation">.</span><span class="token function">useDog</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnimalTool<span class="token punctuation">.</span><span class="token function">useDog</span><span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//我喜欢猫</span>        <span class="token comment" spellcheck="true">//定义一个猪类，它要继承自动物，提一个eat()方法</span>        <span class="token comment" spellcheck="true">//并且还得再工具类中添加该类方法的调用（即类似前面useDog()）这样无疑很麻烦</span>        Cat c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat c2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AnimalTool<span class="token punctuation">.</span><span class="token function">useCat</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnimalTool<span class="token punctuation">.</span><span class="token function">useCat</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//推荐使用多态</span>        AnimalTool<span class="token punctuation">.</span><span class="token function">useAnimal</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnimalTool<span class="token punctuation">.</span><span class="token function">useAnimal</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="多态的弊端："><a href="#多态的弊端：" class="headerlink" title="多态的弊端："></a><strong>多态的弊端：</strong></h4><p><strong>A：不能使用子类的特有功能</strong></p><p>如果想使用：</p><p>·创建子类对象调用方法即可（可以但是很多时候不合理，而且太占内存）</p><p>·把父类的引用强制转换为子类的引用（向下转型）</p><h4 id="对象间的转型问题："><a href="#对象间的转型问题：" class="headerlink" title="对象间的转型问题："></a><strong>对象间的转型问题：</strong></h4><p><strong>向上转型：</strong></p><pre class=" language-java"><code class="language-java">Fu f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>向下转型：</strong></p><pre class=" language-java"><code class="language-java">Zi z <span class="token operator">=</span> <span class="token punctuation">(</span>Zi<span class="token punctuation">)</span>f<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//要求f必须能够转为Zi</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fu</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show Fu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show Zi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method Zi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DuoTaiDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Fu fu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fu.method(); 错误，不能使用子类特有功能</span>        <span class="token comment" spellcheck="true">//通过转型可以使用子类特有功能</span>        <span class="token comment" spellcheck="true">//创建子类对象</span>        <span class="token comment" spellcheck="true">//可以但是不推荐</span>        Zi zi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zi<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zi<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要求f必须能够转为Zi</span>        <span class="token comment" spellcheck="true">//推荐（）</span>        Zi zi2 <span class="token operator">=</span> <span class="token punctuation">(</span>Zi<span class="token punctuation">)</span>fu<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Java面向对象</title>
      <link href="/2019/09/16/1.2-java-mian-xiang-dui-xiang/001-mian-xiang-dui-xiang/"/>
      <url>/2019/09/16/1.2-java-mian-xiang-dui-xiang/001-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/basic/1.1-01-001.png" alt></p><h2 id="第一章-面向对象"><a href="#第一章-面向对象" class="headerlink" title="第一章 面向对象"></a>第一章 面向对象</h2><blockquote><p>小白：Java是一门完全面向对象的编程语言！嗯？什么是面向过程？什么又是面向对象呢？</p></blockquote><blockquote><p>大佬：在我们正式进入学习这部分前，了解一下面向过程和面向对象这两个概念，对于我们 接下来的学习有很大的好处。别急，下面我就来和你说一说。</p></blockquote><h3 id="面向过程——步骤化"><a href="#面向过程——步骤化" class="headerlink" title="面向过程——步骤化"></a>面向过程——步骤化</h3><p>面向过程就是分析出实现需求所需要的步骤，通过函数一步一步实现这些步骤，接着依次调用即可</p><h3 id="面向对象——行为化"><a href="#面向对象——行为化" class="headerlink" title="面向对象——行为化"></a>面向对象——行为化</h3><p>面向对象是把整个需求按照特点、功能划分，将这些存在共性的部分封装成对象，创建了对象不是为了完成某一个步骤，而是描述某个事物在解决问题的步骤中的行为</p><blockquote><p>小白：面向过程还挺明白的，面向对象也太难理解了吧（哭了）</p></blockquote><blockquote><p>大佬：我再来举个例子再给你好好说一说</p></blockquote><h3 id="桌球实例-帮助理解"><a href="#桌球实例-帮助理解" class="headerlink" title="桌球实例-帮助理解"></a>桌球实例-帮助理解</h3><p><strong>我们先提出一个需求：</strong></p><p>设计一个桌球游戏（略过开球，只考虑中间过程）</p><h4 id="面向过程方式思考："><a href="#面向过程方式思考：" class="headerlink" title="面向过程方式思考："></a>面向过程方式思考：</h4><p>1.palyer1 击球 </p><p>2.实现画面击球效果  </p><p>3.判断是否进球及有效  </p><p>4.palyer2击球  </p><p>5.实现画面击球效果  </p><p>6.判断是否进球及有效   </p><p>7.返回步骤1     </p><p>8.输出游戏结果</p><p><strong>把上面的步骤通过函数一步一步实现</strong>，这个需求就完成了。</p><h4 id="面向对象方式思考："><a href="#面向对象方式思考：" class="headerlink" title="面向对象方式思考："></a>面向对象方式思考：</h4><p>经过观察我们可以看到，其实在上面的流程中存在很多<strong>共性</strong>的地方</p><p>所以我们将这些共性部分全集中起来，做成一个<strong>通用的结构</strong></p><ol><li><p>玩家系统（包括palyer1和palyer2）</p></li><li><p>击球效果系统，负责展示给用户游戏时的画面</p></li><li><p>规则系统，判断是否犯规，输赢等</p></li></ol><p><img src="http://image.ideal-20.cn/basic/1.2-01-001.png" alt> </p><p>我们将繁琐的步骤，通过行为、功能，<strong>模块化</strong>，这就是面向对象，我们甚至可以利用该程序，分别快速实现8球和斯诺克的不同游戏（只需要修改规则即可，玩家系统，击球效果系统都是一致的）</p><h3 id="面向过程和面向对象的优缺点："><a href="#面向过程和面向对象的优缺点：" class="headerlink" title="面向过程和面向对象的优缺点："></a>面向过程和面向对象的优缺点：</h3><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><p><strong>优点</strong>：性能上它是优于面向对象的，因为类在调用的时候需要实例化，开销过大。</p><p><strong>缺点</strong>：不易维护、复用、扩展</p><p>用途：单片机、嵌入式开发、Linux/Unix等对性能要求较高的地方</p><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p><strong>优点：</strong>易维护、易复用、易扩展，由于面向对象有<strong>封装</strong>、<strong>继承</strong>、<strong>多态性</strong>的特性，可以设计出<strong>低耦合</strong>的系统，使系统更加灵活、更加易于维护<br><strong>缺点：</strong>性能比面向过程低</p><p><strong>低耦合</strong>，简单的理解就是说，模块与模块之间尽可能的独立，两者之间的关系尽可能简单，尽量使其独立的完成成一些子功能，这避免了牵一发而动全身的问题。这一部分我们会在面向对象学习结束后进行系统的整理和总结。</p><p>只通过教科书后的例题是无法体会到面向过程所存在的问题的，在一些小例程中，面向过程感觉反而会更加的简单，但是一旦面临较大的项目，我们需要编写N个功能相似的函数，函数越来越多，代码量越来越多，Bug之路也就此开始了。</p><h3 id="1-1-类和对象"><a href="#1-1-类和对象" class="headerlink" title="1.1 类和对象"></a>1.1 类和对象</h3><p>面向对象的思想是如何在java展现的呢？ 就是通过类和对象</p><p><strong>类</strong>是一组相关的属性和行为的集合。是一个抽象的概念。<br><strong>对象</strong>是该类事物的具体表现形式。具体存在的个体。</p><p><strong>成员变量</strong>事物的属性</p><p><strong>成员方法</strong>事物的行为</p><p>上面我们说了这几个概念，那么到底应该怎么理解呢？</p><p>类就是对一些具有<strong>共性特征</strong>，并且<strong>行为相似</strong>的个体的描述。</p><p>比如小李和老张都有姓名、年龄、身高、体重等一些<strong>属性，</strong>并且两人都能够进行聊天、运动等<strong>相似的行为</strong>。</p><p>由于这两个人具有这些共性的地方，所以我们把它抽象出来，定义为一个<strong>类</strong>——<strong>人类</strong>，而小李、老王正是这个类中的个体（对象），而个体才是真正具体的存在，光提到人类，你只知道应该有哪些属性行为，但你不知道他具体的一些值，比如你知道他属于“人类”所以他应该有姓名，年龄等属性，但你并不知道他具体叫什么，年龄多大了。而小李和老王这两个具体的对象，却能够实实在在的知道老王今年30岁了、身高175等值。</p><p><strong>结合上面的例子再总结一下：</strong></p><p>成员变量就是用来描述这个类的属性的，比如人类应该拥有姓名，年龄等属性</p><p>成员方法就是用来描述事物的行为的，比如人类能够聊天、运动等行为</p><h5 id="1-1-1-类的定义及使用"><a href="#1-1-1-类的定义及使用" class="headerlink" title="1.1_1 类的定义及使用"></a><strong>1.1_1 类的定义及使用</strong></h5><p>我们了解了类和对象的基本定义和概念</p><p>下面我们就通过一个实例 来了解到底如定义一个类</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-002.png" alt></p><p><strong>A: 类的定义</strong></p><p><strong>成员变量：</strong>定义格式和普通变量一样，只是位置不同，在<strong>类中，方法外</strong>。</p><p><strong>成员方法：</strong>定义格式和普通方法一样，只是去<strong>掉了static</strong>（后期讲解原因）</p><p><strong>B: 创建并且使用类</strong></p><p><strong>a: 创建对象格式</strong></p><pre class=" language-java"><code class="language-java">类名 对象名 <span class="token operator">=</span>  <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Eg：Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>b:如何使用成员变量和成员方法呢</strong></p><p>对象名.成员变量</p><p>对象名.成员方法()</p><pre><code>Eg：p.reading();p.sleeping();</code></pre><p>其实我们可以看出来，类的定义还是很简单的，结合了我们前面的知识，只是一些位置上的不同罢了，至于创建对象格式中每部分的意义我们在下面马上就要讲解了（我们还需要补充一些知识点）</p><p>我们先来看这么一个话题</p><p>经常听说有一个词叫做局部变量，它和类中的成员变量有什么关系吗？</p><h4 id="1-1-2-成员变量和局部变量的区别："><a href="#1-1-2-成员变量和局部变量的区别：" class="headerlink" title="1.1_2 成员变量和局部变量的区别："></a>1.1_2 成员变量和局部变量的区别：</h4><p><strong>(1) 在类中的位置不同</strong></p><p>成员变量：类中方法外</p><p>局部变量：方法定义中或者方法声明上</p><p><strong>(2) 在内存中的位置不同</strong></p><p>成员变量：在堆中</p><p>局部变量：在栈中</p><p><strong>(3) 生命周期不同</strong></p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失</p><p>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</p><p><strong>(4) 初始化值不同</strong></p><p><strong>成员变量：有默认值（下面会详讲这一点）</strong></p><p>局部变量：没有默认值，必须定义，赋值，然后才能使用</p><blockquote><p>关于初始化问题我们在下面详细讲解，但是我现在还有一个问题，在我们学习java中内存分配的时候，有这样一&gt;句话，“堆内存用来存放new创建的对象和数组” 换句话说对象存在于堆中，而成员变量存在于类中而且对象是类&gt;的个体，所以成员变量也存在于堆中，那么问题就来了，按照同样的方式推导的时候，则会发现方法也和成员变&gt;量一样存在于对象中，岂不就是说，局部变量也存在于堆中呢? 这明显与我们上面的定义有区别</p></blockquote><blockquote><p>一个类可以创建n个不同的对象，当我们new一个对象后，这个对象实体，已经在堆上分配了内存空间，由于类&gt;的成员变量在不同的对象中各不相同（例如，小李和老王的姓名不同），都需要自己各自的存储空间，所以类的成员变量会随着对象存储在堆中，而由于类的方法是所有对象通用的，所以创建对象时，方法里面的局部变量并没有被创建，只有等到对象使用方法的时候才会被压入栈。</p></blockquote><h4 id="1-1-3-形式参数的问题："><a href="#1-1-3-形式参数的问题：" class="headerlink" title="1.1_3 形式参数的问题："></a>1.1_3 形式参数的问题：</h4><p>我们知道堆中存放着new出来的对象以及数组，两者均为引用类型</p><p>在讲数组的相关知识的时候，我们已经讲过了基本类型和数组这一种引用类型，形式参数对实际参数的影响</p><p>跳转—第三章 3.3_1参数传递问题</p><p>在我们学习对象后，我们继续来看一下这个问题</p><p><strong>基本类型</strong>：形式参数的改变不影响实际参数(值传递)<br><strong>引用类型</strong>：形式参数的改变直接影响实际参数(引用传递)</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-003.png" alt></p><h4 id="1-1-4-匿名对象-理解"><a href="#1-1-4-匿名对象-理解" class="headerlink" title="1.1_4 匿名对象(理解)"></a>1.1_4 匿名对象(理解)</h4><p>我们先来了解一下如何创建匿名对象</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-004.png" alt></p><p>(1)简单的理解就是：<strong>没有名字的对象</strong></p><p>(2)应用场景</p><p>A:调用方法，仅仅只调用一次的时候。</p><p>B:可以作为实际参数传递</p><p>好处：匿名对象调用完就是垃圾，可以被垃圾回收器回收，并且这样写比较简化。</p><p>注意：如果对一个对象的多个成员进行调用，就必须给这个对象起名字（即上图中的 s），即使用普通创建对象的方法</p><p>我们下面来看一个实例来看一下如何具体使用匿名对象</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-005.png" alt></p><h4 id="1-1-5-封装的概述和使用"><a href="#1-1-5-封装的概述和使用" class="headerlink" title="1.1_5 封装的概述和使用"></a>1.1_5 封装的概述和使用</h4><p>首先我们先来简单举一个例子：</p><p>例如：夏天宿舍很热，我们（用户）只需要操作遥控器即可使用空调，并不需要了解空调内部是如何运行的</p><p>现在由于知识掌握较少，所以对于封装的概念理解不是很深，不要着急，先过一遍，针对封装的意义及问题我会写一篇具体的文章，现在只需要有一个印象即可。</p><p><strong>封装概述</strong>：是指隐藏对象的属性和实现细节，仅对外提供公共访问方式</p><p><strong>封装好处</strong>：</p><ul><li><p>隐藏实现细节，提供公共的访问方式</p></li><li><p>提高了代码的复用性</p></li><li><p>提高安全性</p></li></ul><p><strong>封装原则：</strong></p><ul><li><p>将不需要对外提供的内容都隐藏起来</p></li><li><p>把属性隐藏，提供公共方法对其访问</p></li></ul><p><strong>思考过程：</strong></p><p>通过对象去给成员变量赋值，可以赋值一些非法的数据</p><p>这是不合理的。所以在赋值之前应该先对数据进行判断</p><p>StudenDemo是一个测试类，测试类一般只创建对象，调用方法</p><p>所以这个判断应该定义在Student类中。需要使用逻辑语句</p><p>逻辑语句应该定义在方法中。所以在Student类中提供一个方法来对数据进行校验</p><p>但是如果偏偏不调用方法来赋值，还是直接赋值</p><p>这样我们的方法就没有起作用</p><p>所以我们必须强制要求使用我的方法，而不能直接调用成员变量</p><p>针对这种情况 Java提供了一个关键字 private</p><p>Private：私有的，可以修饰成员变量和成员方法</p><p>被private修饰的成员只能在本类中访问，所以外界想要操作类中的成员变量就必须通过调用类中的方法来实现</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-006.png" alt></p><h4 id="1-1-6-访问修饰符"><a href="#1-1-6-访问修饰符" class="headerlink" title="1.1_6 访问修饰符"></a>1.1_6 访问修饰符</h4><p>客户端程序员：即在其应用中使用数据类型的类消费者，他的目标是收集各种用来实现快速应用开发的类。</p><p>类创建者：即创建新数据类型的程序员，目标是构建类。　　</p><p>访问控制存在的原因：</p><p>a、让客户端程序员无法触及他们不应该触及的部分  ；</p><p>b、允许库设计者可以改变类内部的工作方式而不用担心会影响到客户端程序员</p><p>java的四个关键字：public、protected、default、private</p><p>（他们决定了紧跟其后被定义的东西可以被谁使用）</p><p>适用范围&lt;访问权限范围越小，安全性越高&gt;</p><table><thead><tr><th>访问权限</th><th><strong>类</strong></th><th><strong>包</strong></th><th><strong>子类</strong></th><th>其他包</th><th></th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td><td>对任何人都是可用的</td></tr><tr><td>protect</td><td>√</td><td>√</td><td>√</td><td></td><td>继承的类可以访问以及和private一样的权限</td></tr><tr><td>default</td><td>√</td><td>√</td><td></td><td></td><td>继承的类可以访问以及和private一样的权限</td></tr><tr><td>private</td><td>√</td><td></td><td></td><td></td><td>除类型创建者和类型的内部方法之外的任何人都不能访问的元素</td></tr></tbody></table><h4 id="1-1-7-private的应用标准案例"><a href="#1-1-7-private的应用标准案例" class="headerlink" title="1.1_7 private的应用标准案例"></a>1.1_7 private的应用标准案例</h4><p>可用this关键字进行完善（一般都是使用完善后的）</p><p>this的内容在下面马上介绍</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-007.png" alt></p><h4 id="1-1-8-this关键字的概述和应用"><a href="#1-1-8-this关键字的概述和应用" class="headerlink" title="1.1_8 this关键字的概述和应用"></a>1.1_8 this关键字的概述和应用</h4><p>这里的调用只能<strong>通过对象名</strong>，这里它应该代表的是student的一个对象</p><p><strong>this</strong>：代表所在类的对象引用</p><p><strong>记住：</strong> 方法被哪个对象调用，this就代表哪个对象</p><p><strong>适用</strong>：局部变量隐藏成员变量（稍后补充）</p><h3 id="1-2-构造方法"><a href="#1-2-构造方法" class="headerlink" title="1.2 构造方法"></a>1.2 构造方法</h3><p><strong>构造方法和它所在类的名字相同</strong>，但构造方法没有返回值。</p><p>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象</p><p>怎么理解呢？</p><p>当一个对象被创建时候，构造方法用来初始化该对象。</p><p>那么什么叫做初始化呢？</p><p>我们要知道吗，构造函数又被叫做<strong>构造器</strong>，它就是为了<strong>初始化类</strong>，当调用该构造器，会用值去<strong>初始化成员</strong>，当使用<strong>带参构造</strong>时，会将<strong>参数中的值传递给成员</strong>，而使用无参构造时，即会用一些<strong>默认的值</strong>来进行成员的初始化</p><p><strong>例如：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String name；<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> bool flag<span class="token punctuation">;</span></code></pre><p>上面的三个成员变量被无参构造进行默认初始化的时候，会被初始化</p><p>name = <strong>null</strong>； age = <strong>0</strong>； flag = <strong>false</strong>；</p><p><strong>注意：</strong></p><p>A:如果我们没有给出构造方法，系统将自动提供一个无参构造方法</p><p>B:如果我们给出了构造方法，系统将不再提供默认的无参构造方法</p><p>如果这个时候我们还想使用无参构造方法，就必须自己给出，建议永远 给出无参构造方法（所以我们习惯于在类中同时给出无参和带参构造方法）</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-008.png" alt> </p><p><strong>给成员变量赋值的两种方法：</strong></p><p>A:setXxx()</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-009.png" alt></p><p>B:构造方法</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-010.png" alt></p><p>讲到这里我们不得不提一下，get、set方法，在今后写代码的时候，我们需要频繁的用到，其实这里就体现了<strong>封装</strong>，<strong>不让用户直接操作成员</strong>，可以起到<strong>安全</strong>的作用，具体内容可以看前封装部分的知识</p><p>构造方法是为了创建对象时，传入一些必要的参数用来初始化对象。</p><p>setter/getter是为了控制属性可不可以读写</p><p>两者不矛盾</p><p><strong>之前在讲解类的时候，我们由于缺少一些知识的铺垫，所以我们将类的初始化过程讲一下：</strong></p><p><strong>类的初始化过程</strong></p><p><strong>Student s = new Student();在内存中做了哪些事情？</strong></p><ul><li><p>加载Student.class文件进内存</p></li><li><p>在栈内存为s开辟空间</p></li><li><p>在堆内存为学生对象开辟空间</p></li><li><p>对学生对象的成员变量进行默认初始化</p></li><li><p>对学生对象的成员变量进行显示初始化</p></li><li><p>通过构造方法对学生对象的成员变量赋值</p></li><li><p>学生对象初始化完毕，把对象地址赋值给s变量</p></li></ul><h3 id="1-3-static关键字"><a href="#1-3-static关键字" class="headerlink" title="1.3 static关键字"></a>1.3 static关键字</h3><p>Static关键字注意事项</p><p><strong>A: 在静态方法中是没有this关键字的</strong></p><p>静态是随着类的加载而加载，this是随着对象的创建而  存在的 → 静态比对象先存在</p><p><strong>B: 静态方法只能访问静态的成员变量和静态的成员方法</strong></p><p><strong>静态方法：</strong></p><p><strong>A：成员变量：</strong>只能访问静态变量</p><p><strong>B：成员方法：</strong>只能访问静态成员方法</p><p><strong>非静态方法：</strong></p><p><strong>A: 成员变量：</strong>可以是静态的，也可以是非静态的</p><p><strong>B: 成员方法：</strong>可以是静态的成员方法，也可以是非静态的成员方法</p><p><strong>为什么静态方法不能访问非静态方法呢？</strong></p><p>因为静态方法是随着类的加载而加载的，静态是优于对象存在的，你要访问非静态的东西，可是这时候可能它还不存在。</p><p><strong>总结起来一句话：静态只能访问静态</strong></p><h3 id="1-4-静态变量和成员变量"><a href="#1-4-静态变量和成员变量" class="headerlink" title="1.4 静态变量和成员变量"></a>1.4 静态变量和成员变量</h3><p>趁热打铁，我们来对静态变量和成员变量做一些区分</p><p><strong>所属不同</strong></p><ul><li><p>静态变量属于类，所以也称为类变量</p></li><li><p>成员变量属于对象。所以也称为实例变量（对象变量）</p></li></ul><p><strong>内存中位置不同</strong></p><ul><li><p>静态变量存储于方法区的静态区</p></li><li><p>成员变量存储于堆内存</p></li></ul><p><strong>·内存出现时间不一样</strong></p><ul><li><p>静态变量随着类的加载而加载，随着类的消失而消失</p></li><li><p>成员变量随着对象的创建而存在，随着对象的消失而消失</p></li></ul><p><strong>调用不同·</strong></p><ul><li><p>静态变量可以通过类名调用，也可以通过对象调用</p></li><li><p>成员变量只能通过对象名调用</p></li></ul><p><img src="http://image.ideal-20.cn/basic/1.2-01-011.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.2-01-012.png" alt></p><p>方式一 是用对象调用成员方法</p><p>方式二 是用类调用成员方法（推荐方式二【需要将对应成员方法写为静态的】）</p><p>如果不想让用户创建对象调用成员方法：</p><p>只需要把构造方法私有，外界就不能创建对象了</p><p>在同一个文件夹下，类定义两个文件夹中和一个文件夹中是一样的</p><h3 id="1-4-制作文档注释和说明书"><a href="#1-4-制作文档注释和说明书" class="headerlink" title="1.4 制作文档注释和说明书"></a>1.4 制作文档注释和说明书</h3><p><strong>(一)</strong></p><p>制作文档注释，文档说明书工具解析文档注释<br>javadoc工具<br>D:格式<br>javadoc -d 目录 -author -version ArrayTool.java<br>目录：就可以写一个文件夹的路径<br>制作帮助文<strong>档出</strong>错：<br>找不到可以文档化的公共或受保护的类：告诉我们类的权限不够(解决办法： 在class前面加public)</p><p><strong>(二)</strong></p><p><strong>API(Application Programming Interface)</strong></p><p><strong>应用程序编程接口(帮助文档)</strong></p><p><strong>Jdk可以帮助我们查阅一些类、方法的详细用法以及参数说明，学会查阅文档也是一项很重要的本领（网络上自行下载）</strong></p><p>下面试着自己通过查阅文档使用一个类  </p><p>Math类</p><p>A:是针对数学进行操作的类</p><p>B:没有构造方法，因为它的成员都是静态的</p><p>C:产生随机数</p><p>public static double random(): [0.0,1.0)</p><p>D:如何产生一个1-100之间的随机数</p><p>int number = (int)(Math.random()*100)+1;</p><p>E:猜数字小游戏</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-013.png" alt></p><h3 id="1-5-代码块"><a href="#1-5-代码块" class="headerlink" title="1.5 代码块"></a>1.5 代码块</h3><p>我们下面来讲解这一部分的最后一个知识点</p><p>(1)用{}括起来的代码。</p><p>(2)分类：</p><p><strong>A: 静态代码块</strong></p><p><strong>概念：</strong> 在java类中（方法中不能存在静态代码块）</p><p>使用static关 键字和{} 声明的代码块：</p><p><strong>执行：</strong> 静态代码块在类被加载的时候就运行了，而且只运行一次，并且优 先于各种代码块以及构造函数。</p><p><strong>作用：</strong> 一般情况下，如果有些代码需要在项目启动的时候就执行，   这时候 就需要静态代码块。比如一个项目启动需要加载的   很多配置文件等 资源，我们就可以都放入静态代码块中。</p><p>对类的数据进行初始化，仅仅只执行一次。</p><p><strong>B: 构造代码块</strong></p><p><strong>概念：</strong>在java类中使用{}声明的代码块（和静态代码块的  区   别是少了static关键字）:</p><p><strong>执行：</strong> 构造代码块在创建对象时被调用，每次创建对象都会调用一   次，但是优先于构造函数执行。</p><p><strong>作用：</strong> 和构造函数的作用类似，都能对对象进行初始化，并且只要   创建一个对象，构造代码块都会执行一次。但是反过来，构   造函数则不一定每个对象建立时都执行（多个构造函数情况   下，建立对象时传入的参数不同则初始化使用对应的构造函   数）。</p><p>把多个构造方法中相同的代码可以放到这里，每个构造方法     执行前， 首先执行构造代码块。</p><p><strong>C: 局部代码块</strong></p><p>用于限定变量的生命周期，及早释放，提高内存利用率。</p><p>静态代码块,构造代码块,构造方法的顺序问题</p><p>·静态代码块 &gt; 构造代码块 &gt; 构造方法</p><p><img src="http://image.ideal-20.cn/basic/1.2-01-014.png" alt></p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.2-Java面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004-Java方法和数组</title>
      <link href="/2019/09/16/1.1-java-ji-chu-zhi-shi/004-fang-fa-he-shu-zu/"/>
      <url>/2019/09/16/1.1-java-ji-chu-zhi-shi/004-fang-fa-he-shu-zu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/5/22/16adf3d8dc8d5183?w=600&h=242&f=jpeg&s=18782" alt="undefined"></p><h2 id="第三章-方法和数组"><a href="#第三章-方法和数组" class="headerlink" title="第三章 方法和数组"></a>第三章 方法和数组</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>还记得我们的HelloWorld例程吗？我们现在对于输出语句应该已经很熟悉了，<br><img src="http://image.ideal-20.cn/basic/1.1-04-001.png" alt><br><strong>解释：</strong></p><p>System 是系统类。</p><p>out 是标准输出对象</p><p>println() 是一个方法。</p><p>如果我们想要在一个类中实现很多功能，但是如果我们想要，多次使用，某一个功能，显然我们需要重复书写这个功能的代码多次，显然，这是不明智的。所以方法就来拯救我们了。</p><h4 id="❤-3-1-1方法的基本定义"><a href="#❤-3-1-1方法的基本定义" class="headerlink" title="❤ 3.1_1方法的基本定义"></a>❤ 3.1_1方法的基本定义</h4><p>定义：方法是定义在类中的一段独立的代码块，用来实现某个功能。</p><p>其实我们在编程界中更喜欢叫它们为函数，但是在Java中我们也可以叫做方法</p><p>作用：</p><p>·函数的主要作用是为了提高代码的复用性。</p><p>·使程序简短而清晰，更加利于维护</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-002.png" alt="img"> </p><p><strong>A：修饰符： public static （暂时了解这一个 后期补充）</strong></p><p><strong>B：返回值类型： 就是功能结果的数据类型</strong></p><p><strong>有一些方法执行代码中的命令即可，执行后就可以结束了，并没有返回值（void）</strong></p><p><strong>有一些方法需要将最后的结果返回给你，从而让开发者使用这个结果</strong></p><blockquote><p>举例更好理解哦：最近有一场周杰伦的演唱会，我通过好多朋友帮忙一起的抢票方法，最后得到了两张票，这两张票就是“抢票”方&gt;法的返回值，我（开发者）可以对这个返回值进行任何操作，例如自己去看，或者送给朋友，甚至可以用来当草稿纸（哭…）</p></blockquote><p><strong>C：参数类型：参数的数据类型</strong></p><p>主方法可以调用其他方法，其他方法可以互相调用，但不能调用主方法，主函数是系统调用的。</p><h4 id="❤-3-1-方法（函数）的调用方法："><a href="#❤-3-1-方法（函数）的调用方法：" class="headerlink" title="❤ 3.1_方法（函数）的调用方法："></a>❤ 3.1_方法（函数）的调用方法：</h4><p><img src="http://image.ideal-20.cn/basic/1.1-04-003.png" alt> </p><p>A：单独使用，一般来说没有意义（不代表有错），所以不推荐</p><p>B：输出调用，但是不够好，因为我们可能需要针对结果进行进一步操作</p><p><strong>C：赋值语句，推荐方案。</strong></p><p><strong>方法的调用优化：</strong></p><p><strong>Eg：比较两个数是否相等（在没有熟练之前我们仍然推荐使用初始直观的用法，程序可以正常的跑是我们的底线）</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-004.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-005.png" alt></p><h4 id="❤-3-1-3-方法重载"><a href="#❤-3-1-3-方法重载" class="headerlink" title="❤ 3.1_3 方法重载"></a>❤ 3.1_3 方法重载</h4><p>一般来说，我们都是根据作用来命名方法（方法名有意义），但是很多时候会我们会针对<strong>不同的数据类型，或者参数个数</strong>来进行操作，例如我们所要求几个数字中的最大值问题（如下图）就出现了这两种问题。<strong>使用方法重载，既可以保证命名有意义，也可以避免记忆过多的不同名称</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-006.png" alt></p><p>定义：用同一方法名定义多个方法，这些方法的参数个数或者参数类型不同</p><p>作用：使一个方法名赋予新的含义，使一个方法名可以多用</p><p>适用：实现细节不同的同一类功能时候</p><p><strong>理解：</strong>其实就是使得一个方法拥有了<strong>更多的可能性</strong>，一个名称解决多种问题。</p><p>注意：</p><ol><li><p>函数的返回类型不同，但参数个数和类型相同，不是重载</p></li><li><p>重载函数的的参数个数，参数类型，参数顺序至少有一个需要不同</p></li></ol><h3 id="3-2数组"><a href="#3-2数组" class="headerlink" title="3.2数组"></a>3.2数组</h3><blockquote><p>引文：我们在篮球场比赛中，梦之队运动员共有10名，我们分别将每个人定义为几号运动员，这样我们找某一个人的时候，我们就会先找到梦之队这支队伍，然后去找对应编号的人。<br>而数组就像这只队伍的概念一样，而数组中的每一个元素就是每一个球员，当你需要找数组的某一个元素的时候，只需要找到你需要查找的数组（梦之队），再根据数组下标（对应编号）去寻找对应元素（球员）。<br>这样做的好处就是，我们将一批同类型的元素整理归纳到了一起，并且标号记录。<br>既方便了查找与使用，又避免了定义多个变量的麻烦。<br><strong>概念：</strong>以存储一个固定大小的相同类型元素的顺序集合。</p></blockquote><p><strong>数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。</strong></p><p>（所有的数组都是由连续的内存位置组成）</p><p><strong>格式：</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-007.png" alt> </p><p>第一种读法：定义一个 dataType类型的数组 arrayRefvar 变量</p><p>第一种可以认为是java风格的定义格式，推荐第一种，不过也只是编程风格不同罢了。</p><p><strong>初始化：</strong></p><ul><li><p><strong>A：概念：</strong>为数组开辟内存空间，为每个数组元素赋予值（内存分配问题就在下面哦）</p></li><li><p><strong>B：方式：</strong></p><ul><li><p>a：动态初始化 → 只指定长度，由系统给出初始化值</p></li><li><p>b:静态初始化 → 给出初始化值，由系统决定长度</p></li></ul></li><li><p><strong>A：动态初始化格式：</strong></p></li></ul><p>数据类型 [] 数组名 = new 数据类型 [数组长度];</p><p>Eg： int [] arr = new int [3];</p><ul><li><strong>B：静态初始化格式：</strong></li></ul><p>数据类型 [] 数组名 = new 数据类型 [] {元素1，元素2，…};</p><pre class=" language-java"><code class="language-java">Eg：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>简化格式：</strong></p><p>数据类型 [] 数组名 = {元素1，元素2，…};</p><pre class=" language-java"><code class="language-java">Eg：<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>数组的访问：</strong></p><p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 数组长度-1。（这只球队可是有0号选手的哦吼~）</p><p>进阶补充知识：</p><blockquote><p>在Java中，数组是一种效率最高的存储和随机访问对象的引用序列的方式。数组就是一个简单的线性序列，这使得元素访问非常快速。但是为这种速度所付出的代价是数组对象的大小被固定，并且在其生命周期中不可改变。你可能会建议使用ArrayList，它可以通过创建一个新实例，然后把旧实例中所有的引用到移到新实例中，从而实现更多空间的自动分配。尽管通常应该首选ArrayList而不是数组、但是这种弹性需要开销，因此，ArrayList的效率比数组低很多。</p></blockquote><blockquote><p>——Thinking in Java 第16章</p></blockquote><h3 id="❤-3-2-1-java中的内存分配"><a href="#❤-3-2-1-java中的内存分配" class="headerlink" title="❤ 3.2_1 java中的内存分配"></a>❤ 3.2_1 java中的内存分配</h3><p>Java为了对数据进行空间分配而划分的<strong>5个内存空间</strong></p><table><thead><tr><th><strong>栈区（stack area）</strong></th><th>函数中定义的基本类型变量，对象的引用变量（对象在堆上的地址）都在函数的栈内存中分配。</th></tr></thead><tbody><tr><td>栈内存特点，数数据一执行完毕，变量会立即释放，节约内存空间。</td><td></td></tr><tr><td>栈内存中的数据，没有默认初始化值，需要手动设置。</td><td></td></tr><tr><td><strong>堆区（heap area）</strong></td><td>堆内存用来存放new创建的对象和数组。</td></tr><tr><td>堆内存中所有的实体都有内存地址值。</td><td></td></tr><tr><td>堆内存中的实体是用来封装数据的，这些数据都有默认初始化值。</td><td></td></tr><tr><td>堆内存中的实体不再被指向时，JVM启动垃圾回收机制，自动清除，这也是JAVA优于C++的表现之一（C++中需要程序员手动清除）。</td><td></td></tr><tr><td><strong>方法区（**</strong>Method Area<strong>**）</strong></td><td>存储所有类（class）和静态变量（static）</td></tr><tr><td><strong>本地方法区 （**</strong>Native Method Area<strong>**）</strong></td><td>后期补充</td></tr><tr><td><strong>寄存器</strong></td><td>后期补充</td></tr></tbody></table><h4 id="❤-3-2-2常见数组练习"><a href="#❤-3-2-2常见数组练习" class="headerlink" title="❤ 3.2_2常见数组练习"></a>❤ 3.2_2常见数组练习</h4><p><strong>(一) 遍历数组</strong></p><p><strong>理解：</strong>简单来说就是把数组中的每一个元素都读一遍**，你可以对数组中的每一个数进行处理，又或者找到数组中那个你需要的数。</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-008.png" alt></p><p>但是有时候就想鸭，每一次我的数组元素数量较少的时候还可以，我数一数有多少个元素也就知道我需要遍历多少次了，但是如果数组元素太多呢，又或者我把遍历数组编写成一个方法，参数就是一个数组，不同的数组（元素数量不同），很显然需要遍历的次数是不灵活的，所以我们介绍一个更为灵活的属性——length</p><p><strong>针对元素数量较多的数组</strong> 可以使用 <strong>length属性 获取数组的长度</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-009.png" alt></p><p><strong>(二) 获取数组中的最小值或最大值</strong></p><p>思路：</p><p>从数组中任意找一个元素作为参照物</p><p>然后遍历其他的元素</p><p>一次获取和参照物进行比较，如果大就留下来，如果小就离开</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-010.png" alt></p><p><strong>(三) 数组逆序</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-011.png" alt></p><h4 id="❤-3-2-3-For-Each-循环"><a href="#❤-3-2-3-For-Each-循环" class="headerlink" title="❤ 3.2_3 For-Each 循环"></a>❤ 3.2_3 For-Each 循环</h4><p>JDK 1.5 引进了一种新的循环类型，被称为 <strong>For-Each 循环</strong>或者<strong>增强For循环</strong>， 它能在不使用下标的情况下遍历数组。</p><p><strong>格式：</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-012.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-013.png" alt> </p><p><strong>它的功能强大就在于不必为了下标的起始值和终止值而分心，代码更加简洁，更不容易出错。</strong></p><p>事物总是有两面性的，<strong>虽然增强for循环带来了简洁和快速，但是并不是万能的，有的时候我们必须使用传统的for循环，例如不希望遍历每一个元素，或者在循环内部需要使用下标等。</strong></p><p>补充：</p><p>如果仅仅是想要打印数组中的所有值，我们可以利用Arrays类中的toString方法</p><p>输出后格式如下：“[1，3，6，5，6]”</p><h4 id="❤-3-2-4排序方法"><a href="#❤-3-2-4排序方法" class="headerlink" title="❤ 3.2_4排序方法"></a>❤ 3.2_4排序方法</h4><p>贫穷使我面目全非……〒_〒</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-014.png" alt></p><blockquote><p>假如我想在某宝买一本五年高考，三年模拟（搞笑脸），又担心买到的不是正版印刷（再次搞笑），我们可以选择销量优先展示商品，而我们又嫌贵又渴望知识的时候（哈哈哈~），我们又可以选择价格从低到高排序展示商品。</p></blockquote><p><img src="http://image.ideal-20.cn/basic/1.1-04-015.png" alt> </p><p>那么，网站是如何做到快速将商品按照某种规则排序的呢？</p><p>下面我们就来介绍几种常见的排序方法</p><p><strong>数组是用来存储一些数据的“容器”，可能我们需要将其中的元素，按照我们一定的规则进行处理，使其成为有序的序列。</strong></p><hr><p><strong>(一) 冒泡排序</strong></p><p>我们先通过一个直观的例子来看一这种排序方法是如何操作的呢</p><p>要排序的数组 int[] = {3, 9, 6, 5};</p><pre><code>第一趟排序：第一次排序：3和9比较，3小于9，不交换位置：3 9 6 5第二次排序：9和6比较，9大于6，交换位置：3 6 9 5第二次排序：9和5比较，9大于5，交换位置：3 6 5 9————————————————————————————第二趟排序：第一次排序：3和6比较，3小于6，不交换位置：3 6 5 9第二次排序：6和5比较，6大于5，交换位置：3 5 6 9————————————————————————————第三趟排序：第一次排序：3和5比较，3小于5，不交换位置：3 5 6 9</code></pre><p>根据上例的规律，我们得到了冒泡排序的原理：</p><p><strong>重复地走访要排列的元素列，一次比较两个相邻的元素，如果它们的顺序错误则交换</strong></p><p><strong>走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序 完成。</strong></p><hr><p>为了理解这个看起来很复杂的定义，我们来梳理一下上面的例子：</p><p>第一趟：经过三次排序，得到结果：3 6 5 9</p><p>第二趟：经过两次排序，得到结果：3 5 6 9</p><p>第三趟：经过一次排序，得到结果：3 6 5 9</p><p>(第三趟也是存在的只不过是，在第二趟的时候结果已经符合规定)</p><p>我们通过梳理可以看到</p><p>我们在第一趟中，4个数字，经历了3次排序，确定了最大值</p><p>在第二趟中，3个数字（最后一位已经确定，所以不计），经历了2次排序，确定了最大值</p><p>在第三趟中，2个数字（倒数两位已经确定，所以不计），经历了1次排序，确定了最大值</p><p><strong>慢慢的最大值或者最小值（根据排序规则）会像气泡一样浮到数列的顶端，故得名冒泡排序</strong></p><hr><p><strong>思路</strong></p><ul><li><p><strong>外层循环：控制它要走几次</strong><br> 假设你有5个数，那就要走4次，最后一次不用走，最后那个数已  经在它位置了所以就要length-1次 </p></li><li><p><strong>内层循环：控制逐一比较，如果发现前一个数比后一个数大，则交换</strong><br> 注意！因为越比较长度就越小了，所以长度要length-1-i</p><p>所以：n个元素进行排序，我们需要进行n-1 趟，每一趟循环 lenght-1-i次</p></li></ul><p>Ps：length-1代表最后一项，数组下标从0开始</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-016.png" alt> </p><p>冒泡排序只是我们众多排序中的一种比较简单的方法（效率不是很高，但入门必须学习）</p><p>其他的排序方法，我们放到板块数据结构与算法中详细讲解</p><p>要想对数值型数组进行排序，可以使用<strong>Array类中的sort方法</strong></p><p><strong>格式：int[] arr = new int [520];</strong></p><p>……..</p><p>Array.sort(arr)</p><p><strong>sort方法本质是快速排序算法（高效快速）</strong></p><h4 id="❤-3-2-5二维数组"><a href="#❤-3-2-5二维数组" class="headerlink" title="❤ 3.2_5二维数组"></a>❤ 3.2_5二维数组</h4><p><strong>具有两个下标的数组称为二维数组。有些数据要依赖于两个因素才能惟一地确定</strong></p><p>例如我们下面的这个案例一个班级有三个学生，每个学生又对应四科成绩，所以我们必须用一个二维数组来存储，第一项储存学生信息，第二项存储成绩信息</p><table><thead><tr><th>Student Number</th><th>Course1</th><th>Course2</th><th>Course3</th><th>Course4</th></tr></thead><tbody><tr><td>Student1</td><td>55</td><td>66</td><td>58</td><td>77</td></tr><tr><td>Student2</td><td>87</td><td>58</td><td>48</td><td>64</td></tr><tr><td>Student3</td><td>65</td><td>78</td><td>70</td><td>56</td></tr></tbody></table><p><img src="http://image.ideal-20.cn/basic/1.1-04-017.png" alt> </p><p><img src="http://image.ideal-20.cn/basic/1.1-04-018.png" alt></p><p>Java中，二维数组中元素排列的顺序是：</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-019.png" alt> </p><p><strong>定义格式：</strong></p><p><strong>A:</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-020.png" alt></p><p><strong>B：</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-021.png" alt></p><p><strong>从最高维开始</strong>，分别为每一维分配空间</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-022.png" alt></p><p>如果想要在定义的时候就直接赋值，格式见例题中的示例</p><h4 id="❤-3-26-常见二维数组练习"><a href="#❤-3-26-常见二维数组练习" class="headerlink" title="❤ 3.26 常见二维数组练习"></a>❤ 3.26 常见二维数组练习</h4><p>（一）<strong>遍历二维数组</strong></p><p><strong>(一) 普通for循环版</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-023.png" alt></p><p><strong>(二) 增强for循环版</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-024.png" alt></p><p><strong>(三) Arrays类中的deepToString()方法</strong></p><p>这个方法可以快速 打印一个二维数组的数据元素列表</p><p>（二）<strong>输出杨辉三角</strong></p><p> <img src="http://image.ideal-20.cn/basic/1.1-04-025.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.1-04-026.png" alt></p><h3 id="3-3补充问题"><a href="#3-3补充问题" class="headerlink" title="3.3补充问题"></a>3.3补充问题</h3><h4 id="❤-3-3-1参数传递问题"><a href="#❤-3-3-1参数传递问题" class="headerlink" title="❤ 3.3_1参数传递问题"></a>❤ 3.3_1参数传递问题</h4><p>开局一张图，内容全靠编~</p><p>有了前面知识的一些铺垫，我们终于可以引出这个问题了,诺，下面题目中利用方法重载给出了两个不同参数的change方法，分别在主函数中输出调用方法前和后的数据，看一看输出的数据和我们所想的一样吗？</p><blockquote><p>小白：变量a和b在change方法中已经被重新赋值了，第二局输出那必然是 a=20, b=40<br><br>大佬：错！错！错！正确结果为输出 a=10, b=20</p></blockquote><blockquote><p>小白：虽然我也不太明白，但是有了第一个的经验，那我第二个我还不会吗，arr[1] 当然是2了<br><br>大佬：em……答案是4…….</p></blockquote><p>（绝望脸…）</p><p>然后我们通过一张图来分析一下这个问题</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-028.png" alt><strong>解释：</strong></p><p><strong>当基本类型作为形式参数的时候</strong>，实际参数（也就是主方法中的10和20）的值传到了 这个方法中，无论其如何操作运算，<strong>均只是对被传入的值进行操作，方法结束后即消失</strong>， 不会对实际参数有任何的影响</p><p><strong>当引用类型作为形式参数的时候</strong>，<strong>实际参数和形式参数均指向了同一个地址</strong>，所以形式 参数的改变会直接影响到实际参数</p><p><strong>总结：</strong></p><p><strong>基本类型：形式参数的改变对实际参数没有影响</strong></p><p><strong>引用类型：形式参数的改变直接影响实际参数</strong></p><h4 id="❤-3-3-2-加密问题（作为练习）"><a href="#❤-3-3-2-加密问题（作为练习）" class="headerlink" title="❤ 3.3_2 加密问题（作为练习）"></a>❤ 3.3_2 加密问题（作为练习）</h4><p>加密规则： 将数据倒序，然后将每位数字都加上5，再用和除以10的余数    代替该数字，最后将第一位和最后一位数字交换</p><p><img src="http://image.ideal-20.cn/basic/1.1-04-029.png" alt></p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.1-Java基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 方法 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003-Java基础语法</title>
      <link href="/2019/09/16/1.1-java-ji-chu-zhi-shi/003-java-ji-chu-yu-fa/"/>
      <url>/2019/09/16/1.1-java-ji-chu-zhi-shi/003-java-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/basic/1.1-01-001.png" alt></p><h1 id="第一阶段-JAVA基础知识"><a href="#第一阶段-JAVA基础知识" class="headerlink" title="第一阶段 JAVA基础知识"></a>第一阶段 JAVA基础知识</h1><h2 id="第二章-Java基础语法知识"><a href="#第二章-Java基础语法知识" class="headerlink" title="第二章 Java基础语法知识"></a>第二章 Java基础语法知识</h2><p>在我们开始讲解程序之前，命名规范是我们不得不提的一个话题，虽说命名本应该是自由的，但是仍然有一定的“潜规则”，通过你对命名的书写，别人一眼就能看出你是不是一个“行家”。我们先来看一下有哪些规则。</p><table><thead><tr><th>A：包名：</th><th>全部小写用.隔开  eg： com.ideal.www</th></tr></thead><tbody><tr><td><strong>B:类名</strong>或<strong>接口：</strong></td><td>类的首字母大写。如果类名由若干个单词组成，那么每个单词首字母大写。</td></tr><tr><td><strong>C: 方法</strong>或<strong>变量名：</strong></td><td>所有的方法名都应该小写字母开头。如果方法名     含有若干个单词，那么其后每个单词首字母大写。</td></tr><tr><td><strong>D:</strong> <strong>常量名：</strong></td><td>全部大写 用 _ 隔开</td></tr></tbody></table><table><thead><tr><th>E：原文件名：</th><th>原文件名必须和类名相同  类名.java</th></tr></thead><tbody><tr><td><strong>F:</strong> <strong>主方法入口</strong>：</td><td>所有的Java 程序由public static void main(String []args)方法开始执行。</td></tr></tbody></table><p>我们暂时对于这些名词还没有什么概念，但是对于我们前一篇所写到的HelloWorld例程来说，我们就用到了 类名、主方法这两点。</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-001.png" alt> </p><p>HelloWorld 作为类名自然需要满足首字母大写，又由于HelloWorld由两个单词组成，所以两个单词首字母分别大写。</p><h3 id="2-1关键字"><a href="#2-1关键字" class="headerlink" title="2.1关键字"></a>2.1关键字</h3><p>(1) 被Java语言赋予特定含义的单词，他们有着特定的使用位置和方式</p><p>(2) 特点：</p><p>全部小写。</p><p>(3) 注意事项：</p><p>A : goto和const作为保留字存在。</p><p>B : 类似于Notepad++、sublime等编辑器对关键字有特殊颜色标记</p><p>（这是两款和好用的编辑器，可以简单的理解为可以使代码带着好看色彩的高级记事本）</p><table><thead><tr><th><strong>类别</strong></th><th><strong>关键字</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>私有的</td></tr><tr><td>protected</td><td>受保护的</td><td></td></tr><tr><td>public</td><td>公共的</td><td></td></tr><tr><td>类、方法和变量修饰符</td><td>abstract</td><td>声明抽象</td></tr><tr><td>class</td><td>类</td><td></td></tr><tr><td>extends</td><td>扩充,继承</td><td></td></tr><tr><td>final</td><td>最终值,不可改变的</td><td></td></tr><tr><td>implements</td><td>实现（接口）</td><td></td></tr><tr><td>interface</td><td>接口</td><td></td></tr><tr><td>native</td><td>本地，原生方法（非Java实现）</td><td></td></tr><tr><td>new</td><td>新,创建</td><td></td></tr><tr><td>static</td><td>静态</td><td></td></tr><tr><td>strictfp</td><td>严格,精准</td><td></td></tr><tr><td>synchronized</td><td>线程,同步</td><td></td></tr><tr><td>transient</td><td>短暂</td><td></td></tr><tr><td>volatile</td><td>易失</td><td></td></tr><tr><td>程序控制语句</td><td>break</td><td>跳出循环</td></tr><tr><td>case</td><td>定义一个值以供switch选择</td><td></td></tr><tr><td>continue</td><td>继续</td><td></td></tr><tr><td>default</td><td>默认</td><td></td></tr><tr><td>do</td><td>运行</td><td></td></tr><tr><td>else</td><td>否则</td><td></td></tr><tr><td>for</td><td>循环</td><td></td></tr><tr><td>if</td><td>如果</td><td></td></tr><tr><td>instanceof</td><td>实例</td><td></td></tr><tr><td>return</td><td>返回</td><td></td></tr><tr><td>switch</td><td>根据值选择执行</td><td></td></tr><tr><td>while</td><td>循环</td><td></td></tr><tr><td>错误处理</td><td>assert</td><td>断言表达式是否为真</td></tr><tr><td>catch</td><td>捕捉异常</td><td></td></tr><tr><td>finally</td><td>有没有异常都执行</td><td></td></tr><tr><td>throw</td><td>抛出一个异常对象</td><td></td></tr><tr><td>throws</td><td>声明一个异常可能被抛出</td><td></td></tr><tr><td>try</td><td>捕获异常</td><td></td></tr><tr><td>包相关</td><td>import</td><td>引入</td></tr><tr><td>package</td><td>包</td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>布尔型</td></tr><tr><td>byte</td><td>字节型</td><td></td></tr><tr><td>char</td><td>字符型</td><td></td></tr><tr><td>double</td><td>双精度浮点</td><td></td></tr><tr><td>float</td><td>单精度浮点</td><td></td></tr><tr><td>int</td><td>整型</td><td></td></tr><tr><td>long</td><td>长整型</td><td></td></tr><tr><td>short</td><td>短整型</td><td></td></tr><tr><td>变量引用</td><td>super</td><td>父类,超类</td></tr><tr><td>this</td><td>本类</td><td></td></tr><tr><td>void</td><td>无返回值</td><td></td></tr><tr><td>保留关键字</td><td>goto</td><td>是关键字，但不能使用</td></tr><tr><td>const</td><td>是关键字，但不能使用</td><td></td></tr><tr><td>null</td><td>空</td><td></td></tr></tbody></table><h3 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h3><p>(1)就是给类，接口，方法，变量等<strong>起名字</strong>的字符序列</p><p>(2)组成规则：</p><p><strong>A: 首字符：</strong>字母（A-Z、a-z）、美元符（$）、下划线（_）</p><p><strong>B: 首字符之后：</strong>字母（A-Z、a-z）、美元符（$）、下划线（_）或者<strong>数字</strong>的任何字符组合</p><p>(3)注意事项：</p><p>A:不能以数字开头</p><p>B:关键字不能作为标识符</p><p>C:区分大小写</p><h3 id="2-3-注释"><a href="#2-3-注释" class="headerlink" title="2.3 注释"></a>2.3 注释</h3><p>  ( 讨厌写自己写注释，讨厌别人不写注释 ~）</p><p>注释就是为了方便自己或别人后期阅读这部分代码的提示，能够快速的让阅读者，了解这部分代码的作用。</p><p>(1)<strong>注释就是对程序进行解释说明的文字（不会被编译运行）</strong></p><p>(2)分类：</p><p><strong>A:单行注释 // + 内容</strong></p><p><strong>B:多行注释 /*内容*/</strong></p><p>C:文档注释 /** */ 被javadoc工具解析成一个说明书，后期会讲到</p><p>在我们前期的学习中，只需要掌握基本的<strong>单行注释</strong>和<strong>多行注释</strong>即可</p><p><strong>注释规范：</strong></p><p>1、<strong>类注释  注释模板如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** Copyright (C), 2006-2010, ChengDu Lovo info. Co., Ltd.* FileName: Test.java* 类的详细说明** @author 类创建者姓名* @Date    创建日期* @version 1.00*/</span></code></pre><p>2、<strong>属性注释 注释模板如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 提示信息 */</span><span class="token keyword">private</span> String strMsg <span class="token operator">=</span> null<span class="token punctuation">;</span></code></pre><p>3、<strong>方法注释  注释模板如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 类方法的详细使用说明** @param 参数1 参数1的使用说明* @return 返回结果的说明* @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明*/</span></code></pre><p>4、<strong>构造方法注释  注释模板如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 构造方法的详细使用说明** @param 参数1 参数1的使用说明* @throws 异常类型.错误代码 注明从此类方法中抛出异常的说明*/</span></code></pre><p>5、<strong>方法内部注释  在方法内部使用单行或者多行注释</strong></p><p><strong>（根据实际情况添加）注释模板如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//背景颜色Color bgColor = Color.RED</span></code></pre><h3 id="2-4-常量"><a href="#2-4-常量" class="headerlink" title="2.4 常量"></a>2.4 常量</h3><p><strong>(1) 常量就是在程序执行的过程中，其值不发生改变的量</strong>（例如π、重力加速度，光速等）</p><p>而在Java中我们使用final关键字来修饰常量</p><p>Eg：final double PI = 3.1415927</p><p>习惯 ：虽然常量名也可以用小写，但为了便于识别，通常使用大写字母   表示常量(随大流就好啦)</p><p>(2)分类：</p><p><strong>A:字面值常量</strong></p><p><strong>B:自定义常量</strong></p><p><strong>字面值常量：</strong></p><p>C++ primer：像42这样的值，在程序中被当作字面值常量：字面值是因为仅能用它的值称呼它，常量是因为它的值不能修改。每个字面值都有相应的类型，例如：0是int型，3.14159是double型。字面值仅存在于内置类型，没有类类型的字面值。因此，也没有任何标准库类型的字面值</p><p><strong>简单理解：例如 int a = 6; 它的字面值就是a， 它的实际值是 6</strong></p><p><strong>(3)字面值常量</strong></p><p>A:字符串常量 “bwh”</p><p>B:整数常量 666,888</p><p>C:小数常量 123.456</p><p>D:字符常量 ‘a’,’Z’,’0’</p><p>E:布尔常量 true,false</p><p>F:空常量 null</p><p><strong>(4)在Java中针对整数常量提供了四种表现形式</strong></p><p><strong>A:二进制</strong> 由0，1组成。以<strong>0b开头</strong>。</p><p><strong>B:八进制</strong> 由0，1，…7组成。以<strong>0开头</strong>。</p><p><strong>C:十进制</strong> 由0，1，…9组成。整数默认是十进制。</p><p><strong>D:十六进制</strong> 由0，1，…9,a,b,c,d,e,f(大小写均可)组成。以<strong>0x开头</strong>。</p><p><strong>A：常见进制</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-002.png" alt></p><p>常见进制的转化：</p><p>常见进制 → 十进制 ： 忽略前缀和0，对1进行运算</p><pre><code>0b10101 （二进制）= 12^4 + 12^3 + 1*2^0= 16 + 14 + 1= 210123 （八进制）= 18^2 + 28^1 + 3*8^0= 64 + 16 + 3= 830x3c （十六进制）= 316^1 + 1216^0= 48 + 12=60</code></pre><p><strong>十进制  → 常见进制 ：</strong></p><p><strong>除基取余，直到商为0，余数反转。（转换几进制就将基数除以几）</strong></p><p>其他进制的转换可以通过十进制这个中间进制进行转换</p><p>熟悉2的倍数对我们也是很有帮助的</p><p><strong>B: 补充：补码、原码、反码</strong></p><p>为什么我们要学习这些呢？首先我们要知道，在计算机内，有符号数有三种表示方法，源码、反码、和补码。而<strong>所有的数据运算都是采用补码进行的</strong>。它的重要性可想而知。</p><p><strong>1、原码：</strong>二进制点表示法，最高位为符号位，“0”表示正，“1”表示负，其   余位置表示数值大小，可直观反映出数据的大小。</p><p><strong>2、反码：</strong>解决负数加法运算问题，将减法运算转换为加法运算，从而简化运算规则。</p><p><strong>3、补码：</strong>解决负数加法运算正负零问题，弥补了反码的不足。</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-003.png" alt></p><p>7的二进制 ：111</p><table><thead><tr><th>原码</th><th>正数的原码最高位是0的原码最高位是1其他的是数值位</th><th></th></tr></thead><tbody><tr><td></td><td>符号位</td><td>数值位数</td></tr><tr><td>+7</td><td>0</td><td>0000111（补够8个字节，在左面补4个0）</td></tr><tr><td>-7</td><td>1</td><td>0000111</td></tr></tbody></table><table><thead><tr><th>反码</th><th>正数的反码与原码相同负数的反码与源码符号位相同，数值位取反1 → 0 、 0 → 1</th><th></th></tr></thead><tbody><tr><td></td><td>符号位</td><td>数值位数</td></tr><tr><td>+7</td><td>0</td><td>0000111（补够8个字节，在左面补4个0）</td></tr><tr><td>-7</td><td>1</td><td>1111000</td></tr></tbody></table><table><thead><tr><th><strong>补码</strong></th><th>正数的补码与原码相同负数的补码是在反码的基础上+1</th><th></th></tr></thead><tbody><tr><td></td><td>符号位</td><td>数值位数</td></tr><tr><td>+7</td><td>0</td><td>0000111（补够8个字节，在左面补4个0）</td></tr><tr><td>-7</td><td>1</td><td>1111001</td></tr></tbody></table><h3 id="2-5-变量"><a href="#2-5-变量" class="headerlink" title="2.5 变量"></a>2.5 变量</h3><p>我们刚介绍了什么是常量，那么什么是变量呢，顾名思义，<strong>变量就是在某个范围内可以变化的量</strong>，其实它就是一个被你所定义的变量，<strong>在一个数据类型的约束下</strong>，可以在数据类型所允许的范围内进行，被赋值，运算，等操作。</p><p>（变量可以不在定义的时候就赋初始化值，但是在<strong>运行编译时，如果被编译变量仍没被赋值，则是没有意义的，编译器将会报错</strong>）</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-004.png" alt></p><p><strong>格式： 数据类型 变量名 = 初始化值</strong></p><p><strong>注意：可以在一行中声明多个变量，但是我们不推荐这种方式。</strong></p><p><strong>逐一声明变量能提高程序的可读性</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-005.png" alt></p><p><strong>变量类型：</strong></p><ul><li><p>局部变量</p></li><li><p>实例变量</p></li><li><p>类变量（静态变量）</p></li></ul><p><strong>局部变量：</strong>定义在<strong>方法、构造方法、或者语句块中</strong>的变量</p><p>（生而带来 死而带去 只能活在自己的世界）</p><p>只能在一定范围内使用的变量，随着这个方法等的结束变量也就无效了</p><p>对于局部变量的理解，刚入门可能也不会太深，等后面几篇我们学习到方 法后，再回过头来看这部分内容，就会有一种明了的感觉。</p><p><strong>实例变量：</strong>声明在类中，但在方法、构造方法和语句块之外</p><p>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见</p><p>暂时在学习基础语法知识的时候可以<strong>暂时忽略</strong>实例变量这部分内容，这部分内容主要被使用在<strong>面向对象</strong>的部分，但是<strong>极其重要。</strong></p><p><strong>过了很久，你也不愿回头看，学习的进度就会很慢~</strong></p><p>类变量：    后期补充</p><h3 id="2-6-数据类型"><a href="#2-6-数据类型" class="headerlink" title="2.6 数据类型"></a>2.6 数据类型</h3><h5 id="❤-2-6-1"><a href="#❤-2-6-1" class="headerlink" title="❤ 2.6.1"></a>❤ 2.6.1</h5><p> Java是一种强类型的语言，针对每一种数据都定义了明确的数据类型（就是将一些值的范围做了约束，从而为不同类型的值在内存中分配不同的内存空间）</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-006.png" alt> </p><p><strong>注意：</strong>在此部分暂时不用深究引用类型，着重认熟悉一下基本数据类型，引用类型在面向对象的部分会详细解释。</p><p>我们来看一下<strong>八种基本数据类型</strong>的详细说明：</p><table><thead><tr><th>Name</th><th>Size*</th><th>Rang</th></tr></thead><tbody><tr><td><strong>byte</strong></td><td>1byte|8bit</td><td>存放的数据范围是-128~127之间</td></tr><tr><td><strong>short</strong></td><td>2bytes|16bit</td><td>最大数据存储量是65536，数据范围是-32768~32767之间。</td></tr><tr><td><strong>int</strong></td><td>4bytes|32bit</td><td>数据范围是负的2的31次方到正的2的31次方减1。</td></tr><tr><td><strong>long</strong></td><td>4bytes|64bit</td><td>数据范围为负的2的63次方到正的2的63次方减1。</td></tr><tr><td><strong>float</strong></td><td>4bytes|32bit</td><td>数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F</td></tr><tr><td><strong>double</strong></td><td>8bytes|64bit</td><td>数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。</td></tr><tr><td><strong>boolean</strong></td><td></td><td>只有true和false两个取值。</td></tr><tr><td><strong>char</strong></td><td>2bytes</td><td>存储Unicode码，用单引号赋值。</td></tr></tbody></table><p>注意：</p><ul><li><p>整数默认是int类型</p><p>声明long型常量的时候长整数要加L或者l</p><p>如：long l = 66666666666666L//否则报错</p></li><li><p>浮点数默认是double（双精度浮点型）</p><p>声明float型（单精度的浮点数）要加F或者</p><p>如：double d = 521.1 //正确 float f = 52.1f //必须加f</p></li><li><p>boolean一般用来进行逻辑运算→流程控制中</p></li><li><p>Byte、short类型被赋值时，其实接收的是一个int类型的值，不 在范围内即报错</p></li><li><p>一个中文字符占据两用字节，Java中字符可以存储一个汉字，是 因为Java字符采用<strong>Unicode编码</strong>，每个字符占用两个字节。</p></li><li><p>Java中提供了三个特殊的浮点数值，正无穷大（正数除以0），负无穷大（负数除以0），NaN（不是一个数字,0除以0，负数开根号）</p></li></ul><h4 id="❤-2-6-2数据类型转换"><a href="#❤-2-6-2数据类型转换" class="headerlink" title="❤ 2.6.2数据类型转换"></a>❤ 2.6.2数据类型转换</h4><p>一般来说，我们在运算的时候，要求参与运算的数值类型必须一致</p><p><strong>(1)</strong> 默认转换（从小到大的转换）—自动类型转换**</p><p>A：byte，short,  char  （ → int → long → float → double ）</p><p>B：byte，short,  char  相互之间不转换</p><p>他们参与运算首先转换为int类型</p><p><strong>疑惑：**</strong>为什么 float（4个字节）在 long（8个字节）后面**</p><p><strong>A: 它们底层的存储结构不同</strong></p><p><strong>B:  float表示的数据范围比long范围要大</strong></p><pre><code>long：2^63-1float：3.410^38  &gt;  210^38  &gt; 28^38  &gt; 22^3^38= 2*2^144  &gt; 2^63 -1</code></pre><p><strong>例子一 ：低精度byte到高精度int 会根据默认转换，自动转换类型</strong></p><p> <img src="http://image.ideal-20.cn/basic/1.1-03-007.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-008.png" alt></p><p><strong>例子二 ：高精度int到低精度byte 可能会损失精</strong>度</p><p> <img src="http://image.ideal-20.cn/basic/1.1-03-009.png" alt></p><p> <img src="http://image.ideal-20.cn/basic/1.1-03-010.png" alt></p><p>byte数据类型是 1个字节、8位</p><p>int  数据类型是 4个字节、32位</p><p>但是有没有办法能够让我们输出这种运算的结果呢？这就需要我们用到强制类型转换的知识。</p><p><strong>(2) 强制类型转换</strong></p><p> <strong>格式：目标数据类型 变量 = （目标数据类型）（被转换的数据）</strong></p><p><strong>注意：</strong>不要随便的去用强制转化，因为它隐含了精度损失的问题</p><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p><p>例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>   <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span></code></pre><p>因为byte类型是8位，最大值为127，所以当int强制转换为byte类</p><p>型的时候，值128就会导致溢出</p><p><strong>很经典的题目 1： 永远做不对系列</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-011.png" alt></p><p>第一句： byte类型的 b1 ,b2相加 自动类型转换为 int型</p><p>int类型的（b1 + b2） 赋值给byte类型的b</p><p>属于大单位转换为小单位 可能造成精度损失</p><p>第二句： 3 和4 为常量，编译过程中 先把结果计算出来，</p><p>然后看是否在byte的范围内，如果在就不报错</p><p><strong>总结：</strong></p><p>变量相加，会首先看类型问题，最终把结果赋值也会考虑类型问题</p><p>常量相加，首先做加法，然后看结果是否在赋值的数据类型范围内，如果不是，才报错</p><p><strong>很经典的题目 2： 永远不会做系列</strong></p><p><strong>求输出结果：</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-012.png" alt></p><p>分析过程：</p><p>我们想要知道结果是什么，就应该知道是如何计算的</p><p>而我们又知道<strong>计算机中数据的运算都是补码进行的</strong></p><p>得到补码，首先要计算出数据的二进制</p><ul><li><p>A:  求出130的二进制 10000010</p><p>​     130 是一个整数 所以补齐4个字节 （一个字节8位）</p><p>​     0000000  00000000  00000000  10000010</p></li><li><p>B: 做截取操作，截成byte类型的了</p><p>​    10000010</p><p>​    这个结果是补码</p></li><li><p>C: 已知补码求原码。</p></li></ul><table><thead><tr><th></th><th><strong>符号位</strong></th><th><strong>数值位</strong></th></tr></thead><tbody><tr><td>补码：</td><td>1</td><td>0000010</td></tr><tr><td>反码：</td><td>1</td><td>0000001</td></tr><tr><td>原码</td><td>1</td><td>1111110</td></tr><tr><td>11111110转换为十进制为 -126</td><td></td><td></td></tr></tbody></table><h3 id="2-7-字符"><a href="#2-7-字符" class="headerlink" title="2.7 字符"></a>2.7 字符</h3><p><strong>字符</strong>是指在计算机中所使用的 字母、数字、汉字、和符号，表示时用单引号包含在内。</p><p>例如： ‘5’ ‘R’ ‘。’均是字符</p><p>在内存中，字符数据以ASCII码存储 ，即以整数表示</p><p>需要记忆的常见字符‘a’→ 97   ‘A’→ 65  ‘0’→ 48</p><p>其余字符依次递推即可</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-013.png" alt> </p><p><strong>一种特殊的字符——转义字符</strong></p><p>转移字符 = 转义 + 字符 → 转变含义的字符（不再是本来字符的意思）</p><p>结构：<strong>\ + 一些特定的字母</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-014.png" alt> </p><p><strong>其中 \n （换行）和 \t（制表符）最为常用</strong></p><p>(一) 下面两种输出变量love的方法均有换行效果</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-015.png" alt> </p><p><strong>补充： \r和 \n的区别</strong></p><p>回车 \r 意思是<strong>光标重新回到本行的开头</strong></p><p>换行 \n <strong>光标移动到下一行</strong>，<strong>不一定是行首</strong>,取决于其后是否还有内容</p><p>(因为我们常用在一行的句末，所以会误以为会在下一行的行首)</p><p><strong>针对不同系统的换行符：</strong></p><pre><code>苹果系统Mac \nUnix、Linux系统 \nWindows系统 \r\n</code></pre><p>在windows中，如果在两端字符串的中间使用转义字符，<strong>只有使用 \r\n才能真正的达到了我们日常操作中，回车换行的那种效果</strong>。</p><p><strong>(一) \t是补全当前字符串长度到8</strong>，最少1个，最多8个空格</p><p>所以灵活的使用制表符可以达到对齐两行数据的作用</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-016.png" alt> </p><p><img src="http://image.ideal-20.cn/basic/1.1-03-017.png" alt> </p><h3 id="2-8-字符串"><a href="#2-8-字符串" class="headerlink" title="2.8 字符串"></a>2.8 字符串</h3><p><strong>字符串是由零个或者多个字符组成的有限序列</strong>，它是编程中表示文本的数据类型</p><p>字符串使用的时候用双引号括起来</p><p>String并不是Java中的基本方法，而是一个类。</p><p>我们在此部分不做过多的介绍，但要知道，String类是一个非常非常重要的类！！！</p><p>我们会在后面有专门一大篇介绍</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-018.png" alt></p><p><strong>总结：</strong></p><p>字符串和其他数据做加法运算的时候，结果是字符串类型。</p><p>这里的 + 不是加法运算，而是字符串连接符</p><h3 id="2-9-运算符"><a href="#2-9-运算符" class="headerlink" title="2.9 运算符"></a>2.9 运算符</h3><ul><li><p>算数运算符</p></li><li><p>赋值运算符</p></li><li><p>比较运算符</p></li><li><p>逻辑运算符</p></li><li><p>位运算符</p></li><li><p>三目运算符</p></li></ul><h4 id="❤-2-9-1-算数运算符：-–"><a href="#❤-2-9-1-算数运算符：-–" class="headerlink" title="❤ 2.9.1 算数运算符： +   -  *  /  %  ++  –"></a>❤ 2.9.1 算数运算符： +   -  *  /  %  ++  –</h4><p>A:  整数相除只能得到整数（想得到小数 需将其中任意的一个数据变成浮点数）</p><p>Eg：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">/</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  →System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>B:  <strong>/</strong>除法求商 <strong>%</strong>除法取余</p><p>C:  <strong>++</strong>, <strong>–</strong> 就是对变量进行自增1或者自减1. 参与运算 前置后置有区别</p><p>来一道例题，大家就整明白了：</p><p>Eg : </p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span> x<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token operator">++</span>x <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> x <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>首先 x后置<span class="token operator">++</span> 所以括号<span class="token number">1</span>中 x运算时取<span class="token number">4</span> 然后自增为<span class="token number">5</span>其次 x前置<span class="token operator">++</span> 所以括号<span class="token number">2</span>中 x <span class="token operator">=</span> <span class="token number">6</span>最后 x <span class="token operator">*</span> <span class="token number">10</span>  <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">10</span>  <span class="token operator">=</span> <span class="token number">60</span>Output y → <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">=</span> <span class="token number">70</span></code></pre><h4 id="❤2-92-赋值运算符"><a href="#❤2-92-赋值运算符" class="headerlink" title="❤2.92 赋值运算符"></a>❤2.92 赋值运算符</h4><p><strong>基本的赋值运算符：=</strong></p><p><strong>扩展的赋值运算符：+=，-=，*=，/=，%=</strong></p><p>在刚开始的时候我们书写赋值语句，还是推荐使用 基本的方法，待到日后熟练，再转为扩展的赋值语句</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-019.png" alt> </p><p><strong>很经典的题目 1： 你猜到底对不对</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-020.png" alt></p><p>编译第一个语句报错：</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-021.png" alt> </p><p>编译第二个语句没有报错：（? ? ?）</p><p>扩展的赋值运算符其实隐含了一个强制类型转换</p><p>s += 1； 不是等价于 s = s + 1  而是等价于 s = ( s的数据类型 ) （s + 1）;</p><h5 id="❤-2-9-3关系运算符-gt-gt-lt-lt"><a href="#❤-2-9-3关系运算符-gt-gt-lt-lt" class="headerlink" title="❤ 2.9.3关系运算符 ==, != , &gt; , &gt;= , &lt; , &lt;="></a>❤ 2.9.3关系运算符 ==, != , &gt; , &gt;= , &lt; , &lt;=</h5><p>== 无论你的操作是简单还是复杂木结构是boolean类型</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-022.png" alt> </p><p>Output → flase</p><h4 id="❤2-9-4-逻辑运算符-amp-amp-amp-！"><a href="#❤2-9-4-逻辑运算符-amp-amp-amp-！" class="headerlink" title="❤2.9.4 逻辑运算符  &amp; |   &amp;&amp; || ！"></a>❤2.9.4 逻辑运算符  &amp; |   &amp;&amp; || ！</h4><p><img src="http://image.ideal-20.cn/basic/1.1-03-023.png" alt> </p><p>逻辑运算符用于连接布尔型表达式，在java中。不可以写成3 &lt; x &lt; 6 应该写 成 x &gt; 3 &amp; x &lt; 6</p><p>&amp;&amp;和&amp;的区别？ 同理||和|的区别</p><p>A： 最终结果一样</p><p>B： &amp;&amp;具有短路作用。左边是false，右边不执行。（<strong>&amp;&amp;效率更高</strong>）</p><p><strong>eg：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果</span><span class="token number">4</span><span class="token number">5</span><span class="token boolean">true</span></code></pre><h4 id="❤2-9-5-位运算符"><a href="#❤2-9-5-位运算符" class="headerlink" title="❤2.9.5 位运算符"></a>❤2.9.5 位运算符</h4><p>（3 &amp; 4） （3 | 4） （3 ^ 4） （~3） （3 &lt;&lt; 2） （&gt;&gt;） （&gt;&gt;&gt;）</p><p>因为是位运算，所以我们需要把数据换算成二进制</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-024.png" alt> </p><p>^的特点：一个数据对另一个数据位异或两次，该数本身不变</p><p><strong>很经典的题目 1： 交换两个整型数的值</strong></p><p><strong>做一个灵活的交换者</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-025.png" alt> </p><p><img src="http://image.ideal-20.cn/basic/1.1-03-026.png" alt></p><p><strong>我们先直接给出位运算的结论</strong></p><p> <img src="http://image.ideal-20.cn/basic/1.1-03-027.png" alt></p><p><strong>这是详细的运算过程，但是我们使用时直接用结论即可</strong></p><p> <img src="http://image.ideal-20.cn/basic/1.1-03-030.png" alt="img"></p><p>题目：</p><p>请用最有效率的方式写出计算2乘以8的结果？</p><p>2 * 8</p><p>2  &lt;&lt;  3</p><h4 id="❤2-9-6-三目运算符"><a href="#❤2-9-6-三目运算符" class="headerlink" title="❤2.9.6 三目运算符"></a>❤2.9.6 三目运算符</h4><p><strong>这一部分要与下面马上要学习的if语句进行对照学习</strong></p><p>满足表达式则执行冒号前的表达式，反之则时候后面的</p><p>格式 ： （条件表达式）？（条件真的表达式）：（条件假的表达式）</p><p>条件表达式：结果是一个boolean型</p><p>Eg：  </p><pre class=" language-java"><code class="language-java">将a<span class="token punctuation">,</span>b 中的较小数赋值给xx <span class="token operator">=</span> a  <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b  → <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> x <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token keyword">else</span> x <span class="token operator">=</span> b</code></pre><h3 id="2-10-键盘录入"><a href="#2-10-键盘录入" class="headerlink" title="2.10 键盘录入"></a>2.10 键盘录入</h3><p>我们之前所写的程序中，数据的值都是固定的，在源码中就写好的，而我们有时候想要让用户来决定一些值的具体数据（例如：学生成绩录入），所以键盘录入就是让用户输入一些值，使得程序更加灵活。</p><p>现在我们对于导包以及对象的概念仍然比较模糊，但是我们在介绍别的知识的时候也会频繁的用到，所以大家暂时按照以下的格式记忆下来。</p><ul><li><p>A：导包：</p><ul><li><p>格式：import java.util.Scanner;</p></li><li><p>位置：在class上面</p></li></ul></li><li><p>B：创建键盘录入对象</p><ul><li>格式：Scanner sc = new Scanner(System.in);</li></ul></li><li><p>C:通过对象获取数据</p><ul><li><p>格式： int  x  =  sc.nextint();</p></li><li><p>String s = sc.nextLine();（字符串录入）</p></li></ul></li></ul><p><img src="http://image.ideal-20.cn/basic/1.1-03-032.png" alt></p><h3 id="2-11-选择结构（分支结构）"><a href="#2-11-选择结构（分支结构）" class="headerlink" title="2.11 选择结构（分支结构）"></a>2.11 选择结构（分支结构）</h3><p><strong>· if 语句</strong></p><p><strong>· switch 语句</strong></p><p>认识选择结构后我们的程序就会变得很有趣了，我们先来学习一下最常见的If条 件语句</p><h4 id="一-if语句"><a href="#一-if语句" class="headerlink" title="(一)  if语句"></a>(一)  if语句</h4><p><img src="http://image.ideal-20.cn/basic/1.1-03-033.png" alt> </p><p><strong>更正：满足就执行，不满足就出去</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-034.png" alt></p><p>我们对照三元运算符和if语句，这两个是不是完全一样的呢？</p><p>三元运算符的操作都可以使用if语句改进，反之不成立</p><p>什么时候不成立呢？</p><p>当if语句控制的语句体是一条输出语句的时候，就不成立。</p><p>因为三元运算符是一个运算符，必须要求有一个结果返回。</p><p>而输出语句却不能作为一个返回结果</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-035.png" alt></p><p><strong>三个数中求最大值：</strong>可以用三目运算 跳转2.9.6</p><p>用if语句实现：</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-037.png" alt></p><h3 id="二-switch语句"><a href="#二-switch语句" class="headerlink" title="(二) switch语句"></a>(二) switch语句</h3><p> <img src="http://image.ideal-20.cn/basic/1.1-03-038.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-040.png" alt> </p><p><img src="http://image.ideal-20.cn/basic/1.1-03-039.png" alt></p><p><strong>注意：</strong> </p><ul><li><p>case后面只能是常量，不能是变量，而且不能出现相同的</p></li><li><p>default可以省略 但是一般不建议，</p></li></ul><p>（除非判断的值是固定的，单选题）</p><ul><li><p>break 可以省略，一般不建议</p></li><li><p>default可以出现在switch语句的任意位置</p></li><li><p>switch语句的结束条件：</p></li></ul><p>遇到break  或者  执行到程序的末尾</p><p><strong>以下条件选用switch</strong></p><ul><li><p>条件分支有多个</p></li><li><p>条件的值是整数或一个字符型</p></li></ul><p><strong>原因</strong></p><ul><li><p>如果条件分支太多时用if语句，一定会出现if的嵌套，if嵌套的越多，程序 的开销就会随着增大，这样整个程序的运行效率就一定会大大降低</p></li><li><p>switch值比较一次就可以找出条件的结果</p></li></ul><p><strong>我们在下面将上面的if成绩例程改为switch版本是不是简洁了很多呢</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-041.png" alt></p><h3 id="2-12-循环语句"><a href="#2-12-循环语句" class="headerlink" title="2.12 循环语句"></a>2.12 循环语句</h3><ul><li><p><strong>for循环</strong></p></li><li><p><strong>while循环</strong></p></li><li><p><strong>do …while循环</strong></p></li></ul><p><strong>我们如果存在大量的重复语句，我们就可以使用循环语句，进行处理。</strong></p><h4 id="一-for循环"><a href="#一-for循环" class="headerlink" title="(一) for循环"></a>(一) for循环</h4><p><img src="http://image.ideal-20.cn/basic/1.1-03-042.png" alt></p><p>for 语句不仅适用于循环次数明确的情况，也适用于循环次数不明确的情况  <strong>（满足条件继续循环，不满足跳出循环）</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-043.png" alt></p><p><strong>求偶数和还有一种方法：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> x<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Sum <span class="token operator">+=</span> x<span class="token punctuation">}</span></code></pre><p><strong>求5的阶乘</strong></p><p>分析 什么是阶乘  n! = n * ( n -1 ) * ( n - 2) * … * 3 * 2 *1</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> jc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义最终结果变量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    Jc <span class="token operator">*=</span> x<span class="token punctuation">}</span></code></pre><p><strong>在控制台输出所有的水仙花数</strong></p><p>水仙花数就是指一个三位数，其各位数字的立方等于该数本身</p><p>Eg：153 = 1*1<em>1 +5</em>5<em>5+ 3</em>3*3 = 125 +27 =153</p><p><strong>通过 for循环我们可以实现获取一个三位数</strong></p><p><strong>获取这个三位数的个十百位上的数据</strong></p><p><strong>获取方法： 假设有一个数据为 153</strong></p><pre class=" language-java"><code class="language-java">Ge： <span class="token number">153</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">=</span><span class="token number">3</span>Shi ：<span class="token number">153</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">5</span>Bai： <span class="token number">153</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">1</span>Qian： x<span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span>Wan ：x<span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span></code></pre><p><strong>利用嵌套循环：可以输出各种样式的三角形</strong></p><p><strong>外循环控制行数，内循环控制列数</strong></p><p><strong>System.out.print() → 不换行</strong></p><p><strong>System.out.println() → 换行</strong></p><p><strong>九九乘法表</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-047.png" alt></p><h4 id="二-while循环"><a href="#二-while循环" class="headerlink" title="(二) while循环"></a>(二) while循环</h4><p><img src="http://image.ideal-20.cn/basic/1.1-03-044.png" alt> </p><p>判断条件表达式的值为逻辑真时，重复执行循环体（不满足出去）</p><p><strong>死循环：</strong></p><p>第一种：</p><p>for(;;){}</p><p>第二种：</p><p>while(true){}</p><p><img src="http://image.ideal-20.cn/basic/1.1-03-045.png" alt></p><p><strong>While循环和for循环的区别？</strong></p><p>使用区别：</p><p>for循环 控制条件定义的变量，只能在循环内使用</p><p>while 循环 ….. 可以在循环外使用</p><p>因为变量及早的从内存中消失，可以提高内存的使用效率</p><p>另一种理解：</p><p>for 语句不仅适用于循环次数明确的情况，也适用于循环次数不明确的情况</p><p>while 循环适用于循环次数不明确的情况</p><h4 id="三-do-…-while循环"><a href="#三-do-…-while循环" class="headerlink" title="(三) do … while循环"></a>(三) do … while循环</h4><p><img src="http://image.ideal-20.cn/basic/1.1-03-046.png" alt></p><p>先执行循环体，再判断继续条件不为逻辑真时，再执行循环体并判断条 件， 直到条件为假转去执行while下面的语句（不满足出去）</p><p>至少要执行一次</p><p><strong>2.12 跳转控制语句</strong></p><ul><li><p><strong>break：中断</strong></p></li><li><p><strong>continue: 继续</strong></p></li><li><p><strong>return: 返回</strong></p></li></ul><p><strong>(一) break</strong> 的意思是<strong>中断</strong></p><p>适用：switch、循环语句中(循环语句中加入了if判断的情况)</p><p><strong>跳出单层循环（</strong>从最近的封闭循环体中跳出<strong>）</strong></p><p>若想跳出多层循环 需要使用带标签的语句</p><p><strong>格式：标签名：语句</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-048.png" alt></p><p><strong>(二) continue 继续</strong>的意思是</p><p><strong>跳出一次循环进入下一次的执行</strong></p><p><strong>（</strong>结束本次循环，进入下次循环的判定。<strong>）</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-049.png" alt></p><p><img src="http://image.ideal-20.cn/basic/1.1-03-050.png" alt></p><p><strong>(三) retuen</strong></p><p>return关键字不是为了跳出循环体，更常用的功能是<strong>（结束一个方法），</strong>也就是退出一个方法。跳转到上层调用的方法。</p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见， 蟹蟹大家 ！^_^</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.1-Java基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002-Java开发环境不再需要配置classpath</title>
      <link href="/2019/09/16/1.1-java-ji-chu-zhi-shi/002-java-kai-fa-huan-jing-bu-zai-xu-yao-pei-zhi-classpath/"/>
      <url>/2019/09/16/1.1-java-ji-chu-zhi-shi/002-java-kai-fa-huan-jing-bu-zai-xu-yao-pei-zhi-classpath/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/basic/1.1-01-001.png" alt></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>之前发布了关于java开发环境配置的文章，经过与网友的交流，我了解到在jdk1.5以后，java开发环境配置的时候，确实不需要对classpath进行配置，但市面上的书籍，以及一些博客、还是老一套，继续推荐配置classpath，并且关于不需要配置classpath网络上没有什么完整细致，能令人信服的答案，所以我查阅了一些资料以及与别人交流，今天和大家分享一下这些内容。</p><h2 id="原配置代码："><a href="#原配置代码：" class="headerlink" title="原配置代码："></a>原配置代码：</h2><blockquote><p>.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar </p></blockquote><h3 id="原代码详解："><a href="#原代码详解：" class="headerlink" title="原代码详解："></a>原代码详解：</h3><p>Java_Home代表了我们jdk的路径</p><ul><li>dt.jar是关于运行环境的类库，主要是用于swing的包，如果不使用可以不配置。</li><li>tools.jar是工具类库,它在编译和运行一个类时被使用</li></ul><p>当我们配置classpath后，系统会根据我们所配置的classpath加载类</p><p>例如：在我们使用javac命令编译程序时，系统加载tools.jar其实就封装了下面这样一条命令</p><blockquote><p>javac XXX.java</p></blockquote><blockquote><p>java -Classpath=%JAVA_HOME%\lib\tools.jar  xx.xxx.Main  XXX.java  </p></blockquote><p>当然tools的功能可不止这一点，但是确实它为我们提供了很多便利</p><h2 id="我们不再需要配置classpath了！"><a href="#我们不再需要配置classpath了！" class="headerlink" title="我们不再需要配置classpath了！"></a>我们不再需要配置classpath了！</h2><p>在JDK1.5以后，classpath并不是必须配置了，在JDK1.5之前，是没有办法在当前目录下加载类的（找不到 JDK目录下lib文件夹中的.jar文件），所以我们需要通过配置classpath，但JDK1.5之后，JRE能自动搜索目录下类文件，并且加载dt.jar和tool.jar的类。</p><h2 id="官方文档解释（JDK-Tools-and-Utilities）"><a href="#官方文档解释（JDK-Tools-and-Utilities）" class="headerlink" title="官方文档解释（JDK Tools and Utilities）"></a>官方文档解释（JDK Tools and Utilities）</h2><blockquote><p>The class path tells the JDK tools and applications where to find third-party and user-defined classes that are not extensions or part of the Java platform. See The Extension Mechanism at </p></blockquote><blockquote><p>类路径告诉JDK工具和应用程序在哪里可以找到第三方和用户定义的类，这些类既不是Java平台的扩展，也不是Java平台的一部分。参见扩展机制</p></blockquote><blockquote><p>If you upgrade from an earlier release of the JDK, then your startup settings might include CLASSPATH settings that are no longer needed. You should remove any settings that are not application-specific, such as classes.zip. Some third-party applications that use the Java Virtual Machine (JVM) can modify your CLASSPATH environment variable to include the libraries they use. Such settings can remain.</p></blockquote><blockquote><p>如果您从JDK的早期版本升级，那么您的启动设置可能包括不再需要的类路径设置。您应该删除任何与应用程序无关的设置，比如classes.zip。一些使用Java虚拟机(JVM)的第三方应用程序可以修改类路径环境变量，以包含它们使用的库。这样的设置可以保留。</p></blockquote><blockquote><p>You can change the class path by using the -classpath or -cp option of some Java commands when you call the JVM or other JDK tools or by using the CLASSPATH environment variable. See JDK Commands Class Path Options. Using the -classpath option is preferred over setting the CLASSPATH environment variable because you can set it individually for each application without affecting other applications and without other applications modifying its value. See CLASSPATH Environment Variable.</p></blockquote><blockquote><p>在调用JVM或其他JDK工具时，可以使用一些Java命令的-classpath或-cp选项，或者使用CLASSPATH环境变量，来更改类路径。参见JDK命令类路径选项。使用-classpath选项优于设置CLASSPATH环境变量，因为您可以为每个应用程序单独设置它，而不影响其他应用程序，也不需要其他应用程序修改它的值。参见CLASSPATH环境变量。</p></blockquote><p>通过官方的文档说明我们可以看到，rt.jar和tool.jar这两种属于java平台自身的包就不需要添加到classpath中，只有一些第三方类或者自定义类需要，也并不推荐使用配置CLASSPATH的方法，更推荐使用-classpath选项</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>在JDK1.5之后的版本，配置Java环境变量的时候我们不再需要配置classpath，只需要配置Java_Home以及path即可！</strong></p><h2 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h2><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见, 蟹蟹大家 ！_</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> 1.1-Java基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境变量 </tag>
            
            <tag> classpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001-Dos命令与开发环境的配置</title>
      <link href="/2019/09/16/1.1-java-ji-chu-zhi-shi/001-dos-ming-ling-yu-kai-fa-huan-jing-de-pei-zhi/"/>
      <url>/2019/09/16/1.1-java-ji-chu-zhi-shi/001-dos-ming-ling-yu-kai-fa-huan-jing-de-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="http://image.ideal-20.cn/basic/1.1-01-001.png" alt></p><h1 id="第一阶段-JAVA基础知识"><a href="#第一阶段-JAVA基础知识" class="headerlink" title="第一阶段 JAVA基础知识"></a>第一阶段 JAVA基础知识</h1><h2 id="第一章-开发环境的配置"><a href="#第一章-开发环境的配置" class="headerlink" title="第一章 开发环境的配置"></a>第一章 开发环境的配置</h2><h3 id="知识铺垫：Dos-命令"><a href="#知识铺垫：Dos-命令" class="headerlink" title="知识铺垫：Dos 命令"></a>知识铺垫：Dos 命令</h3><blockquote><p>在正式进入Java学习之前我们来了解一个看起来B格很高的东西——Dos命令</p><p>DOS命令，计算机术语，是指DOS操作系统的命令，是一种面向磁盘的操作命令，主要包括目录操作类命令、磁盘操作类命令、文件操作类命令和其它命令。</p></blockquote><p>这是什么意思呢？我们先来看一看这究竟是什么东西呢</p><p>通过 快捷键<strong>Win + R</strong>可以调出 运行窗口</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-002.png" alt> </p><p>我们输入cmd 后回车即可调出<strong>命令提示符界面</strong>，是不是感觉B格马上就起来了。</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-003.png" alt> </p><p>简单的理解就是：在cmd中输入一些“<strong>特定</strong>”的代码 <strong>系统中的一些目录、文件等进行操作（运行、关闭、删除、移动、创建等等）</strong></p><p>我们首先来了解一些学习Java中常用到的Dos命令</p><table><thead><tr><th><strong>Dos命令</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>d:</strong></td><td>回车 盘符切换</td></tr><tr><td><strong>dir</strong></td><td>列出当前目录下的文件以及文件夹</td></tr><tr><td><strong>md</strong></td><td>创建目录（创建文件夹）</td></tr><tr><td><strong>rd</strong></td><td>删除目录（删除文件夹，注意：前提是文件夹必须是 空的！！）如果想删除不是空的文件夹（比如删除aaaaa文件夹），可以用命令 rd /s aaaaa(会有删除提示)或者rd /s /q aaaaa(静默删除)</td></tr><tr><td><strong>cd</strong></td><td>改变指定目录(进入指定目录)</td></tr><tr><td><strong>cd..</strong></td><td>退回到上一级目录</td></tr><tr><td>cd\</td><td>退回到根目录</td></tr><tr><td><strong>del</strong></td><td>(delete): 删除文件,删除一堆后缀名一样的文件*.txt</td></tr><tr><td><strong>exit</strong></td><td>退出dos命令行</td></tr><tr><td><strong>cls</strong></td><td>(clear screen)清屏</td></tr></tbody></table><h3 id="第一个程序-HelloWorld"><a href="#第一个程序-HelloWorld" class="headerlink" title="第一个程序 HelloWorld"></a>第一个程序 HelloWorld</h3><p>万物皆可HelloWorld，我们首先通过一个HelloWorld例程来看一下我们的Java语言到底是怎么样的呢</p><p>首先，我们创建一个名字为HelloWorld的记事本文件保存后缀为“.java”，写入如下代码：</p><p> <img src="http://image.ideal-20.cn/basic/1.1-01-004.png" alt></p><p><strong>（一）程序解释</strong></p><ol><li>Java程序的最<strong>基本单位是类</strong>，所以我们定义一个class类</li></ol><p>格式： class 类名 {}</p><ol start="2"><li>程序执行<strong>必须有main方法</strong>，这是程序与OS（操作系统）的接口</li></ol><p>格式：public static void main (String[] args){}</p><ol start="3"><li>输出语句</li></ol><p>格式：System.out.println(“HelloWorld”);</p><p><strong>（二）注意</strong></p><ol><li><p><strong>Class 后为类名</strong>，并且需要与<strong>保存的文件名相一致</strong></p></li><li><p>main的作用可以理解为，帮助操作系统找到一个入口，即执行main中的  代码</p></li></ol><p><strong>（三）常见错误</strong></p><ol><li><p>代码中的任何符号，均需要在英文状态下进行输入</p></li><li><p>String 中的“S”字母要大写</p></li><li><p>System 中的“S”要大写</p><p>从C++中到java 被大小写疯狂安排（无奈状）</p></li></ol><p><strong>（四）Java程序的开发执行流程</strong></p><ol><li><p><strong>编写java源程序(.java)</strong></p></li><li><p>通过javac命令编译生成.class文件（javac HelloWorld.java）</p></li><li><p>通过java命令运行.class文件 （java HelloWorld）</p></li></ol><p>我们仅仅完成了HelloWorld源代码的编写，如何编译运行这个源代码呢？</p><p>我们首先需要做两件事：</p><p><strong>1. 安装JDK</strong></p><p><strong>2. 配置环境变量</strong></p><h3 id="第一步：安装JDK"><a href="#第一步：安装JDK" class="headerlink" title="第一步：安装JDK"></a>第一步：安装JDK</h3><p>JDK即使<strong>Java运行的环境</strong>，其中包含了J<strong>ava虚拟机</strong>、<strong>java基础类库</strong>。只有安装了JDK我们才能编译运行我们的java代码</p><p>我们首先可以百度 JDK</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-005.png" alt> </p><p>进入网站后选择合适的JDK版本，我所装的是JDK8的版本，现在最新版本为12，其实就是在低版本的基础上增加了一些新特性，但是我们暂时也不会涉及到一些很新的特性，所以<strong>JDK版本一般不低于8即可</strong>。</p><p>!<img src="http://image.ideal-20.cn/basic/1.1-01-006.png" alt></p><p>点击对应版本<strong>DOWNLOAD按钮</strong>，进入系统版本选择页面</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-007.png" alt> </p><p>如果对自己系统版本不清楚的朋友可以 鼠标右击桌面计算机图标 点击属性 打开<strong>计算机属性界面</strong>查看</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-008.png" alt>) </p><p>然后按部就班安装即可，最好修改默认路径<strong>不要在C盘</strong>，并且安装路径中<strong>最好不要有中文或者空格</strong>。</p><p>安装结束后，我们在cmd中输入<strong>java</strong>这个命令，如果返回如下内容，即安装成功</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-009.png" alt> </p><h3 id="第二步：配置环境变量"><a href="#第二步：配置环境变量" class="headerlink" title="第二步：配置环境变量"></a>第二步：配置环境变量</h3><p>我们想要在cmd中使用命令运行任何程序的时候 都需要<strong>告诉系统，我们要执行的程序所在的位置</strong>，例如我们想要编译在 D:\develeop目录下的 HelloWorld.java代码 我们需要在cmd中<strong>利用 Dos命令将目录指定到我们被编译文件所处的位置</strong></p><p><img src="http://image.ideal-20.cn/basic/1.1-01-010.png" alt> </p><p>但是问题又来了，为什么 我输入javac HelloWorld.java后 会提示</p><p><strong>‘javac’不是内部或者外部命令呢，也不是可运行的程序，或批处理文件。</strong></p><p>系统：我也一脸蒙圈，你又没告诉我javac是从哪里冒出来的，只能给你报错了</p><p>我们找到我们JDK的安装路径下的 bin目录</p><p>我们可以看到有很多 .exe 可执行程序，其中 java.exe和javac.exe原来就是我们输入代码所想要执行的两个程序，可是如何帮助系统每一次找到我想运行的这两个程序呢？</p><p>我们配置环境变量就可以解决这个问题</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-011.png" alt></p><p>那么如何配置环境变量呢，我们只需要打开<strong>计算机属性→高级系统设置→环境变量</strong>即可开始配置</p><p><img src="http://image.ideal-20.cn/basic/1.1-01-012.png" alt></p><p><strong>(1) path环境变量的作用</strong></p><p>保证javac命令可以在任意目录下运行。</p><p><strong>path配置的方案：</strong></p><p>找到环境变量的位置，在系统变量里面</p><p><strong>新建：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//变量值根据自己实际的安装路径填写</span>变量名：JAVA_HOME变量值：D<span class="token operator">:</span>\develop\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_201</code></pre><p><strong>修改</strong>：</p><pre><code>变量名：Path变量值：%Java_Home%\bin;%Java_Home%\jre\bin;以前的内容</code></pre><p>Path环境变量里面记录的是可执行文件如.exe文件，对可执行文件现在当前 路径中去找，如果没找到就去path环境变量中去找</p><p><strong>(2) classpath环境变量</strong></p><blockquote><p><strong>注意：</strong>使用1.5及以上版本的JDK，不必继续设置classpath。详情内容将进行专篇讲解（已发表）</p></blockquote><p>(1) classpath环境变量的作用</p><p>保证class文件可以在任意目录下运行</p><p>(2) classpath环境变量的配置</p><p>找到环境变量的位置，在系统变量里面</p><p>新建：</p><pre><code>变量名：CLASSPATH变量值：.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar</code></pre><p><strong>好了，我们来测试一下我们的HelloWorld程序</strong></p><p>我们成功在控制台中输出了一句 HelloWorld </p><p><img src="http://image.ideal-20.cn/basic/1.1-01-013.png" alt> </p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果内容中有什么不足，或者错误的地方，欢迎大家给我留言提出意见 ~</p><p>如果能帮到你的话，那就来关注我吧！</p><blockquote><p>在这里的我们素不相识，却都在为了自己的梦而努力 ❤</p><p>一个坚持推送原创Java技术的公众号：理想二旬不止</p></blockquote><p><img src="http://image.ideal-20.cn/img/QRcode258.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 1.1-Java基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> dos </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
